// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryItem {
    ///
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub content: ::core::option::Option<
        super::super::super::super::broadcast::message::deepsearch::DeepSearchResponse,
    >,
}
impl ::prost::Name for ChatHistoryItem {
    const NAME: &'static str = "ChatHistoryItem";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryListItem {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub new_chat_time: i64,
}
impl ::prost::Name for ChatHistoryListItem {
    const NAME: &'static str = "ChatHistoryListItem";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryListItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryListItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryListReply {
    ///
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<ChatHistoryListItem>,
    ///
    #[prost(string, tag = "2")]
    pub next_cursor: ::prost::alloc::string::String,
}
impl ::prost::Name for ChatHistoryListReply {
    const NAME: &'static str = "ChatHistoryListReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryListReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryListReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryListReq {
    ///
    #[prost(string, tag = "1")]
    pub cursor: ::prost::alloc::string::String,
}
impl ::prost::Name for ChatHistoryListReq {
    const NAME: &'static str = "ChatHistoryListReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryListReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryListReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryReply {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<ChatHistoryItem>,
    ///
    #[prost(string, tag = "3")]
    pub next_cursor: ::prost::alloc::string::String,
}
impl ::prost::Name for ChatHistoryReply {
    const NAME: &'static str = "ChatHistoryReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatHistoryReq {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cursor: ::prost::alloc::string::String,
}
impl ::prost::Name for ChatHistoryReq {
    const NAME: &'static str = "ChatHistoryReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatHistoryReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatHistoryReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatReply {
    ///
    #[prost(int32, tag = "1")]
    pub code: i32,
    ///
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub query_id: ::prost::alloc::string::String,
}
impl ::prost::Name for ChatReply {
    const NAME: &'static str = "ChatReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatReq {
    ///
    #[prost(enumeration = "chat_req::ChatType", tag = "1")]
    pub chat_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub retry_query_id: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ChatReq`.
pub mod chat_req {
    ///
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ChatType {
        ///
        Invalid = 0,
        ///
        NewChat = 1,
        ///
        RetryChat = 2,
    }
    impl ChatType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Invalid => "INVALID",
                Self::NewChat => "NEW_CHAT",
                Self::RetryChat => "RETRY_CHAT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "INVALID" => Some(Self::Invalid),
                "NEW_CHAT" => Some(Self::NewChat),
                "RETRY_CHAT" => Some(Self::RetryChat),
                _ => None,
            }
        }
    }
}
impl ::prost::Name for ChatReq {
    const NAME: &'static str = "ChatReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ChatReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ChatReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigReply {
    ///
    #[prost(string, tag = "1")]
    pub start_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub complete_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub chat_bot_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "4")]
    pub thinking_text: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(int64, tag = "5")]
    pub interval: i64,
    ///
    #[prost(int64, tag = "6")]
    pub broadcast_timeout: i64,
    ///
    #[prost(string, tag = "7")]
    pub streaming_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub navigation_thinking_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub navigation_answering_text: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigReply {
    const NAME: &'static str = "ConfigReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ConfigReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ConfigReply".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigReq {}
impl ::prost::Name for ConfigReq {
    const NAME: &'static str = "ConfigReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.ConfigReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.ConfigReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionReply {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
}
impl ::prost::Name for SessionReply {
    const NAME: &'static str = "SessionReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.SessionReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.SessionReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionReq {
    ///
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for SessionReq {
    const NAME: &'static str = "SessionReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.SessionReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.SessionReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopChatReply {
    ///
    #[prost(int32, tag = "1")]
    pub code: i32,
    ///
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub query_id: ::prost::alloc::string::String,
}
impl ::prost::Name for StopChatReply {
    const NAME: &'static str = "StopChatReply";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.StopChatReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.StopChatReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopChatReq {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub query_id: ::prost::alloc::string::String,
}
impl ::prost::Name for StopChatReq {
    const NAME: &'static str = "StopChatReq";
    const PACKAGE: &'static str = "bilibili.app.search.deepsearch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.search.deepsearch.v1.StopChatReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.search.deepsearch.v1.StopChatReq".into()
    }
}
