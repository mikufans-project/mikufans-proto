// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ButtonStyle {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub jump_link: ::prost::alloc::string::String,
}
impl ::prost::Name for ButtonStyle {
    const NAME: &'static str = "ButtonStyle";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.ButtonStyle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.ButtonStyle".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClipInfo {
    ///
    #[prost(enumeration = "ClipType", tag = "1")]
    pub clip_type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub material_no: i64,
    ///
    #[prost(int32, tag = "3")]
    pub start: i32,
    ///
    #[prost(int32, tag = "4")]
    pub end: i32,
}
impl ::prost::Name for ClipInfo {
    const NAME: &'static str = "ClipInfo";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.ClipInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.ClipInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PugvAnyModel {
    ///
    #[prost(int64, tag = "1")]
    pub season_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub episode_id: i64,
    ///
    #[prost(enumeration = "EpisodeStatus", tag = "3")]
    pub status: i32,
    ///
    #[prost(message, optional, tag = "4")]
    pub risk_control: ::core::option::Option<RiskControl>,
    ///
    #[prost(message, optional, tag = "5")]
    pub player_mask: ::core::option::Option<PlayerMask>,
    ///
    #[prost(message, optional, tag = "6")]
    pub clip_info: ::core::option::Option<ClipInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub play_limit: ::core::option::Option<PlayLimit>,
}
impl ::prost::Name for PugvAnyModel {
    const NAME: &'static str = "PUGVAnyModel";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.PUGVAnyModel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.PUGVAnyModel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayLimit {
    ///
    #[prost(enumeration = "PlayLimitCode", tag = "1")]
    pub code: i32,
    ///
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub sub_message: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub button: ::core::option::Option<ButtonStyle>,
}
impl ::prost::Name for PlayLimit {
    const NAME: &'static str = "PlayLimit";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.PlayLimit".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.PlayLimit".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerMask {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub prefix: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub suffix: ::prost::alloc::string::String,
}
impl ::prost::Name for PlayerMask {
    const NAME: &'static str = "PlayerMask";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.PlayerMask".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.PlayerMask".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RiskControl {
    ///
    #[prost(bool, tag = "1")]
    pub need_send_sms: bool,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub risk_message: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub action_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub send_sms_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub buvid: ::prost::alloc::string::String,
}
impl ::prost::Name for RiskControl {
    const NAME: &'static str = "RiskControl";
    const PACKAGE: &'static str = "bilibili.app.playerunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.playerunite.pugvanymodel.RiskControl".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.playerunite.pugvanymodel.RiskControl".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClipType {
    ///
    Unspecified = 0,
    ///
    He = 1,
}
impl ClipType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CLIP_TYPE_UNSPECIFIED",
            Self::He => "CLIP_TYPE_HE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLIP_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CLIP_TYPE_HE" => Some(Self::He),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EpisodeStatus {
    ///
    Unspecified = 0,
    ///
    TryWatchWhole = 1,
    ///
    NotTryWatch = 2,
    ///
    TryWatch5Minutes = 3,
}
impl EpisodeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "EPISODE_STATUS_UNSPECIFIED",
            Self::TryWatchWhole => "EPISODE_STATUS_TRY_WATCH_WHOLE",
            Self::NotTryWatch => "EPISODE_STATUS_NOT_TRY_WATCH",
            Self::TryWatch5Minutes => "EPISODE_STATUS_TRY_WATCH_5_MINUTES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EPISODE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "EPISODE_STATUS_TRY_WATCH_WHOLE" => Some(Self::TryWatchWhole),
            "EPISODE_STATUS_NOT_TRY_WATCH" => Some(Self::NotTryWatch),
            "EPISODE_STATUS_TRY_WATCH_5_MINUTES" => Some(Self::TryWatch5Minutes),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayLimitCode {
    ///
    PlcUnknown = 0,
    ///
    PlcDrmNotLogin = 1,
}
impl PlayLimitCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlcUnknown => "PLC_UNKNOWN",
            Self::PlcDrmNotLogin => "PLC_DRM_NOT_LOGIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLC_UNKNOWN" => Some(Self::PlcUnknown),
            "PLC_DRM_NOT_LOGIN" => Some(Self::PlcDrmNotLogin),
            _ => None,
        }
    }
}
