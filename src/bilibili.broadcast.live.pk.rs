// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistantInfo {
    ///
    #[prost(int64, tag = "1")]
    pub rank: i64,
    ///
    #[prost(int64, tag = "2")]
    pub uid: i64,
    ///
    #[prost(string, tag = "3")]
    pub uname: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub award_content: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "6")]
    pub is_mystery: bool,
}
impl ::prost::Name for AssistantInfo {
    const NAME: &'static str = "AssistantInfo";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.AssistantInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.AssistantInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DmConf {
    ///
    #[prost(string, tag = "1")]
    pub font_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub bg_color: ::prost::alloc::string::String,
}
impl ::prost::Name for DmConf {
    const NAME: &'static str = "DmConf";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.DmConf".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.DmConf".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EscapeInfo {
    ///
    #[prost(int64, tag = "1")]
    pub count: i64,
    ///
    #[prost(int64, tag = "2")]
    pub puni_time: i64,
    ///
    #[prost(string, tag = "3")]
    pub tips: ::prost::alloc::string::String,
}
impl ::prost::Name for EscapeInfo {
    const NAME: &'static str = "EscapeInfo";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.EscapeInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.EscapeInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinalConf {
    ///
    #[prost(int64, tag = "1")]
    pub start_time: i64,
    ///
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    ///
    #[prost(int64, tag = "3")]
    pub switch: i64,
}
impl ::prost::Name for FinalConf {
    const NAME: &'static str = "FinalConf";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.FinalConf".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.FinalConf".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InvitePkResp {
    ///
    #[prost(int64, tag = "1")]
    pub invited_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub wait_time: i64,
}
impl ::prost::Name for InvitePkResp {
    const NAME: &'static str = "InvitePkResp";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.InvitePkResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.InvitePkResp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NextEffect {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub effect_id: i64,
}
impl ::prost::Name for NextEffect {
    const NAME: &'static str = "NextEffect";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.NextEffect".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.NextEffect".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkScoreMultiplePlay {
    ///
    #[prost(int64, tag = "1")]
    pub pk_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub status: i64,
    ///
    #[prost(int64, tag = "3")]
    pub target_votes: i64,
    ///
    #[prost(int64, tag = "4")]
    pub multiple_collect_start_time: i64,
    ///
    #[prost(int64, tag = "5")]
    pub multiple_collect_end_time: i64,
    ///
    #[prost(string, tag = "6")]
    pub award_name: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub award_num: i64,
    ///
    #[prost(int64, tag = "8")]
    pub award_no: i64,
    ///
    #[prost(string, tag = "9")]
    pub rule_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub draw_start_time: i64,
    ///
    #[prost(int64, tag = "11")]
    pub draw_end_time: i64,
    ///
    #[prost(string, tag = "12")]
    pub draw_award_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub draw_award_value: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "14")]
    pub award_multiple_time: i64,
    ///
    #[prost(int64, tag = "15")]
    pub award_start_time: i64,
    ///
    #[prost(int64, tag = "16")]
    pub award_end_time: i64,
    ///
    #[prost(int64, tag = "17")]
    pub power: i64,
    ///
    #[prost(string, tag = "18")]
    pub guide_str: ::prost::alloc::string::String,
}
impl ::prost::Name for PkScoreMultiplePlay {
    const NAME: &'static str = "PKScoreMultiplePlay";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PKScoreMultiplePlay".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PKScoreMultiplePlay".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkCapsule {
    ///
    #[prost(enumeration = "PkCapsuleType", tag = "1")]
    pub capsule_type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub animation_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub toast: ::prost::alloc::string::String,
}
impl ::prost::Name for PkCapsule {
    const NAME: &'static str = "PkCapsule";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkCapsule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkCapsule".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkCard {
    ///
    #[prost(string, tag = "1")]
    pub card_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub card_type: i64,
    ///
    #[prost(int64, tag = "3")]
    pub end_time: i64,
    ///
    #[prost(string, tag = "4")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for PkCard {
    const NAME: &'static str = "PkCard";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkCardPlay {
    ///
    #[prost(string, tag = "1")]
    pub rule_url: ::prost::alloc::string::String,
}
impl ::prost::Name for PkCardPlay {
    const NAME: &'static str = "PkCardPlay";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkCardPlay".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkCardPlay".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkGiftEffect {
    ///
    #[prost(int64, tag = "1")]
    pub sender_uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub anchor_uid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub gift_effect_id: i64,
    ///
    #[prost(message, repeated, tag = "4")]
    pub next_effect_list: ::prost::alloc::vec::Vec<NextEffect>,
    ///
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
}
impl ::prost::Name for PkGiftEffect {
    const NAME: &'static str = "PkGiftEffect";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkGiftEffect".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkGiftEffect".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkInfo {
    ///
    #[prost(message, optional, tag = "1")]
    pub pk_basic: ::core::option::Option<PkBasic>,
    ///
    #[prost(message, repeated, tag = "2")]
    pub members: ::prost::alloc::vec::Vec<PkUser>,
    ///
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    ///
    #[prost(int64, tag = "4")]
    pub mill_timestamp: i64,
    ///
    #[prost(message, repeated, tag = "5")]
    pub pk_group: ::prost::alloc::vec::Vec<PkGroup>,
    ///
    #[prost(message, optional, tag = "6")]
    pub pk_match_info: ::core::option::Option<PkMatchInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub invite_pk_resp: ::core::option::Option<InvitePkResp>,
    ///
    #[prost(message, optional, tag = "8")]
    pub pk_play: ::core::option::Option<PkPlay>,
    ///
    #[prost(bool, tag = "9")]
    pub audience_open: bool,
}
impl ::prost::Name for PkInfo {
    const NAME: &'static str = "PkInfo";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PkMatchInfo {
    ///
    #[prost(int64, tag = "1")]
    pub match_status: i64,
    ///
    #[prost(int64, tag = "2")]
    pub match_max_time: i64,
    ///
    #[prost(int64, tag = "3")]
    pub match_end_time: i64,
}
impl ::prost::Name for PkMatchInfo {
    const NAME: &'static str = "PkMatchInfo";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkMatchInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkMatchInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkPlay {
    ///
    #[prost(message, optional, tag = "1")]
    pub pk_score_multiple_play: ::core::option::Option<PkScoreMultiplePlay>,
    ///
    #[prost(message, optional, tag = "2")]
    pub final_conf: ::core::option::Option<FinalConf>,
    ///
    #[prost(bool, tag = "3")]
    pub show_streak: bool,
    ///
    #[prost(message, optional, tag = "4")]
    pub dm_conf: ::core::option::Option<DmConf>,
    ///
    #[prost(message, optional, tag = "5")]
    pub escape: ::core::option::Option<EscapeInfo>,
    ///
    #[prost(message, optional, tag = "6")]
    pub pk_card_play: ::core::option::Option<PkCardPlay>,
    ///
    #[prost(int64, tag = "7")]
    pub pre_duration: i64,
    ///
    #[prost(string, tag = "8")]
    pub pk_play_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub pk_punish_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub pk_text_hash: i64,
    ///
    #[prost(bool, tag = "11")]
    pub pk_text_enabled: bool,
    ///
    #[prost(message, optional, tag = "12")]
    pub pk_gift_effect: ::core::option::Option<PkGiftEffect>,
}
impl ::prost::Name for PkPlay {
    const NAME: &'static str = "PkPlay";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.PkPlay".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.PkPlay".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkBasic {
    ///
    #[prost(int64, tag = "1")]
    pub pk_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub biz_session_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub init_id: i64,
    ///
    #[prost(int64, tag = "4")]
    pub init_uid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub status: i64,
    ///
    #[prost(int64, tag = "6")]
    pub r#type: i64,
    ///
    #[prost(int64, tag = "7")]
    pub sub_type: i64,
    ///
    #[prost(int64, tag = "8")]
    pub start_time: i64,
    ///
    #[prost(int64, tag = "9")]
    pub end_time: i64,
    ///
    #[prost(int64, tag = "10")]
    pub punish_end_time: i64,
    ///
    #[prost(int64, tag = "11")]
    pub sprint_duration: i64,
    ///
    #[prost(string, tag = "12")]
    pub punish_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub template_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub main_page: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "15")]
    pub muti_pk_type: i64,
    ///
    #[prost(int64, tag = "16")]
    pub season_id: i64,
    ///
    #[prost(string, tag = "17")]
    pub status_msg: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "18")]
    pub satellite_info: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for PkBasic {
    const NAME: &'static str = "pkBasic";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.pkBasic".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.pkBasic".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkGroup {
    ///
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub votes: i64,
    ///
    #[prost(string, tag = "3")]
    pub votes_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub is_winner: i64,
}
impl ::prost::Name for PkGroup {
    const NAME: &'static str = "pkGroup";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.pkGroup".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.pkGroup".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PkUser {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub room_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub uname: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub votes: i64,
    ///
    #[prost(string, tag = "6")]
    pub votes_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub rank: i64,
    ///
    #[prost(int64, tag = "8")]
    pub status: i64,
    ///
    #[prost(message, repeated, tag = "9")]
    pub assist_info: ::prost::alloc::vec::Vec<AssistantInfo>,
    ///
    #[prost(int64, tag = "10")]
    pub is_follow: i64,
    ///
    #[prost(int64, tag = "11")]
    pub is_winner: i64,
    ///
    #[prost(int64, tag = "12")]
    pub group_id: i64,
    ///
    #[prost(int64, tag = "13")]
    pub golds: i64,
    ///
    #[prost(int64, tag = "14")]
    pub date_streak: i64,
    ///
    #[prost(int64, tag = "15")]
    pub pk_multiple_status: i64,
    ///
    #[prost(string, tag = "16")]
    pub power: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "17")]
    pub is_latest_streak: bool,
    ///
    #[prost(message, repeated, tag = "19")]
    pub pk_cards: ::prost::alloc::vec::Vec<PkCard>,
    ///
    #[prost(message, repeated, tag = "20")]
    pub capsules: ::prost::alloc::vec::Vec<PkCapsule>,
}
impl ::prost::Name for PkUser {
    const NAME: &'static str = "pkUser";
    const PACKAGE: &'static str = "bilibili.broadcast.live.pk";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.pk.pkUser".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.pk.pkUser".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PkCapsuleType {
    ///
    None = 0,
    ///
    FirstMultiple = 1,
}
impl PkCapsuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PkCapsuleTypeNone",
            Self::FirstMultiple => "FirstMultiple",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PkCapsuleTypeNone" => Some(Self::None),
            "FirstMultiple" => Some(Self::FirstMultiple),
            _ => None,
        }
    }
}
