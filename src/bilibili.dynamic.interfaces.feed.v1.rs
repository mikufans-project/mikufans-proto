// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveReportMessage {
    ///
    #[prost(enumeration = "active_report_message::ReportAction", tag = "1")]
    pub action: i32,
    ///
    #[prost(string, tag = "2")]
    pub metric_data: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ActiveReportMessage`.
pub mod active_report_message {
    ///
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ReportAction {
        ///
        None = 0,
        ///
        Exposure = 1,
        ///
        Click = 2,
    }
    impl ReportAction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::None => "REPORT_ACTION_NONE",
                Self::Exposure => "REPORT_ACTION_EXPOSURE",
                Self::Click => "REPORT_ACTION_CLICK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REPORT_ACTION_NONE" => Some(Self::None),
                "REPORT_ACTION_EXPOSURE" => Some(Self::Exposure),
                "REPORT_ACTION_CLICK" => Some(Self::Click),
                _ => None,
            }
        }
    }
}
impl ::prost::Name for ActiveReportMessage {
    const NAME: &'static str = "ActiveReportMessage";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ActiveReportMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ActiveReportMessage".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdInfoDetail {
    ///
    #[prost(string, tag = "1")]
    pub nation: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub province: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub city: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub district: ::prost::alloc::string::String,
}
impl ::prost::Name for AdInfoDetail {
    const NAME: &'static str = "AdInfoDetail";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.AdInfoDetail".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.AdInfoDetail".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddDynamicReportReq {
    ///
    #[prost(int64, tag = "1")]
    pub accused_uid: i64,
    ///
    #[prost(string, tag = "2")]
    pub dynamic_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub reason_type: i64,
    ///
    #[prost(string, tag = "4")]
    pub reason_desc: ::prost::alloc::string::String,
}
impl ::prost::Name for AddDynamicReportReq {
    const NAME: &'static str = "AddDynamicReportReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.AddDynamicReportReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.AddDynamicReportReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddDynamicReportRsp {}
impl ::prost::Name for AddDynamicReportRsp {
    const NAME: &'static str = "AddDynamicReportRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.AddDynamicReportRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.AddDynamicReportRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ArticleHomePageCategoriesReq {}
impl ::prost::Name for ArticleHomePageCategoriesReq {
    const NAME: &'static str = "ArticleHomePageCategoriesReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ArticleHomePageCategoriesReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ArticleHomePageCategoriesReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArticleHomePageCategoriesRsp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub categories: ::prost::alloc::vec::Vec<Category>,
}
impl ::prost::Name for ArticleHomePageCategoriesRsp {
    const NAME: &'static str = "ArticleHomePageCategoriesRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ArticleHomePageCategoriesRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ArticleHomePageCategoriesRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttachCardButtonReq {
    ///
    #[prost(int32, tag = "1")]
    pub cur_btn_status: i32,
    ///
    #[prost(int64, tag = "2")]
    pub dynamic_id: i64,
    ///
    #[prost(enumeration = "super::super::super::common::AttachCardType", tag = "3")]
    pub attach_card_type: i32,
    ///
    #[prost(string, tag = "4")]
    pub spm_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub reserve_total: i64,
    ///
    #[prost(string, tag = "6")]
    pub dynamic_id_str: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub card_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub card_biz_id: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "super::super::super::common::OpusBizType", tag = "9")]
    pub opus_biz_type: i32,
}
impl ::prost::Name for AttachCardButtonReq {
    const NAME: &'static str = "AttachCardButtonReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.AttachCardButtonReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.AttachCardButtonReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttachCardButtonRsp {
    ///
    #[prost(int32, tag = "1")]
    pub final_btn_status: i32,
    ///
    #[prost(string, tag = "2")]
    pub toast: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub desc_update: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub reserve_update: i64,
}
impl ::prost::Name for AttachCardButtonRsp {
    const NAME: &'static str = "AttachCardButtonRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.AttachCardButtonRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.AttachCardButtonRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Category {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub parent_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub position: i64,
    ///
    #[prost(message, repeated, tag = "5")]
    pub children: ::prost::alloc::vec::Vec<Category>,
    ///
    #[prost(string, tag = "6")]
    pub banner_url: ::prost::alloc::string::String,
}
impl ::prost::Name for Category {
    const NAME: &'static str = "Category";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.Category".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.Category".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigAb {
    ///
    #[prost(enumeration = "ConfigAbEntry", tag = "1")]
    pub entry: i32,
    ///
    #[prost(int64, tag = "2")]
    pub value: i64,
}
impl ::prost::Name for ConfigAb {
    const NAME: &'static str = "ConfigAB";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ConfigAB".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ConfigAB".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ConfigReq {}
impl ::prost::Name for ConfigReq {
    const NAME: &'static str = "ConfigReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ConfigReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ConfigReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigRsp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub ab_entries: ::prost::alloc::vec::Vec<ConfigAb>,
    ///
    #[prost(enumeration = "MaxPicCountType", tag = "2")]
    pub max_pic_count_type: i32,
    ///
    #[prost(string, tag = "3")]
    pub article_loading_address: ::prost::alloc::string::String,
}
impl ::prost::Name for ConfigRsp {
    const NAME: &'static str = "ConfigRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ConfigRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ConfigRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateCheckTribeeResp {
    ///
    #[prost(message, optional, tag = "1")]
    pub setting: ::core::option::Option<TribeePublishConfig>,
}
impl ::prost::Name for CreateCheckTribeeResp {
    const NAME: &'static str = "CreateCheckTribeeResp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreateCheckTribeeResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreateCheckTribeeResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDynReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub meta: ::core::option::Option<super::super::super::common::UserCreateMeta>,
    ///
    #[prost(message, optional, tag = "2")]
    pub content: ::core::option::Option<super::super::super::common::CreateContent>,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "3")]
    pub scene: i32,
    ///
    #[prost(message, repeated, tag = "4")]
    pub pics: ::prost::alloc::vec::Vec<super::super::super::common::CreatePic>,
    ///
    #[prost(message, optional, tag = "5")]
    pub repost_src: ::core::option::Option<super::super::super::common::DynIdentity>,
    ///
    #[prost(message, optional, tag = "6")]
    pub video: ::core::option::Option<super::super::super::common::CreateDynVideo>,
    ///
    #[prost(int64, tag = "7")]
    pub sketch_type: i64,
    ///
    #[prost(message, optional, tag = "8")]
    pub sketch: ::core::option::Option<super::super::super::common::Sketch>,
    ///
    #[prost(message, optional, tag = "9")]
    pub program: ::core::option::Option<super::super::super::common::Program>,
    ///
    #[prost(message, optional, tag = "10")]
    pub dyn_tag: ::core::option::Option<super::super::super::common::CreateTag>,
    ///
    #[prost(message, optional, tag = "11")]
    pub attach_card: ::core::option::Option<
        super::super::super::common::CreateAttachCard,
    >,
    ///
    #[prost(message, optional, tag = "12")]
    pub option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(message, optional, tag = "13")]
    pub topic: ::core::option::Option<super::super::super::common::CreateTopic>,
    ///
    #[prost(string, tag = "14")]
    pub upload_id: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "15")]
    pub extra_info: ::core::option::Option<super::super::super::common::CreateExtraInfo>,
}
impl ::prost::Name for CreateDynReq {
    const NAME: &'static str = "CreateDynReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreateDynReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreateDynReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInitCheckReq {
    ///
    #[prost(
        enumeration = "super::super::super::common::CreateInitCheckScene",
        tag = "1"
    )]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "2")]
    pub meta: ::core::option::Option<super::super::super::common::MetaDataCtrl>,
    ///
    #[prost(message, optional, tag = "3")]
    pub repost: ::core::option::Option<super::super::super::common::RepostInitCheck>,
}
impl ::prost::Name for CreateInitCheckReq {
    const NAME: &'static str = "CreateInitCheckReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreateInitCheckReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreateInitCheckReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOpusReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub meta: ::core::option::Option<super::super::super::common::UserCreateMeta>,
    ///
    #[prost(message, optional, tag = "2")]
    pub opus: ::core::option::Option<super::super::super::common::Opus>,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "3")]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "4")]
    pub option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(string, tag = "7")]
    pub upload_id: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub repost_src: ::core::option::Option<super::super::super::common::DynIdentity>,
}
impl ::prost::Name for CreateOpusReq {
    const NAME: &'static str = "CreateOpusReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreateOpusReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreateOpusReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePageCommercialInfo {
    ///
    #[prost(string, tag = "1")]
    pub label_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "3")]
    pub valid: bool,
    ///
    #[prost(int64, tag = "4")]
    pub commercial_entity_type: i64,
    ///
    #[prost(int64, tag = "5")]
    pub commercial_entity_id: i64,
    ///
    #[prost(bool, tag = "6")]
    pub editable: bool,
}
impl ::prost::Name for CreatePageCommercialInfo {
    const NAME: &'static str = "CreatePageCommercialInfo";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePageCommercialInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePageCommercialInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePageInfosReq {
    ///
    #[prost(int64, tag = "1")]
    pub topic_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub commercial_entity_type: i64,
    ///
    #[prost(int64, tag = "3")]
    pub commercial_entity_id: i64,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "4")]
    pub scene: i32,
    ///
    #[prost(message, repeated, tag = "5")]
    pub goods: ::prost::alloc::vec::Vec<super::super::super::common::GoodsContent>,
}
impl ::prost::Name for CreatePageInfosReq {
    const NAME: &'static str = "CreatePageInfosReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePageInfosReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePageInfosReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePageInfosRsp {
    ///
    #[prost(message, optional, tag = "1")]
    pub topic: ::core::option::Option<CreatePageTopicInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub commercial: ::core::option::Option<CreatePageCommercialInfo>,
    ///
    #[prost(message, repeated, tag = "3")]
    pub goods: ::prost::alloc::vec::Vec<GoodsItem>,
}
impl ::prost::Name for CreatePageInfosRsp {
    const NAME: &'static str = "CreatePageInfosRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePageInfosRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePageInfosRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePageTopicInfo {
    ///
    #[prost(int64, tag = "1")]
    pub topic_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub topic_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub hint: ::prost::alloc::string::String,
}
impl ::prost::Name for CreatePageTopicInfo {
    const NAME: &'static str = "CreatePageTopicInfo";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePageTopicInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePageTopicInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePermissionButtonClickReq {
    ///
    #[prost(enumeration = "super::super::super::common::UpPermissionType", tag = "1")]
    pub r#type: i32,
}
impl ::prost::Name for CreatePermissionButtonClickReq {
    const NAME: &'static str = "CreatePermissionButtonClickReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePermissionButtonClickReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePermissionButtonClickReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePermissionButtonClickRsp {}
impl ::prost::Name for CreatePermissionButtonClickRsp {
    const NAME: &'static str = "CreatePermissionButtonClickRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePermissionButtonClickRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePermissionButtonClickRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePlusButtonClickReq {}
impl ::prost::Name for CreatePlusButtonClickReq {
    const NAME: &'static str = "CreatePlusButtonClickReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePlusButtonClickReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePlusButtonClickReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePlusButtonClickRsp {}
impl ::prost::Name for CreatePlusButtonClickRsp {
    const NAME: &'static str = "CreatePlusButtonClickRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.CreatePlusButtonClickRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.CreatePlusButtonClickRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynMetricsActiveReportReq {
    ///
    #[prost(message, repeated, tag = "1")]
    pub report_metrics: ::prost::alloc::vec::Vec<ActiveReportMessage>,
}
impl ::prost::Name for DynMetricsActiveReportReq {
    const NAME: &'static str = "DynMetricsActiveReportReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynMetricsActiveReportReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynMetricsActiveReportReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DynMetricsActiveReportRsp {}
impl ::prost::Name for DynMetricsActiveReportRsp {
    const NAME: &'static str = "DynMetricsActiveReportRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynMetricsActiveReportRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynMetricsActiveReportRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynPrivatePubSettingReq {
    ///
    #[prost(string, tag = "1")]
    pub object_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub action: ::prost::alloc::string::String,
}
impl ::prost::Name for DynPrivatePubSettingReq {
    const NAME: &'static str = "DynPrivatePubSettingReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynPrivatePubSettingReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynPrivatePubSettingReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynPrivatePubSettingRsp {
    ///
    #[prost(string, tag = "1")]
    pub toast: ::prost::alloc::string::String,
}
impl ::prost::Name for DynPrivatePubSettingRsp {
    const NAME: &'static str = "DynPrivatePubSettingRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynPrivatePubSettingRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynPrivatePubSettingRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicButtonClickReq {
    ///
    #[prost(int32, repeated, tag = "1")]
    pub biz_type: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for DynamicButtonClickReq {
    const NAME: &'static str = "DynamicButtonClickReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynamicButtonClickReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynamicButtonClickReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DynamicButtonClickRsp {}
impl ::prost::Name for DynamicButtonClickRsp {
    const NAME: &'static str = "DynamicButtonClickRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynamicButtonClickRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynamicButtonClickRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicRepostReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub content: ::core::option::Option<super::super::super::common::CreateContent>,
    ///
    #[prost(message, optional, tag = "3")]
    pub repost_src: ::core::option::Option<super::super::super::common::DynIdentity>,
    ///
    #[prost(message, optional, tag = "4")]
    pub option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(message, optional, tag = "5")]
    pub topic: ::core::option::Option<super::super::super::common::CreateTopic>,
    ///
    #[prost(string, tag = "6")]
    pub upload_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DynamicRepostReq {
    const NAME: &'static str = "DynamicRepostReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynamicRepostReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynamicRepostReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicThumbReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub dyn_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub r#type: i64,
    ///
    #[prost(int64, tag = "4")]
    pub rid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub spec_type: i64,
    ///
    #[prost(int64, tag = "6")]
    pub up: i64,
    ///
    #[prost(string, tag = "7")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub dyn_id_str: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub from_spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub action_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DynamicThumbReq {
    const NAME: &'static str = "DynamicThumbReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynamicThumbReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynamicThumbReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DynamicThumbRsp {}
impl ::prost::Name for DynamicThumbRsp {
    const NAME: &'static str = "DynamicThumbRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.DynamicThumbRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.DynamicThumbRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditDynReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "2")]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub meta: ::core::option::Option<super::super::super::common::UserCreateMeta>,
    ///
    #[prost(message, optional, tag = "4")]
    pub content: ::core::option::Option<super::super::super::common::CreateContent>,
    ///
    #[prost(message, repeated, tag = "5")]
    pub pics: ::prost::alloc::vec::Vec<super::super::super::common::CreatePic>,
    ///
    #[prost(message, optional, tag = "6")]
    pub repost_src: ::core::option::Option<super::super::super::common::DynIdentity>,
    ///
    #[prost(message, optional, tag = "7")]
    pub dyn_tag: ::core::option::Option<super::super::super::common::CreateTag>,
    ///
    #[prost(message, optional, tag = "8")]
    pub attach_card: ::core::option::Option<
        super::super::super::common::CreateAttachCard,
    >,
    ///
    #[prost(message, optional, tag = "9")]
    pub option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(message, optional, tag = "10")]
    pub topic: ::core::option::Option<super::super::super::common::CreateTopic>,
    ///
    #[prost(string, tag = "11")]
    pub upload_id: ::prost::alloc::string::String,
}
impl ::prost::Name for EditDynReq {
    const NAME: &'static str = "EditDynReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.EditDynReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.EditDynReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditDynRsp {
    ///
    #[prost(int64, tag = "1")]
    pub state: i64,
    ///
    #[prost(string, tag = "2")]
    pub totast: ::prost::alloc::string::String,
}
impl ::prost::Name for EditDynRsp {
    const NAME: &'static str = "EditDynRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.EditDynRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.EditDynRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditOpusReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub meta: ::core::option::Option<super::super::super::common::UserCreateMeta>,
    ///
    #[prost(message, optional, tag = "3")]
    pub opus: ::core::option::Option<super::super::super::common::Opus>,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "4")]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "5")]
    pub option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(message, optional, tag = "6")]
    pub topic: ::core::option::Option<super::super::super::common::CreateTopic>,
    ///
    #[prost(string, tag = "8")]
    pub upload_id: ::prost::alloc::string::String,
}
impl ::prost::Name for EditOpusReq {
    const NAME: &'static str = "EditOpusReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.EditOpusReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.EditOpusReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EditOpusRsp {}
impl ::prost::Name for EditOpusRsp {
    const NAME: &'static str = "EditOpusRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.EditOpusRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.EditOpusRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEditDynInfoReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(
        enumeration = "super::super::super::common::CreateInitCheckScene",
        tag = "2"
    )]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub meta: ::core::option::Option<super::super::super::common::MetaDataCtrl>,
    ///
    #[prost(message, optional, tag = "4")]
    pub repost: ::core::option::Option<super::super::super::common::RepostInitCheck>,
}
impl ::prost::Name for GetEditDynInfoReq {
    const NAME: &'static str = "GetEditDynInfoReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEditDynInfoRsp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub pics: ::prost::alloc::vec::Vec<super::super::super::common::CreatePic>,
    ///
    #[prost(int64, tag = "2")]
    pub orig_dyn_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub pre_dyn_id: i64,
    ///
    #[prost(message, repeated, tag = "4")]
    pub topic_infos: ::prost::alloc::vec::Vec<CreatePageTopicInfo>,
    ///
    #[prost(message, optional, tag = "5")]
    pub attach_card: ::core::option::Option<
        super::super::super::common::CreateAttachCard,
    >,
    ///
    #[prost(message, optional, tag = "6")]
    pub setting: ::core::option::Option<super::super::super::common::PublishSetting>,
    ///
    #[prost(message, optional, tag = "7")]
    pub permission: ::core::option::Option<super::super::super::common::UpPermission>,
    ///
    #[prost(message, optional, tag = "8")]
    pub share_info: ::core::option::Option<super::super::super::common::ShareChannel>,
    ///
    #[prost(message, optional, tag = "9")]
    pub yellow_bar: ::core::option::Option<
        super::super::super::common::PublishYellowBar,
    >,
    ///
    #[prost(message, optional, tag = "10")]
    pub plus_red_dot: ::core::option::Option<super::super::super::common::PlusRedDot>,
    ///
    #[prost(int64, tag = "11")]
    pub only_fans: i64,
    ///
    #[prost(string, tag = "12")]
    pub edit_alert_msg: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "13")]
    pub remain_edit_times: i64,
    ///
    #[prost(message, optional, tag = "14")]
    pub commercial: ::core::option::Option<CreatePageCommercialInfo>,
    ///
    #[prost(message, optional, tag = "15")]
    pub tribee_setting: ::core::option::Option<TribeePublishConfig>,
    ///
    #[prost(message, optional, tag = "16")]
    pub opus: ::core::option::Option<super::super::super::common::Opus>,
    ///
    #[prost(int64, tag = "17")]
    pub dyn_type: i64,
    ///
    #[prost(int32, tag = "18")]
    pub pic_mode: i32,
}
impl ::prost::Name for GetEditDynInfoRsp {
    const NAME: &'static str = "GetEditDynInfoRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEditDynInfoWebReq {
    ///
    #[prost(string, tag = "1")]
    pub dyn_id: ::prost::alloc::string::String,
    ///
    #[prost(
        enumeration = "super::super::super::common::CreateInitCheckScene",
        tag = "2"
    )]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub meta: ::core::option::Option<super::super::super::common::MetaDataCtrl>,
}
impl ::prost::Name for GetEditDynInfoWebReq {
    const NAME: &'static str = "GetEditDynInfoWebReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoWebReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoWebReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEditDynInfoWebRsp {
    ///
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<
        super::super::super::common::PublishWebSettings,
    >,
    ///
    #[prost(message, optional, tag = "2")]
    pub permissions: ::core::option::Option<super::super::super::common::PermissionsWeb>,
    ///
    #[prost(message, optional, tag = "3")]
    pub attach_card: ::core::option::Option<
        super::super::super::common::CreateAttachCard,
    >,
    ///
    #[prost(message, optional, tag = "4")]
    pub commercial: ::core::option::Option<CreatePageCommercialInfo>,
    ///
    #[prost(int64, tag = "5")]
    pub only_fans: i64,
    ///
    #[prost(string, tag = "6")]
    pub edit_alert_msg: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub remain_edit_times: i64,
    ///
    #[prost(string, tag = "8")]
    pub orig_dyn_id_str: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub pre_dyn_id_str: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "10")]
    pub tribee_setting: ::core::option::Option<TribeePublishConfig>,
    ///
    #[prost(message, optional, tag = "11")]
    pub opus: ::core::option::Option<super::super::super::common::Opus>,
}
impl ::prost::Name for GetEditDynInfoWebRsp {
    const NAME: &'static str = "GetEditDynInfoWebRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoWebRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GetEditDynInfoWebRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoodsAttachCardPreviewReq {
    ///
    #[prost(int64, repeated, tag = "1")]
    pub item_ids: ::prost::alloc::vec::Vec<i64>,
    ///
    #[prost(int64, tag = "2")]
    pub dyn_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub mid: i64,
    ///
    #[prost(message, optional, tag = "4")]
    pub meta: ::core::option::Option<super::super::super::common::MetaDataCtrl>,
}
impl ::prost::Name for GoodsAttachCardPreviewReq {
    const NAME: &'static str = "GoodsAttachCardPreviewReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GoodsAttachCardPreviewReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GoodsAttachCardPreviewReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoodsAttachCardPreviewRsp {
    ///
    #[prost(map = "int64, message", tag = "1")]
    pub goods: ::std::collections::HashMap<i64, GoodsItem>,
}
impl ::prost::Name for GoodsAttachCardPreviewRsp {
    const NAME: &'static str = "GoodsAttachCardPreviewRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GoodsAttachCardPreviewRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GoodsAttachCardPreviewRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoodsItem {
    ///
    #[prost(int64, tag = "1")]
    pub items_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub brief: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub img: ::prost::alloc::string::String,
    ///
    #[prost(float, tag = "5")]
    pub price: f32,
    ///
    #[prost(string, tag = "6")]
    pub price_str: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub icon_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub jump_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub jump_link_desc: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "11")]
    pub act_id: i64,
    ///
    #[prost(int64, tag = "12")]
    pub act_mid: i64,
}
impl ::prost::Name for GoodsItem {
    const NAME: &'static str = "GoodsItem";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.GoodsItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.GoodsItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HomeBubbleReportReq {
    ///
    #[prost(string, tag = "1")]
    pub track_id: ::prost::alloc::string::String,
}
impl ::prost::Name for HomeBubbleReportReq {
    const NAME: &'static str = "HomeBubbleReportReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.HomeBubbleReportReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.HomeBubbleReportReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HomeBubbleReportRsp {}
impl ::prost::Name for HomeBubbleReportRsp {
    const NAME: &'static str = "HomeBubbleReportRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.HomeBubbleReportRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.HomeBubbleReportRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HotSearchReq {}
impl ::prost::Name for HotSearchReq {
    const NAME: &'static str = "HotSearchReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.HotSearchReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.HotSearchReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HotSearchRsp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<hot_search_rsp::Item>,
    ///
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
}
/// Nested message and enum types in `HotSearchRsp`.
pub mod hot_search_rsp {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        ///
        #[prost(string, tag = "1")]
        pub words: ::prost::alloc::string::String,
    }
    impl ::prost::Name for Item {
        const NAME: &'static str = "Item";
        const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "bilibili.dynamic.interfaces.feed.v1.HotSearchRsp.Item".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/bilibili.dynamic.interfaces.feed.v1.HotSearchRsp.Item".into()
        }
    }
}
impl ::prost::Name for HotSearchRsp {
    const NAME: &'static str = "HotSearchRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.HotSearchRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.HotSearchRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ICreateGoodsReplySyncReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub goods_id: i64,
    ///
    #[prost(message, optional, tag = "3")]
    pub content: ::core::option::Option<super::super::super::common::CreateContent>,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "4")]
    pub scene: i32,
    ///
    #[prost(message, repeated, tag = "5")]
    pub pics: ::prost::alloc::vec::Vec<super::super::super::common::CreatePic>,
}
impl ::prost::Name for ICreateGoodsReplySyncReq {
    const NAME: &'static str = "ICreateGoodsReplySyncReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ICreateGoodsReplySyncReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ICreateGoodsReplySyncReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ICreateResp {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub dyn_type: i64,
    ///
    #[prost(int64, tag = "3")]
    pub dyn_rid: i64,
}
impl ::prost::Name for ICreateResp {
    const NAME: &'static str = "ICreateResp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ICreateResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ICreateResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitCheckTribeeReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub check: ::core::option::Option<CreateInitCheckReq>,
    ///
    #[prost(int64, tag = "2")]
    pub tribee_id: i64,
}
impl ::prost::Name for InitCheckTribeeReq {
    const NAME: &'static str = "InitCheckTribeeReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.InitCheckTribeeReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.InitCheckTribeeReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LbsLocation {
    ///
    #[prost(double, tag = "1")]
    pub lat: f64,
    ///
    #[prost(double, tag = "2")]
    pub lng: f64,
}
impl ::prost::Name for LbsLocation {
    const NAME: &'static str = "LbsLocation";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.LbsLocation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.LbsLocation".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NearbyPoiDetail {
    ///
    #[prost(message, optional, tag = "1")]
    pub location: ::core::option::Option<LbsLocation>,
    ///
    #[prost(enumeration = "PoiType", tag = "2")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "3")]
    pub poi: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub address: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub show_title: ::prost::alloc::string::String,
    ///
    #[prost(double, tag = "7")]
    pub distance: f64,
    ///
    #[prost(string, tag = "8")]
    pub show_distance: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub ad_info: ::core::option::Option<AdInfoDetail>,
    ///
    #[prost(message, repeated, tag = "10")]
    pub ancestors: ::prost::alloc::vec::Vec<PoiId>,
}
impl ::prost::Name for NearbyPoiDetail {
    const NAME: &'static str = "NearbyPoiDetail";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.NearbyPoiDetail".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.NearbyPoiDetail".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NearbyPoiListItem {
    ///
    #[prost(message, optional, tag = "1")]
    pub poi_info: ::core::option::Option<NearbyPoiDetail>,
    ///
    #[prost(int32, tag = "2")]
    pub user_count: i32,
}
impl ::prost::Name for NearbyPoiListItem {
    const NAME: &'static str = "NearbyPoiListItem";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.NearbyPoiListItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.NearbyPoiListItem".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NearbyPoiListReq {
    ///
    #[prost(double, tag = "1")]
    pub lat: f64,
    ///
    #[prost(double, tag = "2")]
    pub lng: f64,
    ///
    #[prost(int32, tag = "3")]
    pub page: i32,
    ///
    #[prost(int32, tag = "4")]
    pub page_size: i32,
}
impl ::prost::Name for NearbyPoiListReq {
    const NAME: &'static str = "NearbyPoiListReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.NearbyPoiListReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.NearbyPoiListReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NearbyPoiListRsp {
    ///
    #[prost(bool, tag = "1")]
    pub has_more: bool,
    ///
    #[prost(message, repeated, tag = "2")]
    pub pois: ::prost::alloc::vec::Vec<NearbyPoiListItem>,
}
impl ::prost::Name for NearbyPoiListRsp {
    const NAME: &'static str = "NearbyPoiListRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.NearbyPoiListRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.NearbyPoiListRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoiDetail {
    ///
    #[prost(message, optional, tag = "1")]
    pub location: ::core::option::Option<LbsLocation>,
    ///
    #[prost(enumeration = "PoiType", tag = "2")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "3")]
    pub poi: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub address: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub show_title: ::prost::alloc::string::String,
    ///
    #[prost(double, tag = "7")]
    pub distance: f64,
    ///
    #[prost(string, tag = "8")]
    pub show_distance: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub ad_info: ::core::option::Option<AdInfoDetail>,
    ///
    #[prost(message, optional, tag = "10")]
    pub ancestors: ::core::option::Option<PoiId>,
}
impl ::prost::Name for PoiDetail {
    const NAME: &'static str = "PoiDetail";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.PoiDetail".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.PoiDetail".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoiId {
    ///
    #[prost(string, tag = "1")]
    pub poi: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub r#type: i32,
}
impl ::prost::Name for PoiId {
    const NAME: &'static str = "PoiId";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.PoiId".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.PoiId".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoiListItem {
    ///
    #[prost(message, optional, tag = "1")]
    pub poi_info: ::core::option::Option<PoiDetail>,
    ///
    #[prost(int32, tag = "2")]
    pub user_count: i32,
}
impl ::prost::Name for PoiListItem {
    const NAME: &'static str = "PoiListItem";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.PoiListItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.PoiListItem".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecommendPoiReq {
    ///
    #[prost(double, tag = "1")]
    pub lat: f64,
    ///
    #[prost(double, tag = "2")]
    pub lng: f64,
}
impl ::prost::Name for RecommendPoiReq {
    const NAME: &'static str = "RecommendPoiReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RecommendPoiReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RecommendPoiReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecommendPoiRsp {
    ///
    #[prost(message, optional, tag = "1")]
    pub poi: ::core::option::Option<NearbyPoiDetail>,
    ///
    #[prost(message, optional, tag = "2")]
    pub parent_poi: ::core::option::Option<NearbyPoiDetail>,
}
impl ::prost::Name for RecommendPoiRsp {
    const NAME: &'static str = "RecommendPoiRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RecommendPoiRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RecommendPoiRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveButtonClickReq {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub reserve_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub reserve_total: i64,
    ///
    #[prost(enumeration = "ReserveButtonStatus", tag = "4")]
    pub cur_btn_status: i32,
    ///
    #[prost(string, tag = "5")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "6")]
    pub dyn_id: i64,
    ///
    #[prost(int64, tag = "7")]
    pub dyn_type: i64,
}
impl ::prost::Name for ReserveButtonClickReq {
    const NAME: &'static str = "ReserveButtonClickReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ReserveButtonClickReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ReserveButtonClickReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveButtonClickResp {
    ///
    #[prost(enumeration = "ReserveButtonStatus", tag = "1")]
    pub final_btn_status: i32,
    ///
    #[prost(enumeration = "ReserveButtonMode", tag = "2")]
    pub btn_mode: i32,
    ///
    #[prost(int64, tag = "3")]
    pub reserve_update: i64,
    ///
    #[prost(string, tag = "4")]
    pub desc_update: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "5")]
    pub has_activity: bool,
    ///
    #[prost(string, tag = "6")]
    pub activity_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub toast: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub reserve_calendar_info: ::core::option::Option<ReserveCalendarInfo>,
}
impl ::prost::Name for ReserveButtonClickResp {
    const NAME: &'static str = "ReserveButtonClickResp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ReserveButtonClickResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ReserveButtonClickResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveCalendarInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub start_ts: i64,
    ///
    #[prost(int64, tag = "3")]
    pub end_ts: i64,
    ///
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub bussiness_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub url: ::prost::alloc::string::String,
}
impl ::prost::Name for ReserveCalendarInfo {
    const NAME: &'static str = "ReserveCalendarInfo";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.ReserveCalendarInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.ReserveCalendarInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RmDynReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub dyn_id_str: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub dyn_type: i64,
    ///
    #[prost(string, tag = "4")]
    pub rid_str: ::prost::alloc::string::String,
}
impl ::prost::Name for RmDynReq {
    const NAME: &'static str = "RmDynReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RmDynReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RmDynReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RmDynRsp {}
impl ::prost::Name for RmDynRsp {
    const NAME: &'static str = "RmDynRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RmDynRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RmDynRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RmSpaceTopReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub teenagers_mode: i32,
}
impl ::prost::Name for RmSpaceTopReq {
    const NAME: &'static str = "RmSpaceTopReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RmSpaceTopReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RmSpaceTopReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RmSpaceTopRsp {}
impl ::prost::Name for RmSpaceTopRsp {
    const NAME: &'static str = "RmSpaceTopRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.RmSpaceTopRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.RmSpaceTopRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPoiListReq {
    ///
    #[prost(double, tag = "1")]
    pub lat: f64,
    ///
    #[prost(double, tag = "2")]
    pub lng: f64,
    ///
    #[prost(int32, tag = "3")]
    pub page: i32,
    ///
    #[prost(int32, tag = "4")]
    pub page_size: i32,
    ///
    #[prost(string, tag = "5")]
    pub keyword: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchPoiListReq {
    const NAME: &'static str = "SearchPoiListReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SearchPoiListReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SearchPoiListReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPoiListRsp {
    ///
    #[prost(bool, tag = "1")]
    pub has_more: bool,
    ///
    #[prost(message, repeated, tag = "2")]
    pub pois: ::prost::alloc::vec::Vec<PoiListItem>,
}
impl ::prost::Name for SearchPoiListRsp {
    const NAME: &'static str = "SearchPoiListRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SearchPoiListRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SearchPoiListRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSpaceTopReq {
    ///
    #[prost(int64, tag = "1")]
    pub dyn_id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub teenagers_mode: i32,
}
impl ::prost::Name for SetSpaceTopReq {
    const NAME: &'static str = "SetSpaceTopReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SetSpaceTopReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SetSpaceTopReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSpaceTopRsp {}
impl ::prost::Name for SetSpaceTopRsp {
    const NAME: &'static str = "SetSpaceTopRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SetSpaceTopRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SetSpaceTopRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitCheckReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub content: ::core::option::Option<super::super::super::common::CreateContent>,
    ///
    #[prost(message, repeated, tag = "2")]
    pub pics: ::prost::alloc::vec::Vec<super::super::super::common::CreatePic>,
    ///
    #[prost(message, optional, tag = "3")]
    pub attach_card: ::core::option::Option<
        super::super::super::common::CreateAttachCard,
    >,
    ///
    #[prost(enumeration = "super::super::super::common::CreateScene", tag = "4")]
    pub scene: i32,
    ///
    #[prost(message, optional, tag = "5")]
    pub create_option: ::core::option::Option<super::super::super::common::CreateOption>,
    ///
    #[prost(message, optional, tag = "6")]
    pub opus: ::core::option::Option<super::super::super::common::Opus>,
    ///
    #[prost(string, tag = "7")]
    pub dyn_id_str: ::prost::alloc::string::String,
}
impl ::prost::Name for SubmitCheckReq {
    const NAME: &'static str = "SubmitCheckReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SubmitCheckReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SubmitCheckReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitCheckRsp {}
impl ::prost::Name for SubmitCheckRsp {
    const NAME: &'static str = "SubmitCheckRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SubmitCheckRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SubmitCheckRsp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuggestReq {
    ///
    #[prost(string, tag = "1")]
    pub s: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub r#type: i32,
}
impl ::prost::Name for SuggestReq {
    const NAME: &'static str = "SuggestReq";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SuggestReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SuggestReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuggestRsp {
    ///
    #[prost(string, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "2")]
    pub track_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub version: ::prost::alloc::string::String,
}
impl ::prost::Name for SuggestRsp {
    const NAME: &'static str = "SuggestRsp";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.SuggestRsp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.SuggestRsp".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TribeePublishConfig {
    ///
    #[prost(int64, tag = "1")]
    pub title_max_length: i64,
    ///
    #[prost(int64, tag = "2")]
    pub title_min_length: i64,
    ///
    #[prost(int64, tag = "3")]
    pub content_max_length: i64,
    ///
    #[prost(int64, tag = "4")]
    pub content_min_length: i64,
    ///
    #[prost(int64, tag = "5")]
    pub pic_max_num: i64,
}
impl ::prost::Name for TribeePublishConfig {
    const NAME: &'static str = "TribeePublishConfig";
    const PACKAGE: &'static str = "bilibili.dynamic.interfaces.feed.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.dynamic.interfaces.feed.v1.TribeePublishConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.dynamic.interfaces.feed.v1.TribeePublishConfig".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConfigAbEntry {
    ///
    None = 0,
    ///
    PubPageTitle = 1,
    ///
    SelectPicPanel = 2,
    ///
    ConfigAbBigPlusPubArticle = 3,
    ///
    ConfigAbLivePhoto = 4,
}
impl ConfigAbEntry {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CONFIG_AB_ENTRY_NONE",
            Self::PubPageTitle => "CONFIG_AB_ENTRY_PUB_PAGE_TITLE",
            Self::SelectPicPanel => "CONFIG_AB_ENTRY_SELECT_PIC_PANEL",
            Self::ConfigAbBigPlusPubArticle => "CONFIG_AB_BIG_PLUS_PUB_ARTICLE",
            Self::ConfigAbLivePhoto => "CONFIG_AB_LIVE_PHOTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONFIG_AB_ENTRY_NONE" => Some(Self::None),
            "CONFIG_AB_ENTRY_PUB_PAGE_TITLE" => Some(Self::PubPageTitle),
            "CONFIG_AB_ENTRY_SELECT_PIC_PANEL" => Some(Self::SelectPicPanel),
            "CONFIG_AB_BIG_PLUS_PUB_ARTICLE" => Some(Self::ConfigAbBigPlusPubArticle),
            "CONFIG_AB_LIVE_PHOTO" => Some(Self::ConfigAbLivePhoto),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DynamicButtonClickBizType {
    ///
    None = 0,
    ///
    Live = 1,
    ///
    DynUp = 2,
}
impl DynamicButtonClickBizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_NONE",
            Self::Live => "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_LIVE",
            Self::DynUp => "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_DYN_UP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_NONE" => Some(Self::None),
            "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_LIVE" => Some(Self::Live),
            "DYNAMIC_BUTTON_CLICK_BIZ_TYPE_DYN_UP" => Some(Self::DynUp),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MaxPicCountType {
    ///
    MaxPicCountNine = 0,
    ///
    MaxPicCountEighteen = 1,
}
impl MaxPicCountType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MaxPicCountNine => "MAX_PIC_COUNT_NINE",
            Self::MaxPicCountEighteen => "MAX_PIC_COUNT_EIGHTEEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAX_PIC_COUNT_NINE" => Some(Self::MaxPicCountNine),
            "MAX_PIC_COUNT_EIGHTEEN" => Some(Self::MaxPicCountEighteen),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PoiType {
    ///
    Tencent = 0,
    ///
    City = 1,
    ///
    Nation = 2,
    ///
    Bili = 3,
}
impl PoiType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Tencent => "TENCENT",
            Self::City => "CITY",
            Self::Nation => "NATION",
            Self::Bili => "BILI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TENCENT" => Some(Self::Tencent),
            "CITY" => Some(Self::City),
            "NATION" => Some(Self::Nation),
            "BILI" => Some(Self::Bili),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReserveButtonMode {
    ///
    None = 0,
    ///
    Reserve = 1,
    ///
    UpCancel = 2,
}
impl ReserveButtonMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "RESERVE_BUTTON_MODE_NONE",
            Self::Reserve => "RESERVE_BUTTON_MODE_RESERVE",
            Self::UpCancel => "RESERVE_BUTTON_MODE_UP_CANCEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESERVE_BUTTON_MODE_NONE" => Some(Self::None),
            "RESERVE_BUTTON_MODE_RESERVE" => Some(Self::Reserve),
            "RESERVE_BUTTON_MODE_UP_CANCEL" => Some(Self::UpCancel),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReserveButtonStatus {
    ///
    None = 0,
    ///
    Uncheck = 1,
    ///
    Check = 2,
}
impl ReserveButtonStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "RESERVE_BUTTON_STATUS_NONE",
            Self::Uncheck => "RESERVE_BUTTON_STATUS_UNCHECK",
            Self::Check => "RESERVE_BUTTON_STATUS_CHECK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RESERVE_BUTTON_STATUS_NONE" => Some(Self::None),
            "RESERVE_BUTTON_STATUS_UNCHECK" => Some(Self::Uncheck),
            "RESERVE_BUTTON_STATUS_CHECK" => Some(Self::Check),
            _ => None,
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "feat-enable-generated-client")]
pub mod feed_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    #[derive(Debug, Clone)]
    pub struct FeedClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> FeedClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FeedClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FeedClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        pub async fn add_dynamic_report(
            &mut self,
            request: impl tonic::IntoRequest<super::AddDynamicReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::AddDynamicReportRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AddDynamicReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "AddDynamicReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn article_home_page_categories(
            &mut self,
            request: impl tonic::IntoRequest<super::ArticleHomePageCategoriesReq>,
        ) -> std::result::Result<
            tonic::Response<super::ArticleHomePageCategoriesRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ArticleHomePageCategories",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "ArticleHomePageCategories",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn at_list(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::common::AtListReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::AtListRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AtList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.dynamic.interfaces.feed.v1.Feed", "AtList"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn at_search(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::common::AtSearchReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::AtListRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AtSearch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "AtSearch",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn attach_card_button(
            &mut self,
            request: impl tonic::IntoRequest<super::AttachCardButtonReq>,
        ) -> std::result::Result<
            tonic::Response<super::AttachCardButtonRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AttachCardButton",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "AttachCardButton",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn config(
            &mut self,
            request: impl tonic::IntoRequest<super::ConfigReq>,
        ) -> std::result::Result<tonic::Response<super::ConfigRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/Config",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.dynamic.interfaces.feed.v1.Feed", "Config"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_dyn(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDynReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateDyn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreateDyn",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_init_check(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInitCheckReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateCheckResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateInitCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreateInitCheck",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_opus(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateOpusReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateOpus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreateOpus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_page_infos(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePageInfosReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePageInfosRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePageInfos",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreatePageInfos",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_permission_button_click(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePermissionButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePermissionButtonClickRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePermissionButtonClick",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreatePermissionButtonClick",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn create_plus_button_click(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePlusButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePlusButtonClickRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePlusButtonClick",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "CreatePlusButtonClick",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn dyn_metrics_active_report(
            &mut self,
            request: impl tonic::IntoRequest<super::DynMetricsActiveReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynMetricsActiveReportRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynMetricsActiveReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "DynMetricsActiveReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn dyn_private_pub_setting(
            &mut self,
            request: impl tonic::IntoRequest<super::DynPrivatePubSettingReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynPrivatePubSettingRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynPrivatePubSetting",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "DynPrivatePubSetting",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn dynamic_button_click(
            &mut self,
            request: impl tonic::IntoRequest<super::DynamicButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynamicButtonClickRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicButtonClick",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "DynamicButtonClick",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn dynamic_repost(
            &mut self,
            request: impl tonic::IntoRequest<super::DynamicRepostReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicRepost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "DynamicRepost",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn dynamic_thumb(
            &mut self,
            request: impl tonic::IntoRequest<super::DynamicThumbReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynamicThumbRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicThumb",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "DynamicThumb",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn edit_dyn(
            &mut self,
            request: impl tonic::IntoRequest<super::EditDynReq>,
        ) -> std::result::Result<tonic::Response<super::EditDynRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/EditDyn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "EditDyn",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn edit_opus(
            &mut self,
            request: impl tonic::IntoRequest<super::EditOpusReq>,
        ) -> std::result::Result<tonic::Response<super::EditOpusRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/EditOpus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "EditOpus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn get_edit_dyn_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEditDynInfoReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetEditDynInfoRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetEditDynInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "GetEditDynInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn get_edit_dyn_info_web(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEditDynInfoWebReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetEditDynInfoWebRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetEditDynInfoWeb",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "GetEditDynInfoWeb",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn get_uid_by_name(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::super::common::GetUidByNameReq,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::GetUidByNameRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetUidByName",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "GetUidByName",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn goods_attach_card_preview(
            &mut self,
            request: impl tonic::IntoRequest<super::GoodsAttachCardPreviewReq>,
        ) -> std::result::Result<
            tonic::Response<super::GoodsAttachCardPreviewRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GoodsAttachCardPreview",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "GoodsAttachCardPreview",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn home_bubble_report(
            &mut self,
            request: impl tonic::IntoRequest<super::HomeBubbleReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::HomeBubbleReportRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/HomeBubbleReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "HomeBubbleReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn hot_search(
            &mut self,
            request: impl tonic::IntoRequest<super::HotSearchReq>,
        ) -> std::result::Result<tonic::Response<super::HotSearchRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/HotSearch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "HotSearch",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn i_create_goods_reply_sync(
            &mut self,
            request: impl tonic::IntoRequest<super::ICreateGoodsReplySyncReq>,
        ) -> std::result::Result<tonic::Response<super::ICreateResp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ICreateGoodsReplySync",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "ICreateGoodsReplySync",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn init_check_tribee(
            &mut self,
            request: impl tonic::IntoRequest<super::InitCheckTribeeReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCheckTribeeResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/InitCheckTribee",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "InitCheckTribee",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn nearby_poi_list(
            &mut self,
            request: impl tonic::IntoRequest<super::NearbyPoiListReq>,
        ) -> std::result::Result<
            tonic::Response<super::NearbyPoiListRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/NearbyPoiList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "NearbyPoiList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn recommend_poi(
            &mut self,
            request: impl tonic::IntoRequest<super::RecommendPoiReq>,
        ) -> std::result::Result<
            tonic::Response<super::RecommendPoiRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RecommendPoi",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "RecommendPoi",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn reserve_button_click(
            &mut self,
            request: impl tonic::IntoRequest<super::ReserveButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveButtonClickResp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ReserveButtonClick",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "ReserveButtonClick",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn rm_dyn(
            &mut self,
            request: impl tonic::IntoRequest<super::RmDynReq>,
        ) -> std::result::Result<tonic::Response<super::RmDynRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RmDyn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.dynamic.interfaces.feed.v1.Feed", "RmDyn"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn rm_space_top(
            &mut self,
            request: impl tonic::IntoRequest<super::RmSpaceTopReq>,
        ) -> std::result::Result<tonic::Response<super::RmSpaceTopRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RmSpaceTop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "RmSpaceTop",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_poi_list(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchPoiListReq>,
        ) -> std::result::Result<
            tonic::Response<super::SearchPoiListRsp>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SearchPoiList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "SearchPoiList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn set_space_top(
            &mut self,
            request: impl tonic::IntoRequest<super::SetSpaceTopReq>,
        ) -> std::result::Result<tonic::Response<super::SetSpaceTopRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SetSpaceTop",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "SetSpaceTop",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn submit_check(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitCheckReq>,
        ) -> std::result::Result<tonic::Response<super::SubmitCheckRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SubmitCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "SubmitCheck",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn suggest(
            &mut self,
            request: impl tonic::IntoRequest<super::SuggestReq>,
        ) -> std::result::Result<tonic::Response<super::SuggestRsp>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.dynamic.interfaces.feed.v1.Feed/Suggest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.dynamic.interfaces.feed.v1.Feed",
                        "Suggest",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "feat-enable-generated-server")]
pub mod feed_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FeedServer.
    #[async_trait]
    pub trait Feed: std::marker::Send + std::marker::Sync + 'static {
        ///
        async fn add_dynamic_report(
            &self,
            request: tonic::Request<super::AddDynamicReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::AddDynamicReportRsp>,
            tonic::Status,
        >;
        ///
        async fn article_home_page_categories(
            &self,
            request: tonic::Request<super::ArticleHomePageCategoriesReq>,
        ) -> std::result::Result<
            tonic::Response<super::ArticleHomePageCategoriesRsp>,
            tonic::Status,
        >;
        ///
        async fn at_list(
            &self,
            request: tonic::Request<super::super::super::super::common::AtListReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::AtListRsp>,
            tonic::Status,
        >;
        ///
        async fn at_search(
            &self,
            request: tonic::Request<super::super::super::super::common::AtSearchReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::AtListRsp>,
            tonic::Status,
        >;
        ///
        async fn attach_card_button(
            &self,
            request: tonic::Request<super::AttachCardButtonReq>,
        ) -> std::result::Result<
            tonic::Response<super::AttachCardButtonRsp>,
            tonic::Status,
        >;
        ///
        async fn config(
            &self,
            request: tonic::Request<super::ConfigReq>,
        ) -> std::result::Result<tonic::Response<super::ConfigRsp>, tonic::Status>;
        ///
        async fn create_dyn(
            &self,
            request: tonic::Request<super::CreateDynReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        >;
        ///
        async fn create_init_check(
            &self,
            request: tonic::Request<super::CreateInitCheckReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateCheckResp>,
            tonic::Status,
        >;
        ///
        async fn create_opus(
            &self,
            request: tonic::Request<super::CreateOpusReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        >;
        ///
        async fn create_page_infos(
            &self,
            request: tonic::Request<super::CreatePageInfosReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePageInfosRsp>,
            tonic::Status,
        >;
        ///
        async fn create_permission_button_click(
            &self,
            request: tonic::Request<super::CreatePermissionButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePermissionButtonClickRsp>,
            tonic::Status,
        >;
        ///
        async fn create_plus_button_click(
            &self,
            request: tonic::Request<super::CreatePlusButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePlusButtonClickRsp>,
            tonic::Status,
        >;
        ///
        async fn dyn_metrics_active_report(
            &self,
            request: tonic::Request<super::DynMetricsActiveReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynMetricsActiveReportRsp>,
            tonic::Status,
        >;
        ///
        async fn dyn_private_pub_setting(
            &self,
            request: tonic::Request<super::DynPrivatePubSettingReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynPrivatePubSettingRsp>,
            tonic::Status,
        >;
        ///
        async fn dynamic_button_click(
            &self,
            request: tonic::Request<super::DynamicButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::DynamicButtonClickRsp>,
            tonic::Status,
        >;
        ///
        async fn dynamic_repost(
            &self,
            request: tonic::Request<super::DynamicRepostReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::CreateResp>,
            tonic::Status,
        >;
        ///
        async fn dynamic_thumb(
            &self,
            request: tonic::Request<super::DynamicThumbReq>,
        ) -> std::result::Result<tonic::Response<super::DynamicThumbRsp>, tonic::Status>;
        ///
        async fn edit_dyn(
            &self,
            request: tonic::Request<super::EditDynReq>,
        ) -> std::result::Result<tonic::Response<super::EditDynRsp>, tonic::Status>;
        ///
        async fn edit_opus(
            &self,
            request: tonic::Request<super::EditOpusReq>,
        ) -> std::result::Result<tonic::Response<super::EditOpusRsp>, tonic::Status>;
        ///
        async fn get_edit_dyn_info(
            &self,
            request: tonic::Request<super::GetEditDynInfoReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetEditDynInfoRsp>,
            tonic::Status,
        >;
        ///
        async fn get_edit_dyn_info_web(
            &self,
            request: tonic::Request<super::GetEditDynInfoWebReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetEditDynInfoWebRsp>,
            tonic::Status,
        >;
        ///
        async fn get_uid_by_name(
            &self,
            request: tonic::Request<super::super::super::super::common::GetUidByNameReq>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::common::GetUidByNameRsp>,
            tonic::Status,
        >;
        ///
        async fn goods_attach_card_preview(
            &self,
            request: tonic::Request<super::GoodsAttachCardPreviewReq>,
        ) -> std::result::Result<
            tonic::Response<super::GoodsAttachCardPreviewRsp>,
            tonic::Status,
        >;
        ///
        async fn home_bubble_report(
            &self,
            request: tonic::Request<super::HomeBubbleReportReq>,
        ) -> std::result::Result<
            tonic::Response<super::HomeBubbleReportRsp>,
            tonic::Status,
        >;
        ///
        async fn hot_search(
            &self,
            request: tonic::Request<super::HotSearchReq>,
        ) -> std::result::Result<tonic::Response<super::HotSearchRsp>, tonic::Status>;
        ///
        async fn i_create_goods_reply_sync(
            &self,
            request: tonic::Request<super::ICreateGoodsReplySyncReq>,
        ) -> std::result::Result<tonic::Response<super::ICreateResp>, tonic::Status>;
        ///
        async fn init_check_tribee(
            &self,
            request: tonic::Request<super::InitCheckTribeeReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateCheckTribeeResp>,
            tonic::Status,
        >;
        ///
        async fn nearby_poi_list(
            &self,
            request: tonic::Request<super::NearbyPoiListReq>,
        ) -> std::result::Result<
            tonic::Response<super::NearbyPoiListRsp>,
            tonic::Status,
        >;
        ///
        async fn recommend_poi(
            &self,
            request: tonic::Request<super::RecommendPoiReq>,
        ) -> std::result::Result<tonic::Response<super::RecommendPoiRsp>, tonic::Status>;
        ///
        async fn reserve_button_click(
            &self,
            request: tonic::Request<super::ReserveButtonClickReq>,
        ) -> std::result::Result<
            tonic::Response<super::ReserveButtonClickResp>,
            tonic::Status,
        >;
        ///
        async fn rm_dyn(
            &self,
            request: tonic::Request<super::RmDynReq>,
        ) -> std::result::Result<tonic::Response<super::RmDynRsp>, tonic::Status>;
        ///
        async fn rm_space_top(
            &self,
            request: tonic::Request<super::RmSpaceTopReq>,
        ) -> std::result::Result<tonic::Response<super::RmSpaceTopRsp>, tonic::Status>;
        ///
        async fn search_poi_list(
            &self,
            request: tonic::Request<super::SearchPoiListReq>,
        ) -> std::result::Result<
            tonic::Response<super::SearchPoiListRsp>,
            tonic::Status,
        >;
        ///
        async fn set_space_top(
            &self,
            request: tonic::Request<super::SetSpaceTopReq>,
        ) -> std::result::Result<tonic::Response<super::SetSpaceTopRsp>, tonic::Status>;
        ///
        async fn submit_check(
            &self,
            request: tonic::Request<super::SubmitCheckReq>,
        ) -> std::result::Result<tonic::Response<super::SubmitCheckRsp>, tonic::Status>;
        ///
        async fn suggest(
            &self,
            request: tonic::Request<super::SuggestReq>,
        ) -> std::result::Result<tonic::Response<super::SuggestRsp>, tonic::Status>;
    }
    ///
    #[derive(Debug)]
    pub struct FeedServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FeedServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FeedServer<T>
    where
        T: Feed,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AddDynamicReport" => {
                    #[allow(non_camel_case_types)]
                    struct AddDynamicReportSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::AddDynamicReportReq>
                    for AddDynamicReportSvc<T> {
                        type Response = super::AddDynamicReportRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddDynamicReportReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::add_dynamic_report(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddDynamicReportSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ArticleHomePageCategories" => {
                    #[allow(non_camel_case_types)]
                    struct ArticleHomePageCategoriesSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::ArticleHomePageCategoriesReq>
                    for ArticleHomePageCategoriesSvc<T> {
                        type Response = super::ArticleHomePageCategoriesRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ArticleHomePageCategoriesReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::article_home_page_categories(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ArticleHomePageCategoriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AtList" => {
                    #[allow(non_camel_case_types)]
                    struct AtListSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<
                        super::super::super::super::common::AtListReq,
                    > for AtListSvc<T> {
                        type Response = super::super::super::super::common::AtListRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::super::common::AtListReq,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::at_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AtListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AtSearch" => {
                    #[allow(non_camel_case_types)]
                    struct AtSearchSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<
                        super::super::super::super::common::AtSearchReq,
                    > for AtSearchSvc<T> {
                        type Response = super::super::super::super::common::AtListRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::super::common::AtSearchReq,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::at_search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AtSearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/AttachCardButton" => {
                    #[allow(non_camel_case_types)]
                    struct AttachCardButtonSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::AttachCardButtonReq>
                    for AttachCardButtonSvc<T> {
                        type Response = super::AttachCardButtonRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AttachCardButtonReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::attach_card_button(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AttachCardButtonSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/Config" => {
                    #[allow(non_camel_case_types)]
                    struct ConfigSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::ConfigReq>
                    for ConfigSvc<T> {
                        type Response = super::ConfigRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ConfigReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::config(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ConfigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateDyn" => {
                    #[allow(non_camel_case_types)]
                    struct CreateDynSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::CreateDynReq>
                    for CreateDynSvc<T> {
                        type Response = super::super::super::super::common::CreateResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateDynReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_dyn(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateDynSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateInitCheck" => {
                    #[allow(non_camel_case_types)]
                    struct CreateInitCheckSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::CreateInitCheckReq>
                    for CreateInitCheckSvc<T> {
                        type Response = super::super::super::super::common::CreateCheckResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateInitCheckReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_init_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateInitCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreateOpus" => {
                    #[allow(non_camel_case_types)]
                    struct CreateOpusSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::CreateOpusReq>
                    for CreateOpusSvc<T> {
                        type Response = super::super::super::super::common::CreateResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateOpusReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_opus(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateOpusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePageInfos" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePageInfosSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::CreatePageInfosReq>
                    for CreatePageInfosSvc<T> {
                        type Response = super::CreatePageInfosRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePageInfosReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_page_infos(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePageInfosSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePermissionButtonClick" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePermissionButtonClickSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::CreatePermissionButtonClickReq>
                    for CreatePermissionButtonClickSvc<T> {
                        type Response = super::CreatePermissionButtonClickRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreatePermissionButtonClickReq,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_permission_button_click(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePermissionButtonClickSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/CreatePlusButtonClick" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePlusButtonClickSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::CreatePlusButtonClickReq>
                    for CreatePlusButtonClickSvc<T> {
                        type Response = super::CreatePlusButtonClickRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreatePlusButtonClickReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::create_plus_button_click(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePlusButtonClickSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynMetricsActiveReport" => {
                    #[allow(non_camel_case_types)]
                    struct DynMetricsActiveReportSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::DynMetricsActiveReportReq>
                    for DynMetricsActiveReportSvc<T> {
                        type Response = super::DynMetricsActiveReportRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DynMetricsActiveReportReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::dyn_metrics_active_report(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DynMetricsActiveReportSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynPrivatePubSetting" => {
                    #[allow(non_camel_case_types)]
                    struct DynPrivatePubSettingSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::DynPrivatePubSettingReq>
                    for DynPrivatePubSettingSvc<T> {
                        type Response = super::DynPrivatePubSettingRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DynPrivatePubSettingReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::dyn_private_pub_setting(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DynPrivatePubSettingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicButtonClick" => {
                    #[allow(non_camel_case_types)]
                    struct DynamicButtonClickSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::DynamicButtonClickReq>
                    for DynamicButtonClickSvc<T> {
                        type Response = super::DynamicButtonClickRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DynamicButtonClickReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::dynamic_button_click(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DynamicButtonClickSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicRepost" => {
                    #[allow(non_camel_case_types)]
                    struct DynamicRepostSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::DynamicRepostReq>
                    for DynamicRepostSvc<T> {
                        type Response = super::super::super::super::common::CreateResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DynamicRepostReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::dynamic_repost(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DynamicRepostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/DynamicThumb" => {
                    #[allow(non_camel_case_types)]
                    struct DynamicThumbSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::DynamicThumbReq>
                    for DynamicThumbSvc<T> {
                        type Response = super::DynamicThumbRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DynamicThumbReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::dynamic_thumb(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DynamicThumbSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/EditDyn" => {
                    #[allow(non_camel_case_types)]
                    struct EditDynSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::EditDynReq>
                    for EditDynSvc<T> {
                        type Response = super::EditDynRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EditDynReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::edit_dyn(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EditDynSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/EditOpus" => {
                    #[allow(non_camel_case_types)]
                    struct EditOpusSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::EditOpusReq>
                    for EditOpusSvc<T> {
                        type Response = super::EditOpusRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EditOpusReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::edit_opus(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EditOpusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetEditDynInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetEditDynInfoSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::GetEditDynInfoReq>
                    for GetEditDynInfoSvc<T> {
                        type Response = super::GetEditDynInfoRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEditDynInfoReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::get_edit_dyn_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEditDynInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetEditDynInfoWeb" => {
                    #[allow(non_camel_case_types)]
                    struct GetEditDynInfoWebSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::GetEditDynInfoWebReq>
                    for GetEditDynInfoWebSvc<T> {
                        type Response = super::GetEditDynInfoWebRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEditDynInfoWebReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::get_edit_dyn_info_web(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetEditDynInfoWebSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GetUidByName" => {
                    #[allow(non_camel_case_types)]
                    struct GetUidByNameSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<
                        super::super::super::super::common::GetUidByNameReq,
                    > for GetUidByNameSvc<T> {
                        type Response = super::super::super::super::common::GetUidByNameRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::super::common::GetUidByNameReq,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::get_uid_by_name(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUidByNameSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/GoodsAttachCardPreview" => {
                    #[allow(non_camel_case_types)]
                    struct GoodsAttachCardPreviewSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::GoodsAttachCardPreviewReq>
                    for GoodsAttachCardPreviewSvc<T> {
                        type Response = super::GoodsAttachCardPreviewRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GoodsAttachCardPreviewReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::goods_attach_card_preview(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GoodsAttachCardPreviewSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/HomeBubbleReport" => {
                    #[allow(non_camel_case_types)]
                    struct HomeBubbleReportSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::HomeBubbleReportReq>
                    for HomeBubbleReportSvc<T> {
                        type Response = super::HomeBubbleReportRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HomeBubbleReportReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::home_bubble_report(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HomeBubbleReportSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/HotSearch" => {
                    #[allow(non_camel_case_types)]
                    struct HotSearchSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::HotSearchReq>
                    for HotSearchSvc<T> {
                        type Response = super::HotSearchRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HotSearchReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::hot_search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HotSearchSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ICreateGoodsReplySync" => {
                    #[allow(non_camel_case_types)]
                    struct ICreateGoodsReplySyncSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::ICreateGoodsReplySyncReq>
                    for ICreateGoodsReplySyncSvc<T> {
                        type Response = super::ICreateResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ICreateGoodsReplySyncReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::i_create_goods_reply_sync(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ICreateGoodsReplySyncSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/InitCheckTribee" => {
                    #[allow(non_camel_case_types)]
                    struct InitCheckTribeeSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::InitCheckTribeeReq>
                    for InitCheckTribeeSvc<T> {
                        type Response = super::CreateCheckTribeeResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitCheckTribeeReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::init_check_tribee(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = InitCheckTribeeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/NearbyPoiList" => {
                    #[allow(non_camel_case_types)]
                    struct NearbyPoiListSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::NearbyPoiListReq>
                    for NearbyPoiListSvc<T> {
                        type Response = super::NearbyPoiListRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NearbyPoiListReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::nearby_poi_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NearbyPoiListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RecommendPoi" => {
                    #[allow(non_camel_case_types)]
                    struct RecommendPoiSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::RecommendPoiReq>
                    for RecommendPoiSvc<T> {
                        type Response = super::RecommendPoiRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RecommendPoiReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::recommend_poi(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RecommendPoiSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/ReserveButtonClick" => {
                    #[allow(non_camel_case_types)]
                    struct ReserveButtonClickSvc<T: Feed>(pub Arc<T>);
                    impl<
                        T: Feed,
                    > tonic::server::UnaryService<super::ReserveButtonClickReq>
                    for ReserveButtonClickSvc<T> {
                        type Response = super::ReserveButtonClickResp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReserveButtonClickReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::reserve_button_click(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReserveButtonClickSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RmDyn" => {
                    #[allow(non_camel_case_types)]
                    struct RmDynSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::RmDynReq>
                    for RmDynSvc<T> {
                        type Response = super::RmDynRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RmDynReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::rm_dyn(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RmDynSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/RmSpaceTop" => {
                    #[allow(non_camel_case_types)]
                    struct RmSpaceTopSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::RmSpaceTopReq>
                    for RmSpaceTopSvc<T> {
                        type Response = super::RmSpaceTopRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RmSpaceTopReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::rm_space_top(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RmSpaceTopSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SearchPoiList" => {
                    #[allow(non_camel_case_types)]
                    struct SearchPoiListSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::SearchPoiListReq>
                    for SearchPoiListSvc<T> {
                        type Response = super::SearchPoiListRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchPoiListReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::search_poi_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchPoiListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SetSpaceTop" => {
                    #[allow(non_camel_case_types)]
                    struct SetSpaceTopSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::SetSpaceTopReq>
                    for SetSpaceTopSvc<T> {
                        type Response = super::SetSpaceTopRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetSpaceTopReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::set_space_top(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetSpaceTopSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/SubmitCheck" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitCheckSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::SubmitCheckReq>
                    for SubmitCheckSvc<T> {
                        type Response = super::SubmitCheckRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitCheckReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::submit_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.dynamic.interfaces.feed.v1.Feed/Suggest" => {
                    #[allow(non_camel_case_types)]
                    struct SuggestSvc<T: Feed>(pub Arc<T>);
                    impl<T: Feed> tonic::server::UnaryService<super::SuggestReq>
                    for SuggestSvc<T> {
                        type Response = super::SuggestRsp;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SuggestReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Feed>::suggest(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SuggestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for FeedServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "bilibili.dynamic.interfaces.feed.v1.Feed";
    impl<T> tonic::server::NamedService for FeedServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
