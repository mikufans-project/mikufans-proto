// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColdStartBizReq {
    ///
    #[prost(string, tag = "1")]
    pub biz_key: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub biz_param: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for ColdStartBizReq {
    const NAME: &'static str = "ColdStartBizReq";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.ColdStartBizReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.ColdStartBizReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColdStartBizResp {
    ///
    #[prost(string, tag = "1")]
    pub biz_key: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub biz_resp: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(oneof = "cold_start_biz_resp::Status", tags = "3, 4")]
    pub status: ::core::option::Option<cold_start_biz_resp::Status>,
}
/// Nested message and enum types in `ColdStartBizResp`.
pub mod cold_start_biz_resp {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Status {
        ///
        #[prost(message, tag = "3")]
        GrpcStatus(super::GrpcStatus),
        ///
        #[prost(message, tag = "4")]
        HttpStatus(super::HttpStatus),
    }
}
impl ::prost::Name for ColdStartBizResp {
    const NAME: &'static str = "ColdStartBizResp";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.ColdStartBizResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.ColdStartBizResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetColdStartDataReq {
    ///
    #[prost(message, repeated, tag = "1")]
    pub req_list: ::prost::alloc::vec::Vec<ColdStartBizReq>,
}
impl ::prost::Name for GetColdStartDataReq {
    const NAME: &'static str = "GetColdStartDataReq";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.GetColdStartDataReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.GetColdStartDataReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetColdStartDataResp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub resp_list: ::prost::alloc::vec::Vec<ColdStartBizResp>,
}
impl ::prost::Name for GetColdStartDataResp {
    const NAME: &'static str = "GetColdStartDataResp";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.GetColdStartDataResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.GetColdStartDataResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GrpcStatus {
    ///
    #[prost(int32, tag = "1")]
    pub code: i32,
    ///
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
impl ::prost::Name for GrpcStatus {
    const NAME: &'static str = "GrpcStatus";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.GrpcStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.GrpcStatus".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpGetBizReq {
    ///
    #[prost(map = "string, string", tag = "1")]
    pub headers: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(map = "string, string", tag = "2")]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for HttpGetBizReq {
    const NAME: &'static str = "HttpGetBizReq";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.HttpGetBizReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.HttpGetBizReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpJsonBizResp {
    ///
    #[prost(string, tag = "1")]
    pub data: ::prost::alloc::string::String,
}
impl ::prost::Name for HttpJsonBizResp {
    const NAME: &'static str = "HttpJsonBizResp";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.HttpJsonBizResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.HttpJsonBizResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpStatus {
    ///
    #[prost(int32, tag = "1")]
    pub code: i32,
    ///
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
impl ::prost::Name for HttpStatus {
    const NAME: &'static str = "HttpStatus";
    const PACKAGE: &'static str = "bilibili.app.coldstart.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.coldstart.v1.HttpStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.coldstart.v1.HttpStatus".into()
    }
}
