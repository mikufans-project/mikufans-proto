// This file is @generated by prost-build.
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubjectInteractionResp {
    ///
    #[prost(int64, tag = "1")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub r#type: i64,
    ///
    #[prost(enumeration = "subject_interaction_resp::Interaction", tag = "3")]
    pub interaction_type: i32,
    ///
    #[prost(int64, tag = "4")]
    pub rpid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub like_count: i64,
    ///
    #[prost(int64, tag = "6")]
    pub frequency: i64,
}
/// Nested message and enum types in `SubjectInteractionResp`.
pub mod subject_interaction_resp {
    ///
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Interaction {
        ///
        Unknown = 0,
        ///
        ReplyLike = 1,
    }
    impl Interaction {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "Unknown",
                Self::ReplyLike => "ReplyLike",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "Unknown" => Some(Self::Unknown),
                "ReplyLike" => Some(Self::ReplyLike),
                _ => None,
            }
        }
    }
}
impl ::prost::Name for SubjectInteractionResp {
    const NAME: &'static str = "SubjectInteractionResp";
    const PACKAGE: &'static str = "bilibili.broadcast.message.reply";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.message.reply.SubjectInteractionResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.message.reply.SubjectInteractionResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubjectNoticeResp {
    ///
    #[prost(int64, tag = "1")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub r#type: i64,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    ///
    #[prost(int64, tag = "6")]
    pub rpid: i64,
    ///
    #[prost(string, tag = "7")]
    pub interaction_type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "8")]
    pub hover_duration: i64,
    ///
    #[prost(int64, tag = "9")]
    pub root_rpid: i64,
    ///
    #[prost(string, tag = "10")]
    pub interaction_scene: ::prost::alloc::string::String,
}
impl ::prost::Name for SubjectNoticeResp {
    const NAME: &'static str = "SubjectNoticeResp";
    const PACKAGE: &'static str = "bilibili.broadcast.message.reply";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.message.reply.SubjectNoticeResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.message.reply.SubjectNoticeResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubjectReplyInsertionResp {
    ///
    #[prost(int64, tag = "1")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub r#type: i64,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub rpid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    ///
    #[prost(int64, tag = "6")]
    pub rank: i64,
    ///
    #[prost(int64, tag = "7")]
    pub step_size: i64,
    ///
    #[prost(int64, repeated, tag = "8")]
    pub support_mode: ::prost::alloc::vec::Vec<i64>,
    ///
    #[prost(string, repeated, tag = "9")]
    pub support_tag: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(int64, repeated, tag = "10")]
    pub support_tag_ids: ::prost::alloc::vec::Vec<i64>,
}
impl ::prost::Name for SubjectReplyInsertionResp {
    const NAME: &'static str = "SubjectReplyInsertionResp";
    const PACKAGE: &'static str = "bilibili.broadcast.message.reply";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.message.reply.SubjectReplyInsertionResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.message.reply.SubjectReplyInsertionResp".into()
    }
}
