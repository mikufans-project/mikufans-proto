// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BroadcastMessage {
    ///
    #[prost(string, tag = "1")]
    pub target_path: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub biz_body: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(message, optional, tag = "3")]
    pub common: ::core::option::Option<Common>,
}
impl ::prost::Name for BroadcastMessage {
    const NAME: &'static str = "BroadcastMessage";
    const PACKAGE: &'static str = "bilibili.broadcast.live";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.BroadcastMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.BroadcastMessage".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Common {
    ///
    #[prost(int64, tag = "1")]
    pub message_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
    ///
    #[prost(string, tag = "3")]
    pub cmd: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub dm_score: i64,
    ///
    #[prost(enumeration = "MessageFormat", tag = "5")]
    pub format: i32,
    ///
    #[prost(int64, tag = "6")]
    pub sort: i64,
}
impl ::prost::Name for Common {
    const NAME: &'static str = "Common";
    const PACKAGE: &'static str = "bilibili.broadcast.live";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.Common".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.Common".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageFormat {
    ///
    Unknown = 0,
    ///
    Proto = 1,
    ///
    Json = 2,
}
impl MessageFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "MessageFormatUnknown",
            Self::Proto => "MessageFormatProto",
            Self::Json => "MessageFormatJSON",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MessageFormatUnknown" => Some(Self::Unknown),
            "MessageFormatProto" => Some(Self::Proto),
            "MessageFormatJSON" => Some(Self::Json),
            _ => None,
        }
    }
}
