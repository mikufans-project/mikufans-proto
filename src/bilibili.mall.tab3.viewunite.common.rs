// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActBannerItem {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "JumpType", tag = "3")]
    pub jump_type: i32,
    ///
    #[prost(map = "string, string", tag = "4")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ActBannerItem {
    const NAME: &'static str = "ActBannerItem";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActBannerItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActBannerItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActPageItems {
    ///
    #[prost(message, repeated, tag = "1")]
    pub item: ::prost::alloc::vec::Vec<ActBannerItem>,
    ///
    #[prost(enumeration = "ShowStyle", tag = "2")]
    pub show_style: i32,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for ActPageItems {
    const NAME: &'static str = "ActPageItems";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActPageItems".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActPageItems".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Activity {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "6")]
    pub ab: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub show_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub picurl: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub picurl_selected: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub h5_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub jump_mode: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "12")]
    pub items: ::prost::alloc::vec::Vec<Item>,
}
impl ::prost::Name for Activity {
    const NAME: &'static str = "Activity";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Activity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Activity".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityEntrance {
    ///
    #[prost(string, tag = "1")]
    pub activity_cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub activity_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub word_tag: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub activity_subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub activity_link: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub activity_type: i32,
    ///
    #[prost(int32, tag = "7")]
    pub reserve_id: i32,
    ///
    #[prost(int32, tag = "8")]
    pub status: i32,
    ///
    #[prost(message, repeated, tag = "9")]
    pub upper_list: ::prost::alloc::vec::Vec<User>,
    ///
    #[prost(map = "string, string", tag = "10")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ActivityEntrance {
    const NAME: &'static str = "ActivityEntrance";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActivityEntrance".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActivityEntrance".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityEntranceModule {
    ///
    #[prost(message, repeated, tag = "1")]
    pub activity_entrance: ::prost::alloc::vec::Vec<ActivityEntrance>,
}
impl ::prost::Name for ActivityEntranceModule {
    const NAME: &'static str = "ActivityEntranceModule";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActivityEntranceModule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActivityEntranceModule".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityReserve {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub vt: ::core::option::Option<StatInfo>,
    ///
    #[prost(message, optional, tag = "3")]
    pub danmaku: ::core::option::Option<StatInfo>,
    ///
    #[prost(message, optional, tag = "4")]
    pub button: ::core::option::Option<ReserveButton>,
}
impl ::prost::Name for ActivityReserve {
    const NAME: &'static str = "ActivityReserve";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActivityReserve".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActivityReserve".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityResource {
    ///
    #[prost(string, tag = "1")]
    pub mod_pool_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub mod_resource_name: ::prost::alloc::string::String,
}
impl ::prost::Name for ActivityResource {
    const NAME: &'static str = "ActivityResource";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActivityResource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActivityResource".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityTab {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "4")]
    pub show_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub picurl: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub picurl_selected: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub h5_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub link_type: i32,
    ///
    #[prost(int64, tag = "10")]
    pub biz_key: i64,
    ///
    #[prost(string, tag = "11")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub act_ext: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "13")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ActivityTab {
    const NAME: &'static str = "ActivityTab";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ActivityTab".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ActivityTab".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggEpCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub num: i32,
    ///
    #[prost(string, tag = "5")]
    pub jump_url: ::prost::alloc::string::String,
}
impl ::prost::Name for AggEpCard {
    const NAME: &'static str = "AggEpCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.AggEpCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.AggEpCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AggEps {
    ///
    #[prost(message, repeated, tag = "1")]
    pub agg_ep_cards: ::prost::alloc::vec::Vec<AggEpCard>,
    ///
    #[prost(int32, tag = "2")]
    pub place_index: i32,
}
impl ::prost::Name for AggEps {
    const NAME: &'static str = "AggEps";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.AggEps".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.AggEps".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AttentionRecommend {}
impl ::prost::Name for AttentionRecommend {
    const NAME: &'static str = "AttentionRecommend";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.AttentionRecommend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.AttentionRecommend".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Audio {
    ///
    #[prost(map = "int64, message", tag = "1")]
    pub audio_info: ::std::collections::HashMap<i64, AudioInfo>,
}
impl ::prost::Name for Audio {
    const NAME: &'static str = "Audio";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Audio".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Audio".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub song_id: i64,
    ///
    #[prost(int64, tag = "4")]
    pub play_count: i64,
    ///
    #[prost(int64, tag = "5")]
    pub reply_count: i64,
    ///
    #[prost(int64, tag = "6")]
    pub upper_id: i64,
    ///
    #[prost(string, tag = "7")]
    pub entrance: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "8")]
    pub song_attr: i64,
}
impl ::prost::Name for AudioInfo {
    const NAME: &'static str = "AudioInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.AudioInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.AudioInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadgeInfo {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub bg_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub border_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub border_color_night: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub bg_style: i32,
    ///
    #[prost(string, tag = "9")]
    pub img: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "10")]
    pub r#type: i32,
}
impl ::prost::Name for BadgeInfo {
    const NAME: &'static str = "BadgeInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.BadgeInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.BadgeInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Banner {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub relate_item: ::prost::alloc::vec::Vec<RelateItem>,
}
impl ::prost::Name for Banner {
    const NAME: &'static str = "Banner";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Banner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Banner".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BizFavParam {
    ///
    #[prost(int64, tag = "1")]
    pub season_id: i64,
}
impl ::prost::Name for BizFavParam {
    const NAME: &'static str = "BizFavParam";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.BizFavParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.BizFavParam".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BizReserveActivityParam {
    ///
    #[prost(int64, tag = "1")]
    pub activity_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub reserve_id: i64,
}
impl ::prost::Name for BizReserveActivityParam {
    const NAME: &'static str = "BizReserveActivityParam";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.BizReserveActivityParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.BizReserveActivityParam".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Button {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub left_strikethrough_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub badge_info: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(string, tag = "6")]
    pub sub_title: ::prost::alloc::string::String,
}
impl ::prost::Name for Button {
    const NAME: &'static str = "Button";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Button".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Button".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardBasicInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub track_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub unique_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub from_source_type: i64,
    ///
    #[prost(string, tag = "8")]
    pub from_source_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub material_id: i64,
    ///
    #[prost(string, tag = "10")]
    pub cover_gif: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub author: ::core::option::Option<Owner>,
    ///
    #[prost(int64, tag = "12")]
    pub id: i64,
    ///
    #[prost(string, tag = "13")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub from_spmid_suffix: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub report_flow_data: ::prost::alloc::string::String,
}
impl ::prost::Name for CardBasicInfo {
    const NAME: &'static str = "CardBasicInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CardBasicInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CardBasicInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardStyle {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for CardStyle {
    const NAME: &'static str = "CardStyle";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CardStyle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CardStyle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Celebrity {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub role: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub avatar: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub short_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub character_avatar: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "10")]
    pub is_follow: i32,
    ///
    #[prost(string, tag = "11")]
    pub occupation_name: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "OccupationType", tag = "12")]
    pub occupation_type: i32,
    ///
    #[prost(int32, tag = "13")]
    pub relate_attr: i32,
    ///
    #[prost(string, tag = "14")]
    pub small_avatar: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "15")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(message, optional, tag = "16")]
    pub official: ::core::option::Option<OfficialVerify>,
}
impl ::prost::Name for Celebrity {
    const NAME: &'static str = "Celebrity";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Celebrity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Celebrity".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CellFluid {
    ///
    #[prost(string, tag = "1")]
    pub top_base_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub top_split_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub top_text_color: ::prost::alloc::string::String,
}
impl ::prost::Name for CellFluid {
    const NAME: &'static str = "CellFluid";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CellFluid".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CellFluid".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CharacterGroup {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub characters: ::prost::alloc::vec::Vec<Celebrity>,
}
impl ::prost::Name for CharacterGroup {
    const NAME: &'static str = "CharacterGroup";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CharacterGroup".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CharacterGroup".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Characters {
    ///
    #[prost(message, repeated, tag = "1")]
    pub groups: ::prost::alloc::vec::Vec<CharacterGroup>,
}
impl ::prost::Name for Characters {
    const NAME: &'static str = "Characters";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Characters".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Characters".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CoinExtend {
    ///
    #[prost(string, tag = "1")]
    pub coin_app_zip_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub coin_app_icon1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub coin_app_icon2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub coin_app_icon3: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub coin_app_icon4: ::prost::alloc::string::String,
}
impl ::prost::Name for CoinExtend {
    const NAME: &'static str = "CoinExtend";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CoinExtend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CoinExtend".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CombinationEp {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(int32, tag = "2")]
    pub section_id: i32,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub can_ord_desc: i32,
    ///
    #[prost(string, tag = "5")]
    pub more: ::prost::alloc::string::String,
    ///
    #[prost(int32, repeated, tag = "6")]
    pub episode_ids: ::prost::alloc::vec::Vec<i32>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub episodes: ::prost::alloc::vec::Vec<ViewEpisode>,
    ///
    #[prost(string, tag = "8")]
    pub split_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub module_style: ::core::option::Option<Style>,
    ///
    #[prost(message, repeated, tag = "10")]
    pub serial_season: ::prost::alloc::vec::Vec<SerialSeason>,
    ///
    #[prost(message, optional, tag = "11")]
    pub section_data: ::core::option::Option<SectionData>,
}
impl ::prost::Name for CombinationEp {
    const NAME: &'static str = "CombinationEp";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.CombinationEp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.CombinationEp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractText {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub subtitle: ::prost::alloc::string::String,
}
impl ::prost::Name for ContractText {
    const NAME: &'static str = "ContractText";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ContractText".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ContractText".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Covenanter {
    ///
    #[prost(int32, tag = "1")]
    pub is_follow_display: i32,
    ///
    #[prost(message, optional, tag = "2")]
    pub text: ::core::option::Option<ContractText>,
    ///
    #[prost(int32, tag = "3")]
    pub is_interact_display: i32,
}
impl ::prost::Name for Covenanter {
    const NAME: &'static str = "Covenanter";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Covenanter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Covenanter".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeliveryData {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub module_style: ::core::option::Option<Style>,
    ///
    #[prost(string, tag = "3")]
    pub more: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub id: i32,
    ///
    #[prost(map = "string, string", tag = "9")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(oneof = "delivery_data::Data", tags = "4, 5, 6, 7, 10")]
    pub data: ::core::option::Option<delivery_data::Data>,
}
/// Nested message and enum types in `DeliveryData`.
pub mod delivery_data {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        ///
        #[prost(message, tag = "4")]
        Activity(super::Activity),
        ///
        #[prost(message, tag = "5")]
        Characters(super::Characters),
        ///
        #[prost(message, tag = "6")]
        TheatreHotTopic(super::TheatreHotTopic),
        ///
        #[prost(message, tag = "7")]
        AggEps(super::AggEps),
        ///
        #[prost(message, tag = "10")]
        ActPageItems(super::ActPageItems),
    }
}
impl ::prost::Name for DeliveryData {
    const NAME: &'static str = "DeliveryData";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.DeliveryData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.DeliveryData".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Desc {
    ///
    #[prost(string, tag = "1")]
    pub info: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for Desc {
    const NAME: &'static str = "Desc";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Desc".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Desc".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DescV2 {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "DescType", tag = "2")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub rid: i64,
}
impl ::prost::Name for DescV2 {
    const NAME: &'static str = "DescV2";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.DescV2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.DescV2".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dimension {
    ///
    #[prost(int64, tag = "1")]
    pub width: i64,
    ///
    #[prost(int64, tag = "2")]
    pub height: i64,
    ///
    #[prost(int64, tag = "3")]
    pub rotate: i64,
}
impl ::prost::Name for Dimension {
    const NAME: &'static str = "Dimension";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Dimension".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Dimension".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DislikeReasons {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "3")]
    pub rid: i32,
    ///
    #[prost(int64, tag = "4")]
    pub tag_id: i64,
    ///
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for DislikeReasons {
    const NAME: &'static str = "DislikeReasons";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.DislikeReasons".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.DislikeReasons".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtTab {
    ///
    #[prost(enumeration = "ExtType", tag = "1")]
    pub ext_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub data: ::prost::alloc::string::String,
}
impl ::prost::Name for ExtTab {
    const NAME: &'static str = "ExtTab";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ExtTab".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ExtTab".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowLayer {
    ///
    #[prost(message, optional, tag = "1")]
    pub staff: ::core::option::Option<Staff>,
    ///
    #[prost(message, optional, tag = "2")]
    pub desc: ::core::option::Option<Desc>,
    ///
    #[prost(map = "string, string", tag = "3")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for FollowLayer {
    const NAME: &'static str = "FollowLayer";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.FollowLayer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.FollowLayer".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Headline {
    ///
    #[prost(message, optional, tag = "1")]
    pub label: ::core::option::Option<Label>,
    ///
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
}
impl ::prost::Name for Headline {
    const NAME: &'static str = "Headline";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Headline".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Headline".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryNode {
    ///
    #[prost(int64, tag = "1")]
    pub node_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub cid: i64,
}
impl ::prost::Name for HistoryNode {
    const NAME: &'static str = "HistoryNode";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.HistoryNode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.HistoryNode".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Honor {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text_extra: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub bg_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub url_text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "HonorType", tag = "11")]
    pub r#type: i32,
    ///
    #[prost(enumeration = "HonorJumpType", tag = "12")]
    pub honor_jump_type: i32,
    ///
    #[prost(map = "string, string", tag = "13")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for Honor {
    const NAME: &'static str = "Honor";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Honor".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Honor".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IconFont {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for IconFont {
    const NAME: &'static str = "IconFont";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.IconFont".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.IconFont".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Interaction {
    ///
    #[prost(int64, tag = "1")]
    pub ep_id: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub history_node: ::core::option::Option<HistoryNode>,
    ///
    #[prost(int64, tag = "3")]
    pub graph_version: i64,
    ///
    #[prost(string, tag = "4")]
    pub msg: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "5")]
    pub is_interaction: bool,
}
impl ::prost::Name for Interaction {
    const NAME: &'static str = "Interaction";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Interaction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Interaction".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    ///
    #[prost(string, tag = "1")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for Item {
    const NAME: &'static str = "Item";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Item".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Item".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KingPos {
    ///
    #[prost(bool, tag = "1")]
    pub disable: bool,
    ///
    #[prost(string, tag = "2")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "KingPositionType", tag = "3")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "4")]
    pub disable_toast: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub checked_toast: ::prost::alloc::string::String,
    ///
    #[prost(oneof = "king_pos::Extend", tags = "6, 7")]
    pub extend: ::core::option::Option<king_pos::Extend>,
}
/// Nested message and enum types in `KingPos`.
pub mod king_pos {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Extend {
        ///
        #[prost(message, tag = "6")]
        Like(super::LikeExtend),
        ///
        #[prost(message, tag = "7")]
        Coin(super::CoinExtend),
    }
}
impl ::prost::Name for KingPos {
    const NAME: &'static str = "KingPos";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.KingPos".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.KingPos".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KingPosition {
    ///
    #[prost(message, repeated, tag = "1")]
    pub king_pos: ::prost::alloc::vec::Vec<KingPos>,
    ///
    #[prost(message, repeated, tag = "2")]
    pub extend: ::prost::alloc::vec::Vec<KingPos>,
}
impl ::prost::Name for KingPosition {
    const NAME: &'static str = "KingPosition";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.KingPosition".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.KingPosition".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Label {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub icon_width: i64,
    ///
    #[prost(int64, tag = "6")]
    pub icon_height: i64,
    ///
    #[prost(string, tag = "7")]
    pub lottie: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub lottie_night: ::prost::alloc::string::String,
}
impl ::prost::Name for Label {
    const NAME: &'static str = "Label";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Label".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Label".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeComment {
    ///
    #[prost(string, tag = "1")]
    pub reply: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for LikeComment {
    const NAME: &'static str = "LikeComment";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.LikeComment".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.LikeComment".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeExtend {
    ///
    #[prost(message, optional, tag = "1")]
    pub triple_like: ::core::option::Option<UpLikeImg>,
    ///
    #[prost(string, tag = "2")]
    pub like_animation: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub player_animation: ::core::option::Option<PlayerAnimation>,
    ///
    #[prost(message, optional, tag = "4")]
    pub resource: ::core::option::Option<ActivityResource>,
}
impl ::prost::Name for LikeExtend {
    const NAME: &'static str = "LikeExtend";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.LikeExtend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.LikeExtend".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Live {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub room_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub endpage_uri: ::prost::alloc::string::String,
}
impl ::prost::Name for Live {
    const NAME: &'static str = "Live";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Live".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Live".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveOrder {
    ///
    #[prost(int64, tag = "1")]
    pub sid: i64,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub live_plan_start_time: i64,
    ///
    #[prost(bool, tag = "4")]
    pub is_follow: bool,
    ///
    #[prost(int64, tag = "5")]
    pub follow_count: i64,
}
impl ::prost::Name for LiveOrder {
    const NAME: &'static str = "LiveOrder";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.LiveOrder".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.LiveOrder".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mine {
    ///
    #[prost(double, tag = "1")]
    pub amount: f64,
    ///
    #[prost(int32, tag = "2")]
    pub rank: i32,
    ///
    #[prost(string, tag = "3")]
    pub msg: ::prost::alloc::string::String,
}
impl ::prost::Name for Mine {
    const NAME: &'static str = "Mine";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Mine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Mine".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Module {
    ///
    #[prost(enumeration = "ModuleType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(
        oneof = "module::Data",
        tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30"
    )]
    pub data: ::core::option::Option<module::Data>,
}
/// Nested message and enum types in `Module`.
pub mod module {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        ///
        #[prost(message, tag = "2")]
        OgvIntroduction(super::OgvIntroduction),
        ///
        #[prost(message, tag = "3")]
        UgcIntroduction(super::UgcIntroduction),
        ///
        #[prost(message, tag = "4")]
        KingPosition(super::KingPosition),
        ///
        #[prost(message, tag = "5")]
        HeadLine(super::Headline),
        ///
        #[prost(message, tag = "6")]
        OgvTitle(super::OgvTitle),
        ///
        #[prost(message, tag = "7")]
        Honor(super::Honor),
        ///
        #[prost(message, tag = "8")]
        List(super::UserList),
        ///
        #[prost(message, tag = "9")]
        Staffs(super::Staffs),
        ///
        #[prost(message, tag = "10")]
        ActivityReserve(super::ActivityReserve),
        ///
        #[prost(message, tag = "11")]
        LiveOrder(super::LiveOrder),
        ///
        #[prost(message, tag = "12")]
        SectionData(super::SectionData),
        ///
        #[prost(message, tag = "13")]
        DeliveryData(super::DeliveryData),
        ///
        #[prost(message, tag = "14")]
        FollowLayer(super::FollowLayer),
        ///
        #[prost(message, tag = "15")]
        OgvSeasons(super::OgvSeasons),
        ///
        #[prost(message, tag = "16")]
        UgcSeason(super::UgcSeasons),
        ///
        #[prost(message, tag = "17")]
        OgvLiveReserve(super::OgvLiveReserve),
        ///
        #[prost(message, tag = "18")]
        CombinationEp(super::CombinationEp),
        ///
        #[prost(message, tag = "19")]
        Sponsor(super::Sponsor),
        ///
        #[prost(message, tag = "20")]
        ActivityEntranceModule(super::ActivityEntranceModule),
        ///
        #[prost(message, tag = "21")]
        SerialSeason(super::SerialSeason),
        ///
        #[prost(message, tag = "22")]
        Relates(super::Relates),
        ///
        #[prost(message, tag = "23")]
        Banner(super::Banner),
        ///
        #[prost(message, tag = "24")]
        Audio(super::Audio),
        ///
        #[prost(message, tag = "25")]
        LikeComment(super::LikeComment),
        ///
        #[prost(message, tag = "26")]
        AttentionRecommend(super::AttentionRecommend),
        ///
        #[prost(message, tag = "27")]
        Covenanter(super::Covenanter),
        ///
        #[prost(message, tag = "28")]
        SpecialTag(super::SpecialTag),
        ///
        #[prost(message, tag = "29")]
        UpDataModule(super::UpDataModule),
        ///
        #[prost(message, tag = "30")]
        ProfessionApproval(super::ProfessionApproval),
    }
}
impl ::prost::Name for Module {
    const NAME: &'static str = "Module";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Module".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Module".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MultiViewEp {
    ///
    #[prost(int64, tag = "1")]
    pub ep_id: i64,
}
impl ::prost::Name for MultiViewEp {
    const NAME: &'static str = "MultiViewEp";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.MultiViewEp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.MultiViewEp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewEp {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub is_new: i32,
    ///
    #[prost(string, tag = "5")]
    pub more: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub index_show: ::prost::alloc::string::String,
}
impl ::prost::Name for NewEp {
    const NAME: &'static str = "NewEp";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.NewEp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.NewEp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfficialVerify {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub desc: ::prost::alloc::string::String,
}
impl ::prost::Name for OfficialVerify {
    const NAME: &'static str = "OfficialVerify";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.OfficialVerify".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.OfficialVerify".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvIntroduction {
    ///
    #[prost(string, tag = "1")]
    pub followers: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub score: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub play_data: ::core::option::Option<StatInfo>,
}
impl ::prost::Name for OgvIntroduction {
    const NAME: &'static str = "OgvIntroduction";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.OgvIntroduction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.OgvIntroduction".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvLiveReserve {
    ///
    #[prost(int64, tag = "1")]
    pub reserve_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub night_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub click_button: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub follow_video_is_reserve_live: i32,
    ///
    #[prost(string, tag = "8")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub night_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub night_text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub bt_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub bt_frame_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub night_bt_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub night_bt_frame_color: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "16")]
    pub active_type: i32,
    ///
    #[prost(int32, tag = "17")]
    pub reserve_status: i32,
    ///
    #[prost(string, tag = "18")]
    pub bt_text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "19")]
    pub night_bt_text_color: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "20")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for OgvLiveReserve {
    const NAME: &'static str = "OgvLiveReserve";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.OgvLiveReserve".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.OgvLiveReserve".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvSeasons {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub serial_season: ::prost::alloc::vec::Vec<SerialSeason>,
    ///
    #[prost(enumeration = "SerialSeasonCoverStyle", tag = "3")]
    pub style: i32,
}
impl ::prost::Name for OgvSeasons {
    const NAME: &'static str = "OgvSeasons";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.OgvSeasons".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.OgvSeasons".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvTitle {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub badge_info: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(int32, tag = "3")]
    pub is_show_btn_animation: i32,
    ///
    #[prost(int32, tag = "4")]
    pub follow_video_is_reserve_live: i32,
    ///
    #[prost(int64, tag = "5")]
    pub reserve_id: i64,
    ///
    #[prost(message, optional, tag = "6")]
    pub title_delivery_button: ::core::option::Option<TitleDeliveryButton>,
}
impl ::prost::Name for OgvTitle {
    const NAME: &'static str = "OgvTitle";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.OgvTitle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.OgvTitle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Owner {
    ///
    #[prost(message, optional, tag = "1")]
    pub avatar: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
    ///
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub fans: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub arc_count: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "AttentionRelationStatus", tag = "6")]
    pub attention: i32,
    ///
    #[prost(enumeration = "AttentionRelationStatus", tag = "7")]
    pub attention_relation: i32,
    ///
    #[prost(string, tag = "8")]
    pub pub_location: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub vip: ::core::option::Option<Vip>,
    ///
    #[prost(string, tag = "10")]
    pub title_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "12")]
    pub mid: i64,
    ///
    #[prost(message, optional, tag = "13")]
    pub official_verify: ::core::option::Option<OfficialVerify>,
    ///
    #[prost(message, optional, tag = "14")]
    pub live: ::core::option::Option<Live>,
    ///
    #[prost(int64, tag = "15")]
    pub fans_num: i64,
    ///
    #[prost(int64, repeated, tag = "16")]
    pub assists: ::prost::alloc::vec::Vec<i64>,
}
impl ::prost::Name for Owner {
    const NAME: &'static str = "Owner";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Owner".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Owner".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Page {
    ///
    #[prost(int64, tag = "1")]
    pub cid: i64,
    ///
    #[prost(string, tag = "2")]
    pub part: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub duration: i64,
    ///
    #[prost(string, tag = "4")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub dimension: ::core::option::Option<Dimension>,
    ///
    #[prost(string, tag = "6")]
    pub dl_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub dl_subtitle: ::prost::alloc::string::String,
}
impl ::prost::Name for Page {
    const NAME: &'static str = "Page";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Page".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Page".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pendant {
    ///
    #[prost(int32, tag = "1")]
    pub pid: i32,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub image: ::prost::alloc::string::String,
}
impl ::prost::Name for Pendant {
    const NAME: &'static str = "Pendant";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Pendant".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Pendant".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerAnimation {
    ///
    #[prost(string, tag = "1")]
    pub player_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub player_triple_icon: ::prost::alloc::string::String,
}
impl ::prost::Name for PlayerAnimation {
    const NAME: &'static str = "PlayerAnimation";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.PlayerAnimation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.PlayerAnimation".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PointActivity {
    ///
    #[prost(string, tag = "1")]
    pub tip: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub link: ::prost::alloc::string::String,
}
impl ::prost::Name for PointActivity {
    const NAME: &'static str = "PointActivity";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.PointActivity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.PointActivity".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PowerIconStyle {
    ///
    #[prost(string, tag = "1")]
    pub icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub icon_width: i64,
    ///
    #[prost(int64, tag = "4")]
    pub icon_height: i64,
}
impl ::prost::Name for PowerIconStyle {
    const NAME: &'static str = "PowerIconStyle";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.PowerIconStyle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.PowerIconStyle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProfessionApproval {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for ProfessionApproval {
    const NAME: &'static str = "ProfessionApproval";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ProfessionApproval".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ProfessionApproval".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rank {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for Rank {
    const NAME: &'static str = "Rank";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Rank".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Rank".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankInfo {
    ///
    #[prost(string, tag = "1")]
    pub icon_url_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_url_day: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub bkg_night_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub bkg_day_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub font_night_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub font_day_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub rank_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub rank_link: ::prost::alloc::string::String,
}
impl ::prost::Name for RankInfo {
    const NAME: &'static str = "RankInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RankInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RankInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rating {
    ///
    #[prost(string, tag = "1")]
    pub score: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub count: i32,
}
impl ::prost::Name for Rating {
    const NAME: &'static str = "Rating";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Rating".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Rating".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateAvCard {
    ///
    #[prost(int64, tag = "1")]
    pub duration: i64,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(message, optional, tag = "3")]
    pub dimension: ::core::option::Option<Dimension>,
    ///
    #[prost(message, optional, tag = "4")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(string, tag = "5")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "6")]
    pub show_up_name: bool,
    ///
    #[prost(message, optional, tag = "7")]
    pub rcmd_reason: ::core::option::Option<BadgeInfo>,
}
impl ::prost::Name for RelateAvCard {
    const NAME: &'static str = "RelateAVCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateAVCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateAVCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateBangumiAvCard {
    ///
    #[prost(message, optional, tag = "1")]
    pub badge: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(message, optional, tag = "3")]
    pub rating: ::core::option::Option<Rating>,
}
impl ::prost::Name for RelateBangumiAvCard {
    const NAME: &'static str = "RelateBangumiAvCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateBangumiAvCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateBangumiAvCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateBangumiCard {
    ///
    #[prost(int32, tag = "1")]
    pub season_id: i32,
    ///
    #[prost(int32, tag = "2")]
    pub season_type: i32,
    ///
    #[prost(message, optional, tag = "3")]
    pub new_ep: ::core::option::Option<NewEp>,
    ///
    #[prost(message, optional, tag = "4")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(message, optional, tag = "5")]
    pub rating: ::core::option::Option<Rating>,
    ///
    #[prost(string, tag = "6")]
    pub rcmd_reason: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub badge_info: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(string, tag = "8")]
    pub goto_type: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "9")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for RelateBangumiCard {
    const NAME: &'static str = "RelateBangumiCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateBangumiCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateBangumiCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateBangumiResourceCard {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub scover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub re_type: i32,
    ///
    #[prost(string, tag = "4")]
    pub re_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub corner: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub card: i32,
    ///
    #[prost(string, tag = "7")]
    pub siz: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub position: i32,
    ///
    #[prost(string, tag = "9")]
    pub rcmd_reason: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub label: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "11")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(string, tag = "12")]
    pub goto_type: ::prost::alloc::string::String,
}
impl ::prost::Name for RelateBangumiResourceCard {
    const NAME: &'static str = "RelateBangumiResourceCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateBangumiResourceCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateBangumiResourceCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateBangumiUgcCard {
    ///
    #[prost(message, optional, tag = "1")]
    pub badge: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(message, optional, tag = "3")]
    pub rating: ::core::option::Option<Rating>,
}
impl ::prost::Name for RelateBangumiUgcCard {
    const NAME: &'static str = "RelateBangumiUGCCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateBangumiUGCCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateBangumiUGCCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateCmCard {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub source_content: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(int64, tag = "3")]
    pub duration: i64,
    ///
    #[prost(message, optional, tag = "4")]
    pub stat: ::core::option::Option<Stat>,
}
impl ::prost::Name for RelateCmCard {
    const NAME: &'static str = "RelateCMCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateCMCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateCMCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateCard {
    ///
    #[prost(enumeration = "RelateCardType", tag = "1")]
    pub relate_card_type: i32,
    ///
    #[prost(message, optional, tag = "10")]
    pub three_point: ::core::option::Option<RelateThreePoint>,
    ///
    #[prost(message, optional, tag = "11")]
    pub cm_stock: ::core::option::Option<::prost_types::Any>,
    ///
    #[prost(message, optional, tag = "12")]
    pub basic_info: ::core::option::Option<CardBasicInfo>,
    ///
    #[prost(oneof = "relate_card::Card", tags = "2, 3, 4, 5, 6, 7, 8, 9, 13, 14")]
    pub card: ::core::option::Option<relate_card::Card>,
}
/// Nested message and enum types in `RelateCard`.
pub mod relate_card {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Card {
        ///
        #[prost(message, tag = "2")]
        Av(::prost::alloc::boxed::Box<super::RelateAvCard>),
        ///
        #[prost(message, tag = "3")]
        Bangumi(::prost::alloc::boxed::Box<super::RelateBangumiCard>),
        ///
        #[prost(message, tag = "4")]
        Resource(::prost::alloc::boxed::Box<super::RelateBangumiResourceCard>),
        ///
        #[prost(message, tag = "5")]
        Game(::prost::alloc::boxed::Box<super::RelateGameCard>),
        ///
        #[prost(message, tag = "6")]
        Cm(::prost::alloc::boxed::Box<super::RelateCmCard>),
        ///
        #[prost(message, tag = "7")]
        Live(::prost::alloc::boxed::Box<super::RelateLiveCard>),
        ///
        #[prost(message, tag = "8")]
        BangumiAv(::prost::alloc::boxed::Box<super::RelateBangumiAvCard>),
        ///
        #[prost(message, tag = "9")]
        AiCard(::prost::alloc::boxed::Box<super::RelatedAiCard>),
        ///
        #[prost(message, tag = "13")]
        BangumiUgc(::prost::alloc::boxed::Box<super::RelateBangumiUgcCard>),
        ///
        #[prost(message, tag = "14")]
        Special(::prost::alloc::boxed::Box<super::RelateSpecial>),
    }
}
impl ::prost::Name for RelateCard {
    const NAME: &'static str = "RelateCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateConfig {
    ///
    #[prost(int64, tag = "1")]
    pub valid_show_m: i64,
    ///
    #[prost(int64, tag = "2")]
    pub valid_show_n: i64,
    ///
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
    ///
    #[prost(bool, tag = "4")]
    pub can_load_more: bool,
}
impl ::prost::Name for RelateConfig {
    const NAME: &'static str = "RelateConfig";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateConfig".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateDislike {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub sub_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub closed_sub_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub paste_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub closed_paste_text: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "6")]
    pub dislike_reason: ::prost::alloc::vec::Vec<DislikeReasons>,
    ///
    #[prost(string, tag = "7")]
    pub toast: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub closed_toast: ::prost::alloc::string::String,
}
impl ::prost::Name for RelateDislike {
    const NAME: &'static str = "RelateDislike";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateDislike".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateDislike".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateGameCard {
    ///
    #[prost(int64, tag = "1")]
    pub reserve_status: i64,
    ///
    #[prost(string, tag = "2")]
    pub reserve_status_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub reserve: ::prost::alloc::string::String,
    ///
    #[prost(float, tag = "4")]
    pub rating: f32,
    ///
    #[prost(string, tag = "5")]
    pub tag_name: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub rank_info: ::core::option::Option<RankInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub pack_info: ::core::option::Option<Button>,
    ///
    #[prost(message, optional, tag = "8")]
    pub notice: ::core::option::Option<Button>,
    ///
    #[prost(message, optional, tag = "9")]
    pub power_icon_style: ::core::option::Option<PowerIconStyle>,
    ///
    #[prost(string, tag = "10")]
    pub game_rcmd_reason: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub wiki_info: ::core::option::Option<WikiInfo>,
    ///
    #[prost(message, optional, tag = "12")]
    pub badge: ::core::option::Option<BadgeInfo>,
}
impl ::prost::Name for RelateGameCard {
    const NAME: &'static str = "RelateGameCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateGameCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateGameCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateItem {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "3")]
    pub use_default_browser: bool,
}
impl ::prost::Name for RelateItem {
    const NAME: &'static str = "RelateItem";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateLiveCard {
    ///
    #[prost(int64, tag = "1")]
    pub icon_type: i64,
    ///
    #[prost(string, tag = "2")]
    pub area_name: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub watched_show: i64,
    ///
    #[prost(int64, tag = "4")]
    pub live_status: i64,
}
impl ::prost::Name for RelateLiveCard {
    const NAME: &'static str = "RelateLiveCard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateLiveCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateLiveCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateSpecial {
    ///
    #[prost(message, optional, tag = "1")]
    pub badge: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub rcmd_reason: ::core::option::Option<BadgeInfo>,
}
impl ::prost::Name for RelateSpecial {
    const NAME: &'static str = "RelateSpecial";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateSpecial".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateSpecial".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelateThreePoint {
    ///
    #[prost(message, optional, tag = "1")]
    pub dislike: ::core::option::Option<RelateDislike>,
    ///
    #[prost(message, optional, tag = "2")]
    pub feedback: ::core::option::Option<RelateDislike>,
    ///
    #[prost(bool, tag = "3")]
    pub watch_later: bool,
    ///
    #[prost(string, tag = "4")]
    pub dislike_report_data: ::prost::alloc::string::String,
}
impl ::prost::Name for RelateThreePoint {
    const NAME: &'static str = "RelateThreePoint";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelateThreePoint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelateThreePoint".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelatedAiCard {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub duration: i64,
    ///
    #[prost(message, optional, tag = "3")]
    pub up_info: ::core::option::Option<Staff>,
    ///
    #[prost(message, optional, tag = "4")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(map = "string, string", tag = "5")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(string, tag = "6")]
    pub goto_type: ::prost::alloc::string::String,
}
impl ::prost::Name for RelatedAiCard {
    const NAME: &'static str = "RelatedAICard";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.RelatedAICard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.RelatedAICard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relates {
    ///
    #[prost(message, repeated, tag = "1")]
    pub cards: ::prost::alloc::vec::Vec<RelateCard>,
    ///
    #[prost(message, optional, tag = "2")]
    pub config: ::core::option::Option<RelateConfig>,
}
impl ::prost::Name for Relates {
    const NAME: &'static str = "Relates";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Relates".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Relates".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveButton {
    ///
    #[prost(bool, tag = "1")]
    pub status: bool,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub selected_text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "ReserveBizType", tag = "7")]
    pub order_type: i32,
    ///
    #[prost(oneof = "reserve_button::OrderParam", tags = "8, 9")]
    pub order_param: ::core::option::Option<reserve_button::OrderParam>,
}
/// Nested message and enum types in `ReserveButton`.
pub mod reserve_button {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OrderParam {
        ///
        #[prost(message, tag = "8")]
        Reserve(super::BizReserveActivityParam),
        ///
        #[prost(message, tag = "9")]
        Fav(super::BizFavParam),
    }
}
impl ::prost::Name for ReserveButton {
    const NAME: &'static str = "ReserveButton";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ReserveButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ReserveButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Rights {
    ///
    #[prost(int32, tag = "1")]
    pub allow_download: i32,
    ///
    #[prost(int32, tag = "2")]
    pub allow_review: i32,
    ///
    #[prost(int32, tag = "3")]
    pub can_watch: i32,
    ///
    #[prost(string, tag = "4")]
    pub resource: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub allow_dm: i32,
    ///
    #[prost(int32, tag = "6")]
    pub allow_demand: i32,
    ///
    #[prost(int32, tag = "7")]
    pub area_limit: i32,
}
impl ::prost::Name for Rights {
    const NAME: &'static str = "Rights";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Rights".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Rights".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonHead {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub intro: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub vt: ::core::option::Option<StatInfo>,
    ///
    #[prost(message, optional, tag = "4")]
    pub danmaku: ::core::option::Option<StatInfo>,
}
impl ::prost::Name for SeasonHead {
    const NAME: &'static str = "SeasonHead";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SeasonHead".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SeasonHead".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonShow {
    ///
    #[prost(string, tag = "1")]
    pub button_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub join_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub rule_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub checkin_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub checkin_prompt: ::prost::alloc::string::String,
}
impl ::prost::Name for SeasonShow {
    const NAME: &'static str = "SeasonShow";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SeasonShow".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SeasonShow".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SectionData {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(int32, tag = "2")]
    pub section_id: i32,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub can_ord_desc: i32,
    ///
    #[prost(string, tag = "5")]
    pub more: ::prost::alloc::string::String,
    ///
    #[prost(int32, repeated, tag = "6")]
    pub episode_ids: ::prost::alloc::vec::Vec<i32>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub episodes: ::prost::alloc::vec::Vec<ViewEpisode>,
    ///
    #[prost(string, tag = "8")]
    pub split_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub module_style: ::core::option::Option<Style>,
    ///
    #[prost(string, tag = "10")]
    pub more_bottom_desc: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "11")]
    pub seasons: ::prost::alloc::vec::Vec<SerialSeason>,
    ///
    #[prost(message, optional, tag = "12")]
    pub more_left: ::core::option::Option<Button>,
    ///
    #[prost(int32, tag = "13")]
    pub r#type: i32,
    ///
    #[prost(map = "string, string", tag = "14")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for SectionData {
    const NAME: &'static str = "SectionData";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SectionData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SectionData".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SerialSeason {
    ///
    #[prost(int32, tag = "1")]
    pub season_id: i32,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub season_title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub is_new: i32,
    ///
    #[prost(string, tag = "5")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub badge_type: i32,
    ///
    #[prost(message, optional, tag = "8")]
    pub badge_info: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(string, tag = "9")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub resource: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub new_ep: ::core::option::Option<NewEp>,
    ///
    #[prost(map = "string, string", tag = "12")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for SerialSeason {
    const NAME: &'static str = "SerialSeason";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SerialSeason".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SerialSeason".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SkipRange {
    ///
    #[prost(int32, tag = "1")]
    pub start: i32,
    ///
    #[prost(int32, tag = "2")]
    pub end: i32,
}
impl ::prost::Name for SkipRange {
    const NAME: &'static str = "SkipRange";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SkipRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SkipRange".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpecialCell {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub cell_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub cell_bgcolor: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub cell_bgcolor_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub page_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub jump_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub end_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub end_icon_night: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "15")]
    pub cell_fluid: ::core::option::Option<CellFluid>,
}
impl ::prost::Name for SpecialCell {
    const NAME: &'static str = "SpecialCell";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SpecialCell".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SpecialCell".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpecialTag {
    ///
    #[prost(message, repeated, tag = "1")]
    pub special_cell: ::prost::alloc::vec::Vec<SpecialCell>,
    ///
    #[prost(bool, tag = "2")]
    pub refresh: bool,
}
impl ::prost::Name for SpecialTag {
    const NAME: &'static str = "SpecialTag";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SpecialTag".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SpecialTag".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sponsor {
    ///
    #[prost(int64, tag = "1")]
    pub total: i64,
    ///
    #[prost(int64, tag = "2")]
    pub week: i64,
    ///
    #[prost(message, repeated, tag = "3")]
    pub rank_list: ::prost::alloc::vec::Vec<SponsorRank>,
    ///
    #[prost(message, optional, tag = "4")]
    pub mine: ::core::option::Option<Mine>,
    ///
    #[prost(message, optional, tag = "5")]
    pub point_activity: ::core::option::Option<PointActivity>,
    ///
    #[prost(message, repeated, tag = "6")]
    pub pendants: ::prost::alloc::vec::Vec<Pendant>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub threshold: ::prost::alloc::vec::Vec<Threshold>,
}
impl ::prost::Name for Sponsor {
    const NAME: &'static str = "Sponsor";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Sponsor".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Sponsor".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SponsorRank {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub uname: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub vip: ::core::option::Option<Vip>,
}
impl ::prost::Name for SponsorRank {
    const NAME: &'static str = "SponsorRank";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.SponsorRank".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.SponsorRank".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Staff {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "2")]
    pub attention: i32,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub official: ::core::option::Option<OfficialVerify>,
    ///
    #[prost(message, optional, tag = "7")]
    pub vip: ::core::option::Option<Vip>,
    ///
    #[prost(int32, tag = "8")]
    pub label_style: i32,
    ///
    #[prost(string, tag = "9")]
    pub fans: ::prost::alloc::string::String,
}
impl ::prost::Name for Staff {
    const NAME: &'static str = "Staff";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Staff".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Staff".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Staffs {
    ///
    #[prost(message, repeated, tag = "1")]
    pub staff: ::prost::alloc::vec::Vec<Staff>,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for Staffs {
    const NAME: &'static str = "Staffs";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Staffs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Staffs".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Stat {
    ///
    #[prost(message, optional, tag = "1")]
    pub vt: ::core::option::Option<StatInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub danmaku: ::core::option::Option<StatInfo>,
    ///
    #[prost(int64, tag = "3")]
    pub reply: i64,
    ///
    #[prost(int64, tag = "4")]
    pub fav: i64,
    ///
    #[prost(int64, tag = "5")]
    pub coin: i64,
    ///
    #[prost(int64, tag = "6")]
    pub share: i64,
    ///
    #[prost(int64, tag = "7")]
    pub like: i64,
    ///
    #[prost(int64, tag = "8")]
    pub follow: i64,
}
impl ::prost::Name for Stat {
    const NAME: &'static str = "Stat";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Stat".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Stat".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatInfo {
    ///
    #[prost(int64, tag = "1")]
    pub value: i64,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub pure_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub icon: ::prost::alloc::string::String,
}
impl ::prost::Name for StatInfo {
    const NAME: &'static str = "StatInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.StatInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.StatInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Style {
    ///
    #[prost(int32, tag = "1")]
    pub line: i32,
    ///
    #[prost(int32, tag = "2")]
    pub hidden: i32,
    ///
    #[prost(string, repeated, tag = "3")]
    pub show_pages: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for Style {
    const NAME: &'static str = "Style";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Style".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Style".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tag {
    ///
    #[prost(int64, tag = "1")]
    pub tag_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub tag_type: ::prost::alloc::string::String,
}
impl ::prost::Name for Tag {
    const NAME: &'static str = "Tag";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Tag".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Tag".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TheatreHotTopic {
    ///
    #[prost(int64, tag = "1")]
    pub theatre_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub theatre_set_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub theatre_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub background_image_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub theatre_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "6")]
    pub hot_topic_id: i64,
    ///
    #[prost(int64, tag = "7")]
    pub hot_topic_set_id: i64,
    ///
    #[prost(string, tag = "8")]
    pub hot_topic_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub hot_topic_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "10")]
    pub is_subscribe: i32,
    ///
    #[prost(map = "string, string", tag = "11")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for TheatreHotTopic {
    const NAME: &'static str = "TheatreHotTopic";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.TheatreHotTopic".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.TheatreHotTopic".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Threshold {
    ///
    #[prost(int32, tag = "1")]
    pub bp: i32,
    ///
    #[prost(int32, tag = "2")]
    pub days: i32,
    ///
    #[prost(string, tag = "3")]
    pub days_text: ::prost::alloc::string::String,
}
impl ::prost::Name for Threshold {
    const NAME: &'static str = "Threshold";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Threshold".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Threshold".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TitleDeliveryButton {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "4")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for TitleDeliveryButton {
    const NAME: &'static str = "TitleDeliveryButton";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.TitleDeliveryButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.TitleDeliveryButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UgcEpisode {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub cid: i64,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub cover_right_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub page: ::core::option::Option<Page>,
    ///
    #[prost(message, optional, tag = "8")]
    pub vt: ::core::option::Option<StatInfo>,
    ///
    #[prost(message, optional, tag = "9")]
    pub danmaku: ::core::option::Option<StatInfo>,
}
impl ::prost::Name for UgcEpisode {
    const NAME: &'static str = "UgcEpisode";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UgcEpisode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UgcEpisode".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UgcIntroduction {
    ///
    #[prost(message, repeated, tag = "1")]
    pub tags: ::prost::alloc::vec::Vec<Tag>,
    ///
    #[prost(message, optional, tag = "2")]
    pub rating: ::core::option::Option<Rating>,
    ///
    #[prost(message, optional, tag = "3")]
    pub rank: ::core::option::Option<Rank>,
    ///
    #[prost(message, repeated, tag = "4")]
    pub bgm: ::prost::alloc::vec::Vec<ViewMaterial>,
    ///
    #[prost(message, repeated, tag = "5")]
    pub sticker: ::prost::alloc::vec::Vec<ViewMaterial>,
    ///
    #[prost(message, repeated, tag = "6")]
    pub video_source: ::prost::alloc::vec::Vec<ViewMaterial>,
    ///
    #[prost(int64, tag = "7")]
    pub pubdate: i64,
    ///
    #[prost(message, repeated, tag = "8")]
    pub desc: ::prost::alloc::vec::Vec<DescV2>,
}
impl ::prost::Name for UgcIntroduction {
    const NAME: &'static str = "UgcIntroduction";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UgcIntroduction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UgcIntroduction".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UgcSeasonActivity {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub activity_id: i64,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub intro: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub day_count: i32,
    ///
    #[prost(int32, tag = "7")]
    pub user_count: i32,
    ///
    #[prost(int64, tag = "8")]
    pub join_deadline: i64,
    ///
    #[prost(int64, tag = "9")]
    pub activity_deadline: i64,
    ///
    #[prost(int32, tag = "10")]
    pub checkin_view_time: i32,
    ///
    #[prost(bool, tag = "11")]
    pub new_activity: bool,
    ///
    #[prost(message, optional, tag = "12")]
    pub user_activity: ::core::option::Option<UserActivity>,
    ///
    #[prost(message, optional, tag = "13")]
    pub season_show: ::core::option::Option<SeasonShow>,
}
impl ::prost::Name for UgcSeasonActivity {
    const NAME: &'static str = "UgcSeasonActivity";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UgcSeasonActivity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UgcSeasonActivity".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UgcSeasons {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub supernatant_title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "5")]
    pub section: ::prost::alloc::vec::Vec<UgcSection>,
    ///
    #[prost(string, tag = "6")]
    pub union_title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub head: ::core::option::Option<SeasonHead>,
    ///
    #[prost(int64, tag = "8")]
    pub ep_count: i64,
    ///
    #[prost(enumeration = "SeasonType", tag = "9")]
    pub season_type: i32,
    ///
    #[prost(message, optional, tag = "10")]
    pub activity: ::core::option::Option<UgcSeasonActivity>,
    ///
    #[prost(string, repeated, tag = "11")]
    pub season_ability: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "12")]
    pub season_title: ::prost::alloc::string::String,
}
impl ::prost::Name for UgcSeasons {
    const NAME: &'static str = "UgcSeasons";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UgcSeasons".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UgcSeasons".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UgcSection {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub r#type: i64,
    ///
    #[prost(message, repeated, tag = "4")]
    pub episodes: ::prost::alloc::vec::Vec<UgcEpisode>,
}
impl ::prost::Name for UgcSection {
    const NAME: &'static str = "UgcSection";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UgcSection".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UgcSection".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpDataModule {
    ///
    #[prost(message, repeated, tag = "1")]
    pub ext_tabs: ::prost::alloc::vec::Vec<ExtTab>,
    ///
    #[prost(int32, tag = "2")]
    pub idx: i32,
    ///
    #[prost(string, tag = "3")]
    pub protocol_url: ::prost::alloc::string::String,
}
impl ::prost::Name for UpDataModule {
    const NAME: &'static str = "UpDataModule";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UpDataModule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UpDataModule".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpLikeImg {
    ///
    #[prost(string, tag = "1")]
    pub pre_img: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub suc_img: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub r#type: i64,
}
impl ::prost::Name for UpLikeImg {
    const NAME: &'static str = "UpLikeImg";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UpLikeImg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UpLikeImg".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub follower: i64,
}
impl ::prost::Name for User {
    const NAME: &'static str = "User";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.User".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.User".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserActivity {
    ///
    #[prost(int32, tag = "1")]
    pub user_state: i32,
    ///
    #[prost(int64, tag = "2")]
    pub last_checkin_date: i64,
    ///
    #[prost(int32, tag = "3")]
    pub checkin_today: i32,
    ///
    #[prost(int32, tag = "4")]
    pub user_day_count: i32,
    ///
    #[prost(int32, tag = "5")]
    pub user_view_time: i32,
    ///
    #[prost(string, tag = "6")]
    pub portrait: ::prost::alloc::string::String,
}
impl ::prost::Name for UserActivity {
    const NAME: &'static str = "UserActivity";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UserActivity".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UserActivity".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserList {
    ///
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<User>,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for UserList {
    const NAME: &'static str = "UserList";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UserList".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UserList".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserStatus {
    ///
    #[prost(int32, tag = "1")]
    pub show: i32,
    ///
    #[prost(int32, tag = "2")]
    pub follow: i32,
}
impl ::prost::Name for UserStatus {
    const NAME: &'static str = "UserStatus";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.UserStatus".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.UserStatus".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewEpisode {
    ///
    #[prost(int64, tag = "1")]
    pub ep_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub badge_type: i32,
    ///
    #[prost(message, optional, tag = "4")]
    pub badge_info: ::core::option::Option<BadgeInfo>,
    ///
    #[prost(int32, tag = "5")]
    pub duration: i32,
    ///
    #[prost(int32, tag = "6")]
    pub status: i32,
    ///
    #[prost(string, tag = "7")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "8")]
    pub aid: i64,
    ///
    #[prost(string, tag = "9")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub movie_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub long_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub toast_title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "14")]
    pub cid: i64,
    ///
    #[prost(string, tag = "15")]
    pub from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "16")]
    pub share_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "17")]
    pub share_copy: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "18")]
    pub short_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "19")]
    pub vid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "20")]
    pub release_date: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "21")]
    pub dimension: ::core::option::Option<Dimension>,
    ///
    #[prost(message, optional, tag = "22")]
    pub rights: ::core::option::Option<Rights>,
    ///
    #[prost(message, optional, tag = "23")]
    pub interaction: ::core::option::Option<Interaction>,
    ///
    #[prost(string, tag = "24")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "25")]
    pub archive_attr: i32,
    ///
    #[prost(string, tag = "26")]
    pub link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "27")]
    pub link_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "28")]
    pub bmid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "29")]
    pub pub_time: i64,
    ///
    #[prost(int32, tag = "30")]
    pub pv: i32,
    ///
    #[prost(int32, tag = "31")]
    pub ep_index: i32,
    ///
    #[prost(int32, tag = "32")]
    pub section_index: i32,
    ///
    #[prost(message, repeated, tag = "33")]
    pub up_infos: ::prost::alloc::vec::Vec<Staff>,
    ///
    #[prost(message, optional, tag = "34")]
    pub up_info: ::core::option::Option<Staff>,
    ///
    #[prost(string, tag = "35")]
    pub dialog_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "36")]
    pub toast_type: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "37")]
    pub multi_view_eps: ::prost::alloc::vec::Vec<MultiViewEp>,
    ///
    #[prost(bool, tag = "38")]
    pub is_sub_view: bool,
    ///
    #[prost(bool, tag = "39")]
    pub is_view_hide: bool,
    ///
    #[prost(string, tag = "40")]
    pub jump_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "41")]
    pub stat_for_unity: ::core::option::Option<Stat>,
    ///
    #[prost(map = "string, string", tag = "42")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for ViewEpisode {
    const NAME: &'static str = "ViewEpisode";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ViewEpisode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ViewEpisode".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewMaterial {
    ///
    #[prost(int64, tag = "1")]
    pub oid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub mid: i64,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub jump_url: ::prost::alloc::string::String,
}
impl ::prost::Name for ViewMaterial {
    const NAME: &'static str = "ViewMaterial";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.ViewMaterial".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.ViewMaterial".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vip {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int32, tag = "2")]
    pub vip_status: i32,
    ///
    #[prost(int32, tag = "3")]
    pub theme_type: i32,
    ///
    #[prost(message, optional, tag = "4")]
    pub label: ::core::option::Option<VipLabel>,
    ///
    #[prost(int32, tag = "5")]
    pub is_vip: i32,
}
impl ::prost::Name for Vip {
    const NAME: &'static str = "Vip";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.Vip".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.Vip".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VipLabel {
    ///
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub label_theme: ::prost::alloc::string::String,
}
impl ::prost::Name for VipLabel {
    const NAME: &'static str = "VipLabel";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.VipLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.VipLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WikiInfo {
    ///
    #[prost(string, tag = "1")]
    pub wiki_label: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub wiki_url: ::prost::alloc::string::String,
}
impl ::prost::Name for WikiInfo {
    const NAME: &'static str = "WikiInfo";
    const PACKAGE: &'static str = "bilibili.mall.tab3.viewunite.common";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.mall.tab3.viewunite.common.WikiInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.mall.tab3.viewunite.common.WikiInfo".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AttentionRelationStatus {
    ///
    ArsNone = 0,
    ///
    ArsN0relation = 1,
    ///
    ArsFollowhim = 2,
    ///
    ArsFollowme = 3,
    ///
    ArsBuddy = 4,
    ///
    ArsSpecial = 5,
    ///
    ArsCancelblock = 6,
}
impl AttentionRelationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ArsNone => "ARS_NONE",
            Self::ArsN0relation => "ARS_N0RELATION",
            Self::ArsFollowhim => "ARS_FOLLOWHIM",
            Self::ArsFollowme => "ARS_FOLLOWME",
            Self::ArsBuddy => "ARS_BUDDY",
            Self::ArsSpecial => "ARS_SPECIAL",
            Self::ArsCancelblock => "ARS_CANCELBLOCK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ARS_NONE" => Some(Self::ArsNone),
            "ARS_N0RELATION" => Some(Self::ArsN0relation),
            "ARS_FOLLOWHIM" => Some(Self::ArsFollowhim),
            "ARS_FOLLOWME" => Some(Self::ArsFollowme),
            "ARS_BUDDY" => Some(Self::ArsBuddy),
            "ARS_SPECIAL" => Some(Self::ArsSpecial),
            "ARS_CANCELBLOCK" => Some(Self::ArsCancelblock),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DescType {
    ///
    Unknown = 0,
    ///
    Text = 1,
    ///
    At = 2,
}
impl DescType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "DescTypeUnknown",
            Self::Text => "DescTypeText",
            Self::At => "DescTypeAt",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DescTypeUnknown" => Some(Self::Unknown),
            "DescTypeText" => Some(Self::Text),
            "DescTypeAt" => Some(Self::At),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExtType {
    ///
    ExtNone = 0,
    ///
    ExtDataCenter = 1,
    ///
    ExtDataEarnings = 2,
}
impl ExtType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ExtNone => "ExtNone",
            Self::ExtDataCenter => "ExtDataCenter",
            Self::ExtDataEarnings => "ExtDataEarnings",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ExtNone" => Some(Self::ExtNone),
            "ExtDataCenter" => Some(Self::ExtDataCenter),
            "ExtDataEarnings" => Some(Self::ExtDataEarnings),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HonorJumpType {
    ///
    Unknown = 0,
    ///
    HonorOpenUrl = 1,
    ///
    HonorHalfScreen = 2,
}
impl HonorJumpType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "HONOR_JUMP_TYPE_UNKNOWN",
            Self::HonorOpenUrl => "HONOR_OPEN_URL",
            Self::HonorHalfScreen => "HONOR_HALF_SCREEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HONOR_JUMP_TYPE_UNKNOWN" => Some(Self::Unknown),
            "HONOR_OPEN_URL" => Some(Self::HonorOpenUrl),
            "HONOR_HALF_SCREEN" => Some(Self::HonorHalfScreen),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HonorType {
    ///
    HonorNone = 0,
    ///
    Playlet = 1,
    ///
    Argue = 2,
    ///
    Notice = 3,
    ///
    Guidance = 4,
    ///
    HonorBiliRank = 5,
    ///
    HonorWeeklyRank = 6,
    ///
    HonorDailyRank = 7,
    ///
    HonorChannel = 8,
    ///
    HonorMusic = 9,
    ///
    HonorReply = 10,
}
impl HonorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HonorNone => "HONOR_NONE",
            Self::Playlet => "PLAYLET",
            Self::Argue => "ARGUE",
            Self::Notice => "NOTICE",
            Self::Guidance => "GUIDANCE",
            Self::HonorBiliRank => "HONOR_BILI_RANK",
            Self::HonorWeeklyRank => "HONOR_WEEKLY_RANK",
            Self::HonorDailyRank => "HONOR_DAILY_RANK",
            Self::HonorChannel => "HONOR_CHANNEL",
            Self::HonorMusic => "HONOR_MUSIC",
            Self::HonorReply => "HONOR_REPLY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HONOR_NONE" => Some(Self::HonorNone),
            "PLAYLET" => Some(Self::Playlet),
            "ARGUE" => Some(Self::Argue),
            "NOTICE" => Some(Self::Notice),
            "GUIDANCE" => Some(Self::Guidance),
            "HONOR_BILI_RANK" => Some(Self::HonorBiliRank),
            "HONOR_WEEKLY_RANK" => Some(Self::HonorWeeklyRank),
            "HONOR_DAILY_RANK" => Some(Self::HonorDailyRank),
            "HONOR_CHANNEL" => Some(Self::HonorChannel),
            "HONOR_MUSIC" => Some(Self::HonorMusic),
            "HONOR_REPLY" => Some(Self::HonorReply),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum JumpType {
    ///
    Unknown = 0,
    ///
    OpenUrl = 1,
    ///
    Refresh = 2,
    ///
    HalfScreen = 3,
    ///
    OpenUrlByOuterBrowser = 4,
}
impl JumpType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "JUMP_TYPE_UNKNOWN",
            Self::OpenUrl => "OPEN_URL",
            Self::Refresh => "REFRESH",
            Self::HalfScreen => "HALF_SCREEN",
            Self::OpenUrlByOuterBrowser => "OPEN_URL_BY_OUTER_BROWSER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "JUMP_TYPE_UNKNOWN" => Some(Self::Unknown),
            "OPEN_URL" => Some(Self::OpenUrl),
            "REFRESH" => Some(Self::Refresh),
            "HALF_SCREEN" => Some(Self::HalfScreen),
            "OPEN_URL_BY_OUTER_BROWSER" => Some(Self::OpenUrlByOuterBrowser),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum KingPositionType {
    ///
    KingPosUnspecified = 0,
    ///
    Like = 1,
    ///
    Dislike = 2,
    ///
    Coin = 3,
    ///
    Fav = 4,
    ///
    Share = 5,
    ///
    Cache = 6,
    ///
    Danmaku = 7,
}
impl KingPositionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KingPosUnspecified => "KING_POS_UNSPECIFIED",
            Self::Like => "LIKE",
            Self::Dislike => "DISLIKE",
            Self::Coin => "COIN",
            Self::Fav => "FAV",
            Self::Share => "SHARE",
            Self::Cache => "CACHE",
            Self::Danmaku => "DANMAKU",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KING_POS_UNSPECIFIED" => Some(Self::KingPosUnspecified),
            "LIKE" => Some(Self::Like),
            "DISLIKE" => Some(Self::Dislike),
            "COIN" => Some(Self::Coin),
            "FAV" => Some(Self::Fav),
            "SHARE" => Some(Self::Share),
            "CACHE" => Some(Self::Cache),
            "DANMAKU" => Some(Self::Danmaku),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ModuleType {
    ///
    Unknown = 0,
    ///
    OgvIntroduction = 1,
    ///
    OgvTitle = 2,
    ///
    UgcHeadline = 3,
    ///
    UgcIntroduction = 4,
    ///
    KingPosition = 5,
    ///
    MasterUserList = 6,
    ///
    Staffs = 7,
    ///
    Honor = 8,
    ///
    Owner = 9,
    ///
    Page = 10,
    ///
    ActivityReserve = 11,
    ///
    LiveOrder = 12,
    ///
    Positive = 13,
    ///
    Section = 14,
    ///
    Relate = 15,
    ///
    Pugv = 16,
    ///
    CollectionCard = 17,
    ///
    Activity = 18,
    ///
    Character = 19,
    ///
    FollowLayer = 20,
    ///
    OgvSeasons = 21,
    ///
    UgcSeason = 22,
    ///
    OgvLiveReserve = 23,
    ///
    CombinationEpisode = 24,
    ///
    Sponsor = 25,
    ///
    ActivityEntrance = 26,
    ///
    TheatreHotTopic = 27,
    ///
    RelatedRecommend = 28,
    ///
    PayBar = 29,
    ///
    Banner = 30,
    ///
    Audio = 31,
    ///
    AggCard = 32,
    ///
    SingleEp = 33,
    ///
    LikeComment = 34,
    ///
    AttentionRecommend = 35,
    ///
    Covenanter = 36,
    ///
    Specialtag = 37,
    ///
    Updata = 38,
    ///
    ProfessionApproval = 39,
}
impl ModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::OgvIntroduction => "OGV_INTRODUCTION",
            Self::OgvTitle => "OGV_TITLE",
            Self::UgcHeadline => "UGC_HEADLINE",
            Self::UgcIntroduction => "UGC_INTRODUCTION",
            Self::KingPosition => "KING_POSITION",
            Self::MasterUserList => "MASTER_USER_LIST",
            Self::Staffs => "STAFFS",
            Self::Honor => "HONOR",
            Self::Owner => "OWNER",
            Self::Page => "PAGE",
            Self::ActivityReserve => "ACTIVITY_RESERVE",
            Self::LiveOrder => "LIVE_ORDER",
            Self::Positive => "POSITIVE",
            Self::Section => "SECTION",
            Self::Relate => "RELATE",
            Self::Pugv => "PUGV",
            Self::CollectionCard => "COLLECTION_CARD",
            Self::Activity => "ACTIVITY",
            Self::Character => "CHARACTER",
            Self::FollowLayer => "FOLLOW_LAYER",
            Self::OgvSeasons => "OGV_SEASONS",
            Self::UgcSeason => "UGC_SEASON",
            Self::OgvLiveReserve => "OGV_LIVE_RESERVE",
            Self::CombinationEpisode => "COMBINATION_EPISODE",
            Self::Sponsor => "SPONSOR",
            Self::ActivityEntrance => "ACTIVITY_ENTRANCE",
            Self::TheatreHotTopic => "THEATRE_HOT_TOPIC",
            Self::RelatedRecommend => "RELATED_RECOMMEND",
            Self::PayBar => "PAY_BAR",
            Self::Banner => "BANNER",
            Self::Audio => "AUDIO",
            Self::AggCard => "AGG_CARD",
            Self::SingleEp => "SINGLE_EP",
            Self::LikeComment => "LIKE_COMMENT",
            Self::AttentionRecommend => "ATTENTION_RECOMMEND",
            Self::Covenanter => "COVENANTER",
            Self::Specialtag => "SPECIALTAG",
            Self::Updata => "UPDATA",
            Self::ProfessionApproval => "PROFESSION_APPROVAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "OGV_INTRODUCTION" => Some(Self::OgvIntroduction),
            "OGV_TITLE" => Some(Self::OgvTitle),
            "UGC_HEADLINE" => Some(Self::UgcHeadline),
            "UGC_INTRODUCTION" => Some(Self::UgcIntroduction),
            "KING_POSITION" => Some(Self::KingPosition),
            "MASTER_USER_LIST" => Some(Self::MasterUserList),
            "STAFFS" => Some(Self::Staffs),
            "HONOR" => Some(Self::Honor),
            "OWNER" => Some(Self::Owner),
            "PAGE" => Some(Self::Page),
            "ACTIVITY_RESERVE" => Some(Self::ActivityReserve),
            "LIVE_ORDER" => Some(Self::LiveOrder),
            "POSITIVE" => Some(Self::Positive),
            "SECTION" => Some(Self::Section),
            "RELATE" => Some(Self::Relate),
            "PUGV" => Some(Self::Pugv),
            "COLLECTION_CARD" => Some(Self::CollectionCard),
            "ACTIVITY" => Some(Self::Activity),
            "CHARACTER" => Some(Self::Character),
            "FOLLOW_LAYER" => Some(Self::FollowLayer),
            "OGV_SEASONS" => Some(Self::OgvSeasons),
            "UGC_SEASON" => Some(Self::UgcSeason),
            "OGV_LIVE_RESERVE" => Some(Self::OgvLiveReserve),
            "COMBINATION_EPISODE" => Some(Self::CombinationEpisode),
            "SPONSOR" => Some(Self::Sponsor),
            "ACTIVITY_ENTRANCE" => Some(Self::ActivityEntrance),
            "THEATRE_HOT_TOPIC" => Some(Self::TheatreHotTopic),
            "RELATED_RECOMMEND" => Some(Self::RelatedRecommend),
            "PAY_BAR" => Some(Self::PayBar),
            "BANNER" => Some(Self::Banner),
            "AUDIO" => Some(Self::Audio),
            "AGG_CARD" => Some(Self::AggCard),
            "SINGLE_EP" => Some(Self::SingleEp),
            "LIKE_COMMENT" => Some(Self::LikeComment),
            "ATTENTION_RECOMMEND" => Some(Self::AttentionRecommend),
            "COVENANTER" => Some(Self::Covenanter),
            "SPECIALTAG" => Some(Self::Specialtag),
            "UPDATA" => Some(Self::Updata),
            "PROFESSION_APPROVAL" => Some(Self::ProfessionApproval),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OccupationType {
    ///
    Staff = 0,
    ///
    Cast = 1,
    ///
    UnknownType = -1,
}
impl OccupationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Staff => "STAFF",
            Self::Cast => "CAST",
            Self::UnknownType => "UNKNOWN_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAFF" => Some(Self::Staff),
            "CAST" => Some(Self::Cast),
            "UNKNOWN_TYPE" => Some(Self::UnknownType),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelateCardType {
    ///
    CardTypeUnknown = 0,
    ///
    Av = 1,
    ///
    Bangumi = 2,
    ///
    Resource = 3,
    ///
    Game = 4,
    ///
    Cm = 5,
    ///
    Live = 6,
    ///
    AiRecommend = 7,
    ///
    BangumiAv = 8,
    ///
    BangumiUgc = 9,
    ///
    Special = 10,
}
impl RelateCardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CardTypeUnknown => "CARD_TYPE_UNKNOWN",
            Self::Av => "AV",
            Self::Bangumi => "BANGUMI",
            Self::Resource => "RESOURCE",
            Self::Game => "GAME",
            Self::Cm => "CM",
            Self::Live => "LIVE",
            Self::AiRecommend => "AI_RECOMMEND",
            Self::BangumiAv => "BANGUMI_AV",
            Self::BangumiUgc => "BANGUMI_UGC",
            Self::Special => "SPECIAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CARD_TYPE_UNKNOWN" => Some(Self::CardTypeUnknown),
            "AV" => Some(Self::Av),
            "BANGUMI" => Some(Self::Bangumi),
            "RESOURCE" => Some(Self::Resource),
            "GAME" => Some(Self::Game),
            "CM" => Some(Self::Cm),
            "LIVE" => Some(Self::Live),
            "AI_RECOMMEND" => Some(Self::AiRecommend),
            "BANGUMI_AV" => Some(Self::BangumiAv),
            "BANGUMI_UGC" => Some(Self::BangumiUgc),
            "SPECIAL" => Some(Self::Special),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReserveBizType {
    ///
    BizTypeNone = 0,
    ///
    BizTypeReserveActivity = 1,
    ///
    BizTypeFavSeason = 2,
}
impl ReserveBizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BizTypeNone => "BizTypeNone",
            Self::BizTypeReserveActivity => "BizTypeReserveActivity",
            Self::BizTypeFavSeason => "BizTypeFavSeason",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BizTypeNone" => Some(Self::BizTypeNone),
            "BizTypeReserveActivity" => Some(Self::BizTypeReserveActivity),
            "BizTypeFavSeason" => Some(Self::BizTypeFavSeason),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonType {
    ///
    Unknown = 0,
    ///
    Base = 1,
    ///
    Good = 2,
}
impl SeasonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "Unknown",
            Self::Base => "Base",
            Self::Good => "Good",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Unknown" => Some(Self::Unknown),
            "Base" => Some(Self::Base),
            "Good" => Some(Self::Good),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SerialSeasonCoverStyle {
    ///
    Title = 0,
    ///
    Picture = 1,
    ///
    Unknown = -1,
}
impl SerialSeasonCoverStyle {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Title => "TITLE",
            Self::Picture => "PICTURE",
            Self::Unknown => "SERIAL_SEASON_COVER_STYLE_UNKNOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TITLE" => Some(Self::Title),
            "PICTURE" => Some(Self::Picture),
            "SERIAL_SEASON_COVER_STYLE_UNKNOWN" => Some(Self::Unknown),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShowStyle {
    ///
    Unknown = 0,
    ///
    OneRowOneColumn = 1,
    ///
    OneRowMultiColumn = 2,
    ///
    OneColumnMultiRow = 3,
}
impl ShowStyle {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "SHOW_STYLE_UNKNOWN",
            Self::OneRowOneColumn => "ONE_ROW_ONE_COLUMN",
            Self::OneRowMultiColumn => "ONE_ROW_MULTI_COLUMN",
            Self::OneColumnMultiRow => "ONE_COLUMN_MULTI_ROW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SHOW_STYLE_UNKNOWN" => Some(Self::Unknown),
            "ONE_ROW_ONE_COLUMN" => Some(Self::OneRowOneColumn),
            "ONE_ROW_MULTI_COLUMN" => Some(Self::OneRowMultiColumn),
            "ONE_COLUMN_MULTI_ROW" => Some(Self::OneColumnMultiRow),
            _ => None,
        }
    }
}
