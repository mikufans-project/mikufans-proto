// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddWatchExposeRecordReq {
    ///
    #[prost(string, tag = "1")]
    pub track_info: ::prost::alloc::string::String,
}
impl ::prost::Name for AddWatchExposeRecordReq {
    const NAME: &'static str = "AddWatchExposeRecordReq";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.AddWatchExposeRecordReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.AddWatchExposeRecordReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddWatchExposeRecordResp {}
impl ::prost::Name for AddWatchExposeRecordResp {
    const NAME: &'static str = "AddWatchExposeRecordResp";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.AddWatchExposeRecordResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.AddWatchExposeRecordResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveCardInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub duration: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub view: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub danmaku: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "6")]
    pub is_unread: bool,
    ///
    #[prost(string, tag = "7")]
    pub jump_url: ::prost::alloc::string::String,
}
impl ::prost::Name for ArchiveCardInfo {
    const NAME: &'static str = "ArchiveCardInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.ArchiveCardInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.ArchiveCardInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalendarCard {
    ///
    #[prost(enumeration = "WatchBizType", tag = "1")]
    pub biz_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub biz_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub anchor_time: i64,
    ///
    #[prost(enumeration = "CalendarCardType", tag = "4")]
    pub calendar_card_type: i32,
    ///
    #[prost(message, optional, tag = "5")]
    pub up_info: ::core::option::Option<UpInfo>,
    ///
    #[prost(message, optional, tag = "6")]
    pub three_more_info: ::core::option::Option<ThreeMoreInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub archive_card_info: ::core::option::Option<ArchiveCardInfo>,
    ///
    #[prost(message, optional, tag = "8")]
    pub live_card_info: ::core::option::Option<LiveCardInfo>,
    ///
    #[prost(message, optional, tag = "9")]
    pub reserve_card_info: ::core::option::Option<ReserveCardInfo>,
    ///
    #[prost(message, optional, tag = "10")]
    pub ogv_card_info: ::core::option::Option<OgvCardInfo>,
    ///
    #[prost(map = "string, string", tag = "11")]
    pub report: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
impl ::prost::Name for CalendarCard {
    const NAME: &'static str = "CalendarCard";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.CalendarCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.CalendarCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalendarDate {
    ///
    #[prost(int64, tag = "1")]
    pub item_date: i64,
    ///
    #[prost(enumeration = "CalendarPointType", tag = "2")]
    pub point_type: i32,
    ///
    #[prost(message, repeated, tag = "3")]
    pub card_list: ::prost::alloc::vec::Vec<CalendarCard>,
}
impl ::prost::Name for CalendarDate {
    const NAME: &'static str = "CalendarDate";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.CalendarDate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.CalendarDate".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CalendarTimeRange {
    ///
    #[prost(int64, tag = "1")]
    pub begin_date: i64,
    ///
    #[prost(int64, tag = "2")]
    pub end_date: i64,
}
impl ::prost::Name for CalendarTimeRange {
    const NAME: &'static str = "CalendarTimeRange";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.CalendarTimeRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.CalendarTimeRange".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelCalendarCardReq {
    ///
    #[prost(enumeration = "WatchBizType", tag = "1")]
    pub biz_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub biz_id: ::prost::alloc::string::String,
}
impl ::prost::Name for DelCalendarCardReq {
    const NAME: &'static str = "DelCalendarCardReq";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.DelCalendarCardReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.DelCalendarCardReq".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DelCalendarCardResp {}
impl ::prost::Name for DelCalendarCardResp {
    const NAME: &'static str = "DelCalendarCardResp";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.DelCalendarCardResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.DelCalendarCardResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveCardInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub view: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub live_info: ::core::option::Option<LiveInfo>,
}
impl ::prost::Name for LiveCardInfo {
    const NAME: &'static str = "LiveCardInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.LiveCardInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.LiveCardInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveInfo {
    ///
    #[prost(int64, tag = "1")]
    pub live_status: i64,
    ///
    #[prost(string, tag = "2")]
    pub live_badge_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub end_text: ::prost::alloc::string::String,
}
impl ::prost::Name for LiveInfo {
    const NAME: &'static str = "LiveInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.LiveInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.LiveInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OgvCardInfo {}
impl ::prost::Name for OgvCardInfo {
    const NAME: &'static str = "OgvCardInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.OgvCardInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.OgvCardInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveCardInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub reserve_total: i64,
    ///
    #[prost(int64, tag = "3")]
    pub reserve_state: i64,
}
impl ::prost::Name for ReserveCardInfo {
    const NAME: &'static str = "ReserveCardInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.ReserveCardInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.ReserveCardInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreeMoreInfo {
    ///
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<three_more_info::ThreeMoreItem>,
}
/// Nested message and enum types in `ThreeMoreInfo`.
pub mod three_more_info {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ThreeMoreItem {
        ///
        #[prost(string, tag = "1")]
        pub text: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "2")]
        pub icon: ::prost::alloc::string::String,
    }
    impl ::prost::Name for ThreeMoreItem {
        const NAME: &'static str = "ThreeMoreItem";
        const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "bilibili.community.interfacess.watch.v1.ThreeMoreInfo.ThreeMoreItem".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/bilibili.community.interfacess.watch.v1.ThreeMoreInfo.ThreeMoreItem".into()
        }
    }
}
impl ::prost::Name for ThreeMoreInfo {
    const NAME: &'static str = "ThreeMoreInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.ThreeMoreInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.ThreeMoreInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpInfo {
    ///
    #[prost(int64, tag = "1")]
    pub up_mid: i64,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub avatar: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
    ///
    #[prost(string, tag = "4")]
    pub jump_url: ::prost::alloc::string::String,
}
impl ::prost::Name for UpInfo {
    const NAME: &'static str = "UpInfo";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.UpInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.UpInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WatchCalendarReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub calendar_time_range: ::core::option::Option<CalendarTimeRange>,
}
impl ::prost::Name for WatchCalendarReq {
    const NAME: &'static str = "WatchCalendarReq";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.WatchCalendarReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.WatchCalendarReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchCalendarResp {
    ///
    #[prost(message, repeated, tag = "1")]
    pub calendar_item: ::prost::alloc::vec::Vec<CalendarDate>,
}
impl ::prost::Name for WatchCalendarResp {
    const NAME: &'static str = "WatchCalendarResp";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.WatchCalendarResp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.WatchCalendarResp".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchItemExpose {
    ///
    #[prost(enumeration = "WatchBizType", tag = "1")]
    pub biz_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub biz_id: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "WatchItemExposeFrom", tag = "3")]
    pub expose_from: i32,
}
impl ::prost::Name for WatchItemExpose {
    const NAME: &'static str = "WatchItemExpose";
    const PACKAGE: &'static str = "bilibili.community.interfacess.watch.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.community.interfacess.watch.v1.WatchItemExpose".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.community.interfacess.watch.v1.WatchItemExpose".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CalendarCardType {
    ///
    Default = 0,
    ///
    Archive = 1,
    ///
    Live = 2,
    ///
    Reserve = 3,
    ///
    Ogv = 4,
}
impl CalendarCardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "CALENDAR_CARD_TYPE_DEFAULT",
            Self::Archive => "CALENDAR_CARD_TYPE_ARCHIVE",
            Self::Live => "CALENDAR_CARD_TYPE_LIVE",
            Self::Reserve => "CALENDAR_CARD_TYPE_RESERVE",
            Self::Ogv => "CALENDAR_CARD_TYPE_OGV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CALENDAR_CARD_TYPE_DEFAULT" => Some(Self::Default),
            "CALENDAR_CARD_TYPE_ARCHIVE" => Some(Self::Archive),
            "CALENDAR_CARD_TYPE_LIVE" => Some(Self::Live),
            "CALENDAR_CARD_TYPE_RESERVE" => Some(Self::Reserve),
            "CALENDAR_CARD_TYPE_OGV" => Some(Self::Ogv),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CalendarPointType {
    ///
    Default = 0,
    ///
    Red = 1,
    ///
    Gray = 2,
}
impl CalendarPointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "CALENDAR_POINT_TYPE_DEFAULT",
            Self::Red => "CALENDAR_POINT_TYPE_RED",
            Self::Gray => "CALENDAR_POINT_TYPE_GRAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CALENDAR_POINT_TYPE_DEFAULT" => Some(Self::Default),
            "CALENDAR_POINT_TYPE_RED" => Some(Self::Red),
            "CALENDAR_POINT_TYPE_GRAY" => Some(Self::Gray),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WatchBizType {
    ///
    Default = 0,
    ///
    Reserve = 1,
    ///
    Archive = 2,
    ///
    Live = 3,
}
impl WatchBizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "WATCH_BIZ_TYPE_DEFAULT",
            Self::Reserve => "WATCH_BIZ_TYPE_RESERVE",
            Self::Archive => "WATCH_BIZ_TYPE_ARCHIVE",
            Self::Live => "WATCH_BIZ_TYPE_LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WATCH_BIZ_TYPE_DEFAULT" => Some(Self::Default),
            "WATCH_BIZ_TYPE_RESERVE" => Some(Self::Reserve),
            "WATCH_BIZ_TYPE_ARCHIVE" => Some(Self::Archive),
            "WATCH_BIZ_TYPE_LIVE" => Some(Self::Live),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WatchItemExposeFrom {
    ///
    Default = 0,
    ///
    UserPage = 1,
}
impl WatchItemExposeFrom {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "WATCH_ITEM_EXPOSE_FROM_DEFAULT",
            Self::UserPage => "WATCH_ITEM_EXPOSE_FROM_USER_PAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WATCH_ITEM_EXPOSE_FROM_DEFAULT" => Some(Self::Default),
            "WATCH_ITEM_EXPOSE_FROM_USER_PAGE" => Some(Self::UserPage),
            _ => None,
        }
    }
}
