// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AbTest {
    ///
    #[prost(map = "string, int32", tag = "1")]
    pub exp: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
impl ::prost::Name for AbTest {
    const NAME: &'static str = "AbTest";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.AbTest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.AbTest".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatalogueInfo {
    ///
    #[prost(message, repeated, tag = "1")]
    pub catalogues: ::prost::alloc::vec::Vec<SeasonCatalogue>,
    ///
    #[prost(message, optional, tag = "2")]
    pub catalogue_live_info: ::core::option::Option<CatalogueLiveInfo>,
    ///
    #[prost(string, tag = "3")]
    pub catalogue_update_text: ::prost::alloc::string::String,
}
impl ::prost::Name for CatalogueInfo {
    const NAME: &'static str = "CatalogueInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.CatalogueInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.CatalogueInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CatalogueLiveInfo {
    ///
    #[prost(int64, tag = "1")]
    pub episode_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub button_text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "LiveStatus", tag = "5")]
    pub status: i32,
}
impl ::prost::Name for CatalogueLiveInfo {
    const NAME: &'static str = "CatalogueLiveInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.CatalogueLiveInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.CatalogueLiveInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CourseCoach {
    ///
    #[prost(string, tag = "1")]
    pub detail_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub directory_url: ::prost::alloc::string::String,
}
impl ::prost::Name for CourseCoach {
    const NAME: &'static str = "CourseCoach";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.CourseCoach".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.CourseCoach".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Courseware {
    ///
    #[prost(int64, tag = "1")]
    pub file_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub file_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub file_type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub file_size: i64,
    ///
    #[prost(string, tag = "5")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub file_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub icon: ::prost::alloc::string::String,
}
impl ::prost::Name for Courseware {
    const NAME: &'static str = "Courseware";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.Courseware".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.Courseware".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CoursewareInfo {
    ///
    #[prost(message, repeated, tag = "1")]
    pub coursewares: ::prost::alloc::vec::Vec<Courseware>,
}
impl ::prost::Name for CoursewareInfo {
    const NAME: &'static str = "CoursewareInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.CoursewareInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.CoursewareInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CredentialInfo {
    ///
    #[prost(bool, tag = "1")]
    pub tab_show: bool,
    ///
    #[prost(bool, tag = "2")]
    pub tab_badge_show: bool,
    ///
    #[prost(string, tag = "3")]
    pub tab_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub credential_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub require_ep: i64,
}
impl ::prost::Name for CredentialInfo {
    const NAME: &'static str = "CredentialInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.CredentialInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.CredentialInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DanmakuControl {
    ///
    #[prost(bool, tag = "1")]
    pub disabled: bool,
    ///
    #[prost(message, optional, tag = "2")]
    pub extra_content: ::core::option::Option<ExtraContent>,
}
impl ::prost::Name for DanmakuControl {
    const NAME: &'static str = "DanmakuControl";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.DanmakuControl".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.DanmakuControl".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Episode {
    ///
    #[prost(enumeration = "EpisodeType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(oneof = "episode::Data", tags = "2, 3")]
    pub data: ::core::option::Option<episode::Data>,
}
/// Nested message and enum types in `Episode`.
pub mod episode {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        ///
        #[prost(message, tag = "2")]
        VideoEpisode(super::VideoEpisode),
        ///
        #[prost(message, tag = "3")]
        LiveEpisode(super::LiveEpisode),
    }
}
impl ::prost::Name for Episode {
    const NAME: &'static str = "Episode";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.Episode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.Episode".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EpisodeDimension {
    ///
    #[prost(int64, tag = "1")]
    pub width: i64,
    ///
    #[prost(int64, tag = "2")]
    pub height: i64,
    ///
    #[prost(int64, tag = "3")]
    pub rotate: i64,
}
impl ::prost::Name for EpisodeDimension {
    const NAME: &'static str = "EpisodeDimension";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.EpisodeDimension".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.EpisodeDimension".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeHistory {
    ///
    #[prost(bool, tag = "1")]
    pub last_play: bool,
    ///
    #[prost(string, tag = "2")]
    pub last_play_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub max_progress: i64,
    ///
    #[prost(string, tag = "4")]
    pub full_watched_text: ::prost::alloc::string::String,
}
impl ::prost::Name for EpisodeHistory {
    const NAME: &'static str = "EpisodeHistory";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.EpisodeHistory".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.EpisodeHistory".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeLabel {
    ///
    #[prost(string, tag = "1")]
    pub type_label: ::prost::alloc::string::String,
}
impl ::prost::Name for EpisodeLabel {
    const NAME: &'static str = "EpisodeLabel";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.EpisodeLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.EpisodeLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeSelectionLabel {
    ///
    #[prost(string, tag = "1")]
    pub type_label: ::prost::alloc::string::String,
}
impl ::prost::Name for EpisodeSelectionLabel {
    const NAME: &'static str = "EpisodeSelectionLabel";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.EpisodeSelectionLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.EpisodeSelectionLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraContent {
    ///
    #[prost(string, tag = "1")]
    pub disabled_reason: ::prost::alloc::string::String,
}
impl ::prost::Name for ExtraContent {
    const NAME: &'static str = "ExtraContent";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.ExtraContent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.ExtraContent".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FragmentVideoMessage {
    ///
    #[prost(bool, tag = "1")]
    pub has_fragment_video: bool,
}
impl ::prost::Name for FragmentVideoMessage {
    const NAME: &'static str = "FragmentVideoMessage";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.FragmentVideoMessage".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.FragmentVideoMessage".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiftInfo {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
impl ::prost::Name for GiftInfo {
    const NAME: &'static str = "GiftInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.GiftInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.GiftInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveEpisode {
    ///
    #[prost(int64, tag = "1")]
    pub episode_id: i64,
    ///
    #[prost(enumeration = "LiveStatus", tag = "2")]
    pub status: i32,
    ///
    #[prost(bool, tag = "3")]
    pub jump: bool,
    ///
    #[prost(int64, tag = "4")]
    pub live_teacher_mid: i64,
    ///
    #[prost(bool, tag = "5")]
    pub show_subscription_prebook_button: bool,
    ///
    #[prost(bool, tag = "6")]
    pub be_subscription_prebook: bool,
    ///
    #[prost(int64, tag = "7")]
    pub index: i64,
    ///
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub play_way_subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "11")]
    pub show_lock_icon: bool,
    ///
    #[prost(message, optional, tag = "12")]
    pub episode_label: ::core::option::Option<EpisodeLabel>,
    ///
    #[prost(message, optional, tag = "13")]
    pub selection_label: ::core::option::Option<EpisodeSelectionLabel>,
}
impl ::prost::Name for LiveEpisode {
    const NAME: &'static str = "LiveEpisode";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.LiveEpisode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.LiveEpisode".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LiveInfo {
    ///
    #[prost(int64, tag = "1")]
    pub episode_id: i64,
    ///
    #[prost(enumeration = "LiveStatus", tag = "2")]
    pub status: i32,
    ///
    #[prost(bool, tag = "3")]
    pub jump: bool,
    ///
    #[prost(int64, tag = "4")]
    pub live_teacher_mid: i64,
    ///
    #[prost(bool, tag = "5")]
    pub show_subscription_prebook_button: bool,
    ///
    #[prost(bool, tag = "6")]
    pub be_subscription_prebook: bool,
}
impl ::prost::Name for LiveInfo {
    const NAME: &'static str = "LiveInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.LiveInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.LiveInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetdiskCourseware {
    ///
    #[prost(int64, tag = "1")]
    pub courseware_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub remark: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub icon: ::prost::alloc::string::String,
}
impl ::prost::Name for NetdiskCourseware {
    const NAME: &'static str = "NetdiskCourseware";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.NetdiskCourseware".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.NetdiskCourseware".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetdiskCoursewareInfo {
    ///
    #[prost(message, repeated, tag = "1")]
    pub coursewares: ::prost::alloc::vec::Vec<NetdiskCourseware>,
}
impl ::prost::Name for NetdiskCoursewareInfo {
    const NAME: &'static str = "NetdiskCoursewareInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.NetdiskCoursewareInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.NetdiskCoursewareInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationArea {
    ///
    #[prost(message, repeated, tag = "1")]
    pub buttons: ::prost::alloc::vec::Vec<OperationAreaButton>,
}
impl ::prost::Name for OperationArea {
    const NAME: &'static str = "OperationArea";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.OperationArea".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.OperationArea".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationAreaButton {
    ///
    #[prost(enumeration = "OperationAreaButtonType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "3")]
    pub disabled: bool,
    ///
    #[prost(string, tag = "4")]
    pub link: ::prost::alloc::string::String,
}
impl ::prost::Name for OperationAreaButton {
    const NAME: &'static str = "OperationAreaButton";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.OperationAreaButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.OperationAreaButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PostPurchaseInfo {
    ///
    #[prost(string, tag = "1")]
    pub pop_up_pic: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub pop_up_interval: i64,
}
impl ::prost::Name for PostPurchaseInfo {
    const NAME: &'static str = "PostPurchaseInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.PostPurchaseInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.PostPurchaseInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonCatalogue {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub index: i64,
    ///
    #[prost(int64, tag = "3")]
    pub start_ep_index: i64,
    ///
    #[prost(int64, tag = "4")]
    pub end_ep_index: i64,
}
impl ::prost::Name for SeasonCatalogue {
    const NAME: &'static str = "SeasonCatalogue";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonCatalogue".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonCatalogue".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonCoupon {
    ///
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub start_time: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub expire_time: ::prost::alloc::string::String,
    ///
    #[prost(double, tag = "5")]
    pub amount: f64,
    ///
    #[prost(string, tag = "6")]
    pub show_amount: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "SeasonCouponStatus", tag = "7")]
    pub status: i32,
    ///
    #[prost(enumeration = "SeasonCouponType", tag = "8")]
    pub coupon_type: i32,
    ///
    #[prost(string, tag = "9")]
    pub short_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub expire_minute: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub use_scope: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub discount_amount: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "13")]
    pub receive_expire_time: i64,
    ///
    #[prost(int64, tag = "14")]
    pub use_expire_time: i64,
    ///
    #[prost(string, tag = "15")]
    pub scene_mark: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "16")]
    pub scene_background_img: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "17")]
    pub scene_benefit_img: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "18")]
    pub scene_countdown: bool,
}
impl ::prost::Name for SeasonCoupon {
    const NAME: &'static str = "SeasonCoupon";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonCoupon".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonCoupon".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonCustom {
    ///
    #[prost(message, optional, tag = "1")]
    pub water_mark: ::core::option::Option<WaterMark>,
    ///
    #[prost(message, optional, tag = "2")]
    pub danmaku_control: ::core::option::Option<DanmakuControl>,
}
impl ::prost::Name for SeasonCustom {
    const NAME: &'static str = "SeasonCustom";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonCustom".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonCustom".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonOverview {
    ///
    #[prost(int64, tag = "1")]
    pub season_id: i64,
    ///
    #[prost(bool, tag = "2")]
    pub support_cash: bool,
    ///
    #[prost(enumeration = "SeasonStatus", tag = "3")]
    pub status: i32,
    ///
    #[prost(enumeration = "SeasonType", tag = "4")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "5")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for SeasonOverview {
    const NAME: &'static str = "SeasonOverview";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonOverview".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonOverview".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonPayment {
    ///
    #[prost(string, tag = "1")]
    pub price_unit: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub discount_price: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub discount_price_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub original_price: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub original_price_desc: ::prost::alloc::string::String,
}
impl ::prost::Name for SeasonPayment {
    const NAME: &'static str = "SeasonPayment";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonPayment".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonPayment".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeasonSection {
    ///
    #[prost(int64, tag = "1")]
    pub section_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "SeasonSectionType", tag = "3")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "4")]
    pub coursewares: ::prost::alloc::vec::Vec<Courseware>,
    ///
    #[prost(message, repeated, tag = "5")]
    pub episodes: ::prost::alloc::vec::Vec<Episode>,
}
impl ::prost::Name for SeasonSection {
    const NAME: &'static str = "SeasonSection";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonSection".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonSection".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SeasonStat {
    ///
    #[prost(int64, tag = "1")]
    pub fav: i64,
    ///
    #[prost(int64, tag = "2")]
    pub share: i64,
}
impl ::prost::Name for SeasonStat {
    const NAME: &'static str = "SeasonStat";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SeasonStat".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SeasonStat".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SectionInfo {
    ///
    #[prost(message, repeated, tag = "1")]
    pub sections: ::prost::alloc::vec::Vec<SeasonSection>,
}
impl ::prost::Name for SectionInfo {
    const NAME: &'static str = "SectionInfo";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.SectionInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.SectionInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoEpisode {
    ///
    #[prost(message, repeated, tag = "1")]
    pub coursewares: ::prost::alloc::vec::Vec<Courseware>,
    ///
    #[prost(int64, tag = "2")]
    pub index: i64,
    ///
    #[prost(enumeration = "EpisodeStatus", tag = "3")]
    pub status: i32,
    ///
    #[prost(int64, tag = "4")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "5")]
    pub cid: i64,
    ///
    #[prost(string, tag = "6")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub play_way_subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub duration: i64,
    ///
    #[prost(bool, tag = "10")]
    pub can_switch: bool,
    ///
    #[prost(bool, tag = "11")]
    pub can_play: bool,
    ///
    #[prost(bool, tag = "12")]
    pub show_lock_icon: bool,
    ///
    #[prost(message, optional, tag = "13")]
    pub episode_label: ::core::option::Option<EpisodeLabel>,
    ///
    #[prost(message, optional, tag = "14")]
    pub selection_label: ::core::option::Option<EpisodeSelectionLabel>,
    ///
    #[prost(message, optional, tag = "15")]
    pub history: ::core::option::Option<EpisodeHistory>,
    ///
    #[prost(enumeration = "VideoPlayWay", tag = "16")]
    pub play_way: i32,
    ///
    #[prost(int64, tag = "17")]
    pub episode_id: i64,
    ///
    #[prost(string, tag = "18")]
    pub share_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "19")]
    pub dimension: ::core::option::Option<EpisodeDimension>,
}
impl ::prost::Name for VideoEpisode {
    const NAME: &'static str = "VideoEpisode";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.VideoEpisode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.VideoEpisode".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewPugvAny {
    ///
    #[prost(message, optional, tag = "1")]
    pub season_overview: ::core::option::Option<SeasonOverview>,
    ///
    #[prost(message, optional, tag = "2")]
    pub season_payment: ::core::option::Option<SeasonPayment>,
    ///
    #[prost(message, optional, tag = "3")]
    pub season_coupon: ::core::option::Option<SeasonCoupon>,
    ///
    #[prost(message, optional, tag = "4")]
    pub catalogue_info: ::core::option::Option<CatalogueInfo>,
    ///
    #[prost(message, optional, tag = "5")]
    pub season_custom: ::core::option::Option<SeasonCustom>,
    ///
    #[prost(message, optional, tag = "6")]
    pub courseware_info: ::core::option::Option<CoursewareInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub course_coach: ::core::option::Option<CourseCoach>,
    ///
    #[prost(message, optional, tag = "8")]
    pub section_info: ::core::option::Option<SectionInfo>,
    ///
    #[prost(message, optional, tag = "9")]
    pub ab_test: ::core::option::Option<AbTest>,
    ///
    #[prost(message, optional, tag = "10")]
    pub operation_area: ::core::option::Option<OperationArea>,
    ///
    #[prost(message, optional, tag = "11")]
    pub season_stat: ::core::option::Option<SeasonStat>,
    ///
    #[prost(message, optional, tag = "12")]
    pub post_purchase_info: ::core::option::Option<PostPurchaseInfo>,
    ///
    #[prost(message, optional, tag = "13")]
    pub gift_info: ::core::option::Option<GiftInfo>,
    ///
    #[prost(message, optional, tag = "14")]
    pub netdisk_courseware_info: ::core::option::Option<NetdiskCoursewareInfo>,
    ///
    #[prost(message, optional, tag = "15")]
    pub credential_info: ::core::option::Option<CredentialInfo>,
    ///
    #[prost(message, optional, tag = "16")]
    pub fragment_video_message: ::core::option::Option<FragmentVideoMessage>,
}
impl ::prost::Name for ViewPugvAny {
    const NAME: &'static str = "ViewPugvAny";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.ViewPugvAny".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.ViewPugvAny".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaterMark {
    ///
    #[prost(bool, tag = "1")]
    pub show_watermark: bool,
    ///
    #[prost(int64, tag = "2")]
    pub watermark_interval: i64,
}
impl ::prost::Name for WaterMark {
    const NAME: &'static str = "WaterMark";
    const PACKAGE: &'static str = "bilibili.app.viewunite.pugvanymodel";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.app.viewunite.pugvanymodel.WaterMark".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.app.viewunite.pugvanymodel.WaterMark".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EpisodeStatus {
    ///
    Unspecified = 0,
    ///
    TryWatchWhole = 1,
    ///
    NotTryWatch = 2,
    ///
    TryWatch5Minutes = 3,
}
impl EpisodeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "EPISODE_STATUS_UNSPECIFIED",
            Self::TryWatchWhole => "EPISODE_STATUS_TRY_WATCH_WHOLE",
            Self::NotTryWatch => "EPISODE_STATUS_NOT_TRY_WATCH",
            Self::TryWatch5Minutes => "EPISODE_STATUS_TRY_WATCH_5_MINUTES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EPISODE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "EPISODE_STATUS_TRY_WATCH_WHOLE" => Some(Self::TryWatchWhole),
            "EPISODE_STATUS_NOT_TRY_WATCH" => Some(Self::NotTryWatch),
            "EPISODE_STATUS_TRY_WATCH_5_MINUTES" => Some(Self::TryWatch5Minutes),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EpisodeType {
    ///
    Unspecified = 0,
    ///
    Video = 1,
    ///
    Live = 2,
}
impl EpisodeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "EPISODE_TYPE_UNSPECIFIED",
            Self::Video => "EPISODE_TYPE_VIDEO",
            Self::Live => "EPISODE_TYPE_LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EPISODE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "EPISODE_TYPE_VIDEO" => Some(Self::Video),
            "EPISODE_TYPE_LIVE" => Some(Self::Live),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStatus {
    ///
    Unspecified = 0,
    ///
    Prepare = 1,
    ///
    Live = 2,
    ///
    PlaybackGenerating = 3,
}
impl LiveStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "LIVE_STATUS_UNSPECIFIED",
            Self::Prepare => "LIVE_STATUS_PREPARE",
            Self::Live => "LIVE_STATUS_LIVE",
            Self::PlaybackGenerating => "LIVE_STATUS_PLAYBACK_GENERATING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LIVE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "LIVE_STATUS_PREPARE" => Some(Self::Prepare),
            "LIVE_STATUS_LIVE" => Some(Self::Live),
            "LIVE_STATUS_PLAYBACK_GENERATING" => Some(Self::PlaybackGenerating),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperationAreaButtonType {
    ///
    Unspecified = 0,
    ///
    Favorite = 1,
    ///
    Consult = 2,
    ///
    Share = 3,
    ///
    Purchase = 4,
}
impl OperationAreaButtonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "OPERATION_AREA_BUTTON_TYPE_UNSPECIFIED",
            Self::Favorite => "OPERATION_AREA_BUTTON_TYPE_FAVORITE",
            Self::Consult => "OPERATION_AREA_BUTTON_TYPE_CONSULT",
            Self::Share => "OPERATION_AREA_BUTTON_TYPE_SHARE",
            Self::Purchase => "OPERATION_AREA_BUTTON_TYPE_PURCHASE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OPERATION_AREA_BUTTON_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "OPERATION_AREA_BUTTON_TYPE_FAVORITE" => Some(Self::Favorite),
            "OPERATION_AREA_BUTTON_TYPE_CONSULT" => Some(Self::Consult),
            "OPERATION_AREA_BUTTON_TYPE_SHARE" => Some(Self::Share),
            "OPERATION_AREA_BUTTON_TYPE_PURCHASE" => Some(Self::Purchase),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonCouponStatus {
    ///
    Unspecified = 0,
    ///
    Received = 1,
    ///
    NotReceived = 2,
    ///
    Invalid = 3,
}
impl SeasonCouponStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEASON_COUPON_STATUS_UNSPECIFIED",
            Self::Received => "SEASON_COUPON_STATUS_RECEIVED",
            Self::NotReceived => "SEASON_COUPON_STATUS_NOT_RECEIVED",
            Self::Invalid => "SEASON_COUPON_STATUS_INVALID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEASON_COUPON_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "SEASON_COUPON_STATUS_RECEIVED" => Some(Self::Received),
            "SEASON_COUPON_STATUS_NOT_RECEIVED" => Some(Self::NotReceived),
            "SEASON_COUPON_STATUS_INVALID" => Some(Self::Invalid),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonCouponType {
    ///
    Unspecified = 0,
    ///
    Discount = 1,
    ///
    Decrease = 2,
}
impl SeasonCouponType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEASON_COUPON_TYPE_UNSPECIFIED",
            Self::Discount => "SEASON_COUPON_TYPE_DISCOUNT",
            Self::Decrease => "SEASON_COUPON_TYPE_DECREASE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEASON_COUPON_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SEASON_COUPON_TYPE_DISCOUNT" => Some(Self::Discount),
            "SEASON_COUPON_TYPE_DECREASE" => Some(Self::Decrease),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonSectionType {
    ///
    Unspecified = 0,
    ///
    Default = 1,
    ///
    Custom = 2,
}
impl SeasonSectionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEASON_SECTION_TYPE_UNSPECIFIED",
            Self::Default => "SEASON_SECTION_TYPE_DEFAULT",
            Self::Custom => "SEASON_SECTION_TYPE_CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEASON_SECTION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SEASON_SECTION_TYPE_DEFAULT" => Some(Self::Default),
            "SEASON_SECTION_TYPE_CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonStatus {
    ///
    Unspecified = 0,
    ///
    Offline = 1,
}
impl SeasonStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEASON_STATUS_UNSPECIFIED",
            Self::Offline => "SEASON_STATUS_OFFLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEASON_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "SEASON_STATUS_OFFLINE" => Some(Self::Offline),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeasonType {
    ///
    Unspecified = 0,
    ///
    Installment = 1,
    ///
    Free = 2,
    ///
    Subscription = 3,
}
impl SeasonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SEASON_TYPE_UNSPECIFIED",
            Self::Installment => "SEASON_TYPE_INSTALLMENT",
            Self::Free => "SEASON_TYPE_FREE",
            Self::Subscription => "SEASON_TYPE_SUBSCRIPTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SEASON_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "SEASON_TYPE_INSTALLMENT" => Some(Self::Installment),
            "SEASON_TYPE_FREE" => Some(Self::Free),
            "SEASON_TYPE_SUBSCRIPTION" => Some(Self::Subscription),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VideoPlayWay {
    ///
    Unspecified = 0,
    ///
    Vod = 1,
    ///
    LivePlayback = 2,
}
impl VideoPlayWay {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VIDEO_PLAY_WAY_UNSPECIFIED",
            Self::Vod => "VIDEO_PLAY_WAY_VOD",
            Self::LivePlayback => "VIDEO_PLAY_WAY_LIVE_PLAYBACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIDEO_PLAY_WAY_UNSPECIFIED" => Some(Self::Unspecified),
            "VIDEO_PLAY_WAY_VOD" => Some(Self::Vod),
            "VIDEO_PLAY_WAY_LIVE_PLAYBACK" => Some(Self::LivePlayback),
            _ => None,
        }
    }
}
