// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Args {
    ///
    #[prost(int32, tag = "1")]
    pub online: i32,
    ///
    #[prost(string, tag = "2")]
    pub rname: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub room_id: i64,
    ///
    #[prost(string, tag = "4")]
    pub tname: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub up_id: i64,
    ///
    #[prost(string, tag = "6")]
    pub up_name: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub rid: i64,
    ///
    #[prost(int64, tag = "8")]
    pub tid: i64,
    ///
    #[prost(int64, tag = "9")]
    pub aid: i64,
}
impl ::prost::Name for Args {
    const NAME: &'static str = "Args";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Args".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Args".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvItem {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub ctime_label: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub duration: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub play: i32,
    ///
    #[prost(int64, tag = "7")]
    pub danmaku: i64,
    ///
    #[prost(int32, tag = "8")]
    pub ctime: i32,
    ///
    #[prost(string, tag = "9")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub position: i32,
    ///
    #[prost(string, tag = "12")]
    pub ctime_label_v2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "14")]
    pub icon_type: i32,
    ///
    #[prost(message, optional, tag = "15")]
    pub charging_label: ::core::option::Option<LabelStyle>,
    ///
    #[prost(bool, tag = "16")]
    pub is_inline: bool,
    ///
    #[prost(message, optional, tag = "17")]
    pub cover_badge: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(int32, tag = "18")]
    pub is_iaa_video: i32,
}
impl ::prost::Name for AvItem {
    const NAME: &'static str = "AvItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.AvItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.AvItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Avatar {
    ///
    #[prost(string, tag = "1")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub event: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub event_v2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub up_id: i64,
    ///
    #[prost(string, tag = "6")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub face_nft_new: i32,
    ///
    #[prost(message, optional, tag = "8")]
    pub nft_face_icon: ::core::option::Option<NftFaceIcon>,
}
impl ::prost::Name for Avatar {
    const NAME: &'static str = "Avatar";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Avatar".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Avatar".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Background {
    ///
    #[prost(int32, tag = "1")]
    pub show: i32,
    ///
    #[prost(string, tag = "2")]
    pub bg_pic_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub fg_pic_url: ::prost::alloc::string::String,
}
impl ::prost::Name for Background {
    const NAME: &'static str = "Background";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Background".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Background".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Badge {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub bg_cover: ::prost::alloc::string::String,
}
impl ::prost::Name for Badge {
    const NAME: &'static str = "Badge";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Badge".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Badge".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Badge2 {
    ///
    #[prost(string, tag = "1")]
    pub bg_cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for Badge2 {
    const NAME: &'static str = "Badge2";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Badge2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Badge2".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BottomButton {
    ///
    #[prost(string, tag = "1")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub link: ::prost::alloc::string::String,
}
impl ::prost::Name for BottomButton {
    const NAME: &'static str = "BottomButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.BottomButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.BottomButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BrandAdAccount {
    ///
    #[prost(string, tag = "1")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub mid: i64,
    ///
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub sign: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub relation: ::core::option::Option<Relation>,
    ///
    #[prost(int64, tag = "8")]
    pub roomid: i64,
    ///
    #[prost(int64, tag = "9")]
    pub live_status: i64,
    ///
    #[prost(string, tag = "10")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub official_verify: ::core::option::Option<OfficialVerify>,
    ///
    #[prost(message, optional, tag = "12")]
    pub vip: ::core::option::Option<VipInfo>,
    ///
    #[prost(string, tag = "13")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "14")]
    pub face_nft_new: i32,
}
impl ::prost::Name for BrandAdAccount {
    const NAME: &'static str = "BrandADAccount";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.BrandADAccount".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.BrandADAccount".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BrandAdArc {
    ///
    #[prost(string, tag = "1")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "4")]
    pub play: i64,
    ///
    #[prost(int64, tag = "5")]
    pub reply: i64,
    ///
    #[prost(string, tag = "6")]
    pub duration: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for BrandAdArc {
    const NAME: &'static str = "BrandADArc";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.BrandADArc".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.BrandADArc".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Button {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub event: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub selected: i32,
    ///
    #[prost(int32, tag = "6")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "7")]
    pub event_v2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub relation: ::core::option::Option<Relation>,
}
impl ::prost::Name for Button {
    const NAME: &'static str = "Button";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Button".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Button".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ButtonMeta {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub button_status: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub toast: ::prost::alloc::string::String,
}
impl ::prost::Name for ButtonMeta {
    const NAME: &'static str = "ButtonMeta";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ButtonMeta".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ButtonMeta".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CardBusinessBadge {
    ///
    #[prost(message, optional, tag = "1")]
    pub goto_icon: ::core::option::Option<GotoIcon>,
    ///
    #[prost(message, optional, tag = "2")]
    pub badge_style: ::core::option::Option<ReasonStyle>,
}
impl ::prost::Name for CardBusinessBadge {
    const NAME: &'static str = "CardBusinessBadge";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.CardBusinessBadge".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.CardBusinessBadge".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CardLayout {
    ///
    #[prost(float, tag = "1")]
    pub compact_cover_width: f32,
    ///
    #[prost(float, tag = "2")]
    pub compact_cover_height: f32,
    ///
    #[prost(float, tag = "3")]
    pub vertical_padding: f32,
    ///
    #[prost(float, tag = "4")]
    pub module_spacing: f32,
    ///
    #[prost(bool, tag = "5")]
    pub is_large_avatar: bool,
    ///
    #[prost(float, tag = "6")]
    pub background_cover_height: f32,
    ///
    #[prost(bool, tag = "7")]
    pub button_top_equal_cover: bool,
    ///
    #[prost(int32, tag = "8")]
    pub column: i32,
}
impl ::prost::Name for CardLayout {
    const NAME: &'static str = "CardLayout";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.CardLayout".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.CardLayout".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChannelLabel {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub icon_type: i32,
}
impl ::prost::Name for ChannelLabel {
    const NAME: &'static str = "ChannelLabel";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ChannelLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ChannelLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChannelMixedItem {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub cover_left_icon1: i32,
    ///
    #[prost(string, tag = "3")]
    pub cover_left_text1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub badge: ::core::option::Option<Badge2>,
}
impl ::prost::Name for ChannelMixedItem {
    const NAME: &'static str = "ChannelMixedItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ChannelMixedItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ChannelMixedItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckMore {
    ///
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for CheckMore {
    const NAME: &'static str = "CheckMore";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.CheckMore".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.CheckMore".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CloudGameParams {
    ///
    #[prost(int64, tag = "1")]
    pub source_from: i64,
    ///
    #[prost(string, tag = "2")]
    pub scene: ::prost::alloc::string::String,
}
impl ::prost::Name for CloudGameParams {
    const NAME: &'static str = "CloudGameParams";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.CloudGameParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.CloudGameParams".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Colors {
    ///
    #[prost(string, tag = "1")]
    pub day: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub night: ::prost::alloc::string::String,
}
impl ::prost::Name for Colors {
    const NAME: &'static str = "Colors";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Colors".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Colors".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Comment {
    ///
    #[prost(string, tag = "1")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub mid: i64,
    ///
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub like: i64,
    ///
    #[prost(int64, tag = "6")]
    pub row: i64,
    ///
    #[prost(string, tag = "7")]
    pub up_uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub id: i64,
}
impl ::prost::Name for Comment {
    const NAME: &'static str = "Comment";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Comment".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Comment".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DetailsRelationItem {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover_left_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub cover_badge_style: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(string, tag = "5")]
    pub module_pos: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub position: i32,
    ///
    #[prost(string, tag = "10")]
    pub cover_left_text_v2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub cover_badge_style_v2: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(string, tag = "12")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "13")]
    pub icon_type: i32,
}
impl ::prost::Name for DetailsRelationItem {
    const NAME: &'static str = "DetailsRelationItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.DetailsRelationItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.DetailsRelationItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Disclaimer {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub list: ::prost::alloc::vec::Vec<disclaimer::Item>,
}
/// Nested message and enum types in `Disclaimer`.
pub mod disclaimer {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Item {
        ///
        #[prost(string, tag = "1")]
        pub icon: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "2")]
        pub text: ::prost::alloc::string::String,
    }
    impl ::prost::Name for Item {
        const NAME: &'static str = "Item";
        const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "bilibili.polymer.app.search.v1.Disclaimer.Item".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/bilibili.polymer.app.search.v1.Disclaimer.Item".into()
        }
    }
}
impl ::prost::Name for Disclaimer {
    const NAME: &'static str = "Disclaimer";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Disclaimer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Disclaimer".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DislikeReason {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for DislikeReason {
    const NAME: &'static str = "DislikeReason";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.DislikeReason".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.DislikeReason".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayOption {
    ///
    #[prost(int32, tag = "1")]
    pub video_title_row: i32,
    ///
    #[prost(int32, tag = "2")]
    pub search_page_visual_opti: i32,
    ///
    #[prost(int32, tag = "3")]
    pub refresh_opti: i32,
    ///
    #[prost(int32, tag = "4")]
    pub refresh_exp: i32,
    ///
    #[prost(int32, tag = "5")]
    pub filter_exp: i32,
    ///
    #[prost(int32, tag = "6")]
    pub tag_highlight_opti: i32,
    ///
    #[prost(int32, tag = "7")]
    pub cover_exp: i32,
    ///
    #[prost(double, tag = "8")]
    pub cover_exp_small: f64,
    ///
    #[prost(double, tag = "9")]
    pub cover_exp_normal: f64,
    ///
    #[prost(double, tag = "10")]
    pub cover_exp_large: f64,
}
impl ::prost::Name for DisplayOption {
    const NAME: &'static str = "DisplayOption";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.DisplayOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.DisplayOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleOpusItem {
    ///
    #[prost(enumeration = "OpusType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub cover_count: i64,
    ///
    #[prost(string, tag = "4")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub mid: i64,
    ///
    #[prost(string, tag = "6")]
    pub uname: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "8")]
    pub img_w: i64,
    ///
    #[prost(int64, tag = "9")]
    pub img_h: i64,
    ///
    #[prost(string, tag = "10")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for DoubleOpusItem {
    const NAME: &'static str = "DoubleOpusItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.DoubleOpusItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.DoubleOpusItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DyTopic {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for DyTopic {
    const NAME: &'static str = "DyTopic";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.DyTopic".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.DyTopic".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EasterEgg {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(int32, tag = "2")]
    pub show_count: i32,
    ///
    #[prost(int32, tag = "3")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "4")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub close_count: i32,
    ///
    #[prost(int32, tag = "6")]
    pub mask_transparency: i32,
    ///
    #[prost(string, tag = "7")]
    pub mask_color: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub pic_type: i32,
    ///
    #[prost(int32, tag = "9")]
    pub show_time: i32,
    ///
    #[prost(string, tag = "10")]
    pub source_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub source_md5: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "12")]
    pub source_size: i32,
    ///
    #[prost(int32, tag = "13")]
    pub egg_type: i32,
}
impl ::prost::Name for EasterEgg {
    const NAME: &'static str = "EasterEgg";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.EasterEgg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.EasterEgg".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Episode {
    ///
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub index: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "4")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(int32, tag = "5")]
    pub position: i32,
}
impl ::prost::Name for Episode {
    const NAME: &'static str = "Episode";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Episode".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Episode".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EpisodeNew {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub is_new: i32,
    ///
    #[prost(message, repeated, tag = "5")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(int32, tag = "6")]
    pub r#type: i32,
    ///
    #[prost(int32, tag = "7")]
    pub position: i32,
    ///
    #[prost(string, tag = "8")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub label: ::prost::alloc::string::String,
}
impl ::prost::Name for EpisodeNew {
    const NAME: &'static str = "EpisodeNew";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.EpisodeNew".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.EpisodeNew".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraLink {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for ExtraLink {
    const NAME: &'static str = "ExtraLink";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ExtraLink".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ExtraLink".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraWord {
    ///
    #[prost(string, tag = "1")]
    pub first_word: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "2")]
    pub second_word: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for ExtraWord {
    const NAME: &'static str = "ExtraWord";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ExtraWord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ExtraWord".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Feedback {
    ///
    #[prost(message, repeated, tag = "1")]
    pub sections: ::prost::alloc::vec::Vec<FeedbackSection>,
}
impl ::prost::Name for Feedback {
    const NAME: &'static str = "Feedback";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Feedback".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Feedback".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeedbackItem {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub id: i32,
}
impl ::prost::Name for FeedbackItem {
    const NAME: &'static str = "FeedbackItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FeedbackItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FeedbackItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeedbackSection {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<FeedbackItem>,
}
impl ::prost::Name for FeedbackSection {
    const NAME: &'static str = "FeedbackSection";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FeedbackSection".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FeedbackSection".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FoldingTimeLine {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub left_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub right_title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub color: i32,
    ///
    #[prost(int32, tag = "5")]
    pub segment: i32,
    ///
    #[prost(int64, tag = "6")]
    pub start_second: i64,
    ///
    #[prost(int64, tag = "7")]
    pub end_second: i64,
    ///
    #[prost(int32, tag = "8")]
    pub init_position: i32,
    ///
    #[prost(int32, tag = "9")]
    pub r#type: i32,
    ///
    #[prost(int32, tag = "10")]
    pub hang_style_sinal: i32,
    ///
    #[prost(int32, tag = "11")]
    pub has_img_url: i32,
    ///
    #[prost(message, repeated, tag = "12")]
    pub items: ::prost::alloc::vec::Vec<VideoTextItem>,
    ///
    #[prost(string, tag = "13")]
    pub icon_night: ::prost::alloc::string::String,
}
impl ::prost::Name for FoldingTimeLine {
    const NAME: &'static str = "FoldingTimeLine";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FoldingTimeLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FoldingTimeLine".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowButton {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(map = "string, string", tag = "2")]
    pub texts: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(string, tag = "3")]
    pub status_report: ::prost::alloc::string::String,
}
impl ::prost::Name for FollowButton {
    const NAME: &'static str = "FollowButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FollowButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FollowButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowButtonV2 {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(map = "int32, string", tag = "2")]
    pub texts: ::std::collections::HashMap<i32, ::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "3")]
    pub status_report: ::prost::alloc::string::String,
}
impl ::prost::Name for FollowButtonV2 {
    const NAME: &'static str = "FollowButtonV2";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FollowButtonV2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FollowButtonV2".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullTextResult {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub show_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub jump_start_progress: i64,
    ///
    #[prost(string, tag = "4")]
    pub jump_uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub icon_for_night: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub id: i64,
    ///
    #[prost(string, tag = "8")]
    pub prefix: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for FullTextResult {
    const NAME: &'static str = "FullTextResult";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.FullTextResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.FullTextResult".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GloryInfo {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub total: i32,
    ///
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<GloryItem>,
}
impl ::prost::Name for GloryInfo {
    const NAME: &'static str = "GloryInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.GloryInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.GloryInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GloryItem {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for GloryItem {
    const NAME: &'static str = "GloryItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.GloryItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.GloryItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GotoIcon {
    ///
    #[prost(string, tag = "1")]
    pub icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub icon_width: i32,
    ///
    #[prost(int32, tag = "4")]
    pub icon_height: i32,
}
impl ::prost::Name for GotoIcon {
    const NAME: &'static str = "GotoIcon";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.GotoIcon".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.GotoIcon".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InlineProgressBar {
    ///
    #[prost(string, tag = "1")]
    pub icon_drag: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_drag_hash: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub icon_stop: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub icon_stop_hash: ::prost::alloc::string::String,
}
impl ::prost::Name for InlineProgressBar {
    const NAME: &'static str = "InlineProgressBar";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.InlineProgressBar".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.InlineProgressBar".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InlineThreePointPanel {
    ///
    #[prost(int32, tag = "1")]
    pub panel_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub share_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub share_origin: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "4")]
    pub functional_buttons: ::prost::alloc::vec::Vec<ShareButtonItem>,
}
impl ::prost::Name for InlineThreePointPanel {
    const NAME: &'static str = "InlineThreePointPanel";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.InlineThreePointPanel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.InlineThreePointPanel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    ///
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub linktype: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub position: i32,
    ///
    #[prost(string, tag = "6")]
    pub trackid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "56")]
    pub spread_id: i64,
    ///
    #[prost(string, tag = "63")]
    pub user_act: ::prost::alloc::string::String,
    ///
    #[prost(
        oneof = "item::CardItem",
        tags = "7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66"
    )]
    pub card_item: ::core::option::Option<item::CardItem>,
}
/// Nested message and enum types in `Item`.
pub mod item {
    ///
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum CardItem {
        ///
        #[prost(message, tag = "7")]
        Special(super::SearchSpecialCard),
        ///
        #[prost(message, tag = "8")]
        Article(super::SearchArticleCard),
        ///
        #[prost(message, tag = "9")]
        Banner(super::SearchBannerCard),
        ///
        #[prost(message, tag = "10")]
        Live(super::SearchLiveCard),
        ///
        #[prost(message, tag = "11")]
        Game(super::SearchGameCard),
        ///
        #[prost(message, tag = "12")]
        Purchase(super::SearchPurchaseCard),
        ///
        #[prost(message, tag = "13")]
        RecommendWord(super::SearchRecommendWordCard),
        ///
        #[prost(message, tag = "14")]
        Dynamic(super::SearchDynamicCard),
        ///
        #[prost(message, tag = "15")]
        SuggestKeyword(super::SearchNoResultSuggestWordCard),
        ///
        #[prost(message, tag = "16")]
        SpecialGuide(super::SearchSpecialGuideCard),
        ///
        #[prost(message, tag = "17")]
        Comic(super::SearchComicCard),
        ///
        #[prost(message, tag = "18")]
        ChannelNew(super::SearchNewChannelCard),
        ///
        #[prost(message, tag = "19")]
        OgvCard(super::SearchOgvCard),
        ///
        #[prost(message, tag = "20")]
        BangumiRelates(super::SearchOgvRelationCard),
        ///
        #[prost(message, tag = "21")]
        FindMore(super::SearchOgvRecommendCard),
        ///
        #[prost(message, tag = "22")]
        Esport(super::SearchSportCard),
        ///
        #[prost(message, tag = "23")]
        AuthorNew(super::SearchAuthorNewCard),
        ///
        #[prost(message, tag = "24")]
        Tips(super::SearchTipsCard),
        ///
        #[prost(message, tag = "25")]
        Cm(super::SearchAdCard),
        ///
        #[prost(message, tag = "26")]
        PediaCard(super::SearchPediaCard),
        ///
        #[prost(message, tag = "27")]
        UgcInline(super::SearchUgcInlineCard),
        ///
        #[prost(message, tag = "28")]
        LiveInline(super::SearchLiveInlineCard),
        ///
        #[prost(message, tag = "29")]
        TopGame(super::SearchTopGameCard),
        ///
        #[prost(message, tag = "30")]
        Sports(super::SearchOlympicGameCard),
        ///
        #[prost(message, tag = "31")]
        PediaCardInline(super::SearchOlympicWikiCard),
        ///
        #[prost(message, tag = "32")]
        RecommendTips(super::SearchRecommendTipCard),
        ///
        #[prost(message, tag = "33")]
        CollectionCard(super::SearchCollectionCard),
        ///
        #[prost(message, tag = "34")]
        OgvChannel(super::SearchOgvChannelCard),
        ///
        #[prost(message, tag = "35")]
        OgvInline(super::SearchOgvInlineCard),
        ///
        #[prost(message, tag = "36")]
        Author(super::SearchUpperCard),
        ///
        #[prost(message, tag = "37")]
        Av(super::SearchVideoCard),
        ///
        #[prost(message, tag = "38")]
        Bangumi(super::SearchBangumiCard),
        ///
        #[prost(message, tag = "39")]
        EsportsInline(super::SearchSportInlineCard),
        ///
        #[prost(message, tag = "40")]
        HotBanner(super::SearchHotBannerCard),
        ///
        #[prost(message, tag = "41")]
        Subject(super::SearchSubjectCard),
        ///
        #[prost(message, tag = "42")]
        DynamicNew(super::SearchDynamicCard),
        ///
        #[prost(message, tag = "43")]
        ArticleNew(super::SearchArticleCard),
        ///
        #[prost(message, tag = "44")]
        PediaCardPic(super::SearchPediaPicCard),
        ///
        #[prost(message, tag = "45")]
        NpsCard(super::SearchNpsCard),
        ///
        #[prost(message, tag = "46")]
        ChatGpt(super::SearchChatGptCard),
        ///
        #[prost(message, tag = "47")]
        HotRecommend(super::SearchHotRecommend),
        ///
        #[prost(message, tag = "48")]
        LiveMaster(super::SearchLiveMaster),
        ///
        #[prost(message, tag = "49")]
        LiveRoomTitle(super::SearchLiveRoomTitle),
        ///
        #[prost(message, tag = "50")]
        LiveRoom(super::SearchLiveRoom),
        ///
        #[prost(message, tag = "51")]
        Cheese(super::SearchCheese),
        ///
        #[prost(message, tag = "52")]
        RelatedSearch(super::SearchRelatedSearch),
        ///
        #[prost(message, tag = "53")]
        QaCard(super::SearchQaCard),
        ///
        #[prost(message, tag = "54")]
        DoubleColumn(super::SearchDoubleColumnCard),
        ///
        #[prost(message, tag = "55")]
        UpRecommend(super::SearchUpRecommend),
        ///
        #[prost(message, tag = "57")]
        CommentCard(super::SearchCommentCard),
        ///
        #[prost(message, tag = "58")]
        PlaylistCard(super::SearchPlayListCard),
        ///
        #[prost(message, tag = "59")]
        SeriesCard(super::SearchSeriesCard),
        ///
        #[prost(message, tag = "60")]
        MusicCard(super::SearchMusicCard),
        ///
        #[prost(message, tag = "61")]
        CommentCluster(super::SearchCommentClusterCard),
        ///
        #[prost(message, tag = "62")]
        TimeLine(super::SearchTimeLineCard),
        ///
        #[prost(message, tag = "64")]
        DoubleOpus(super::SearchDoubleOpusCard),
        ///
        #[prost(message, tag = "65")]
        OgvClusterCard(::prost::alloc::boxed::Box<super::SearchOgvClusterCard>),
        ///
        #[prost(message, tag = "66")]
        DigitalChat(super::SearchDigitalChatCard),
    }
}
impl ::prost::Name for Item {
    const NAME: &'static str = "Item";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Item".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Item".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LabelStyle {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub bg_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub border_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub border_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub icon_night: ::prost::alloc::string::String,
}
impl ::prost::Name for LabelStyle {
    const NAME: &'static str = "LabelStyle";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.LabelStyle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.LabelStyle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LikeResource {
    ///
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub content_hash: ::prost::alloc::string::String,
}
impl ::prost::Name for LikeResource {
    const NAME: &'static str = "LikeResource";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.LikeResource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.LikeResource".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiveBadgeResource {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub animation_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub animation_url_hash: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub background_color_light: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub background_color_night: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "6")]
    pub alpha_light: i64,
    ///
    #[prost(int64, tag = "7")]
    pub alpha_night: i64,
    ///
    #[prost(string, tag = "8")]
    pub font_color: ::prost::alloc::string::String,
}
impl ::prost::Name for LiveBadgeResource {
    const NAME: &'static str = "LiveBadgeResource";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.LiveBadgeResource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.LiveBadgeResource".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mask {
    ///
    #[prost(message, optional, tag = "1")]
    pub avatar: ::core::option::Option<Avatar>,
    ///
    #[prost(message, optional, tag = "2")]
    pub button: ::core::option::Option<Button>,
}
impl ::prost::Name for Mask {
    const NAME: &'static str = "Mask";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Mask".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Mask".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchInfoObj {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub status: i32,
    ///
    #[prost(string, tag = "3")]
    pub match_stage: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub team1: ::core::option::Option<MatchTeam>,
    ///
    #[prost(message, optional, tag = "5")]
    pub team2: ::core::option::Option<MatchTeam>,
    ///
    #[prost(message, optional, tag = "6")]
    pub match_label: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, optional, tag = "7")]
    pub match_time: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, optional, tag = "8")]
    pub match_button: ::core::option::Option<MatchItem>,
}
impl ::prost::Name for MatchInfoObj {
    const NAME: &'static str = "MatchInfoObj";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.MatchInfoObj".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.MatchInfoObj".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchItem {
    ///
    #[prost(int32, tag = "1")]
    pub state: i32,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub texts: ::core::option::Option<Texts>,
}
impl ::prost::Name for MatchItem {
    const NAME: &'static str = "MatchItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.MatchItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.MatchItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchTeam {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub score: i32,
}
impl ::prost::Name for MatchTeam {
    const NAME: &'static str = "MatchTeam";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.MatchTeam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.MatchTeam".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nav {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub total: i32,
    ///
    #[prost(int32, tag = "3")]
    pub pages: i32,
    ///
    #[prost(int32, tag = "4")]
    pub r#type: i32,
    ///
    #[prost(int32, tag = "5")]
    pub show_more: i32,
}
impl ::prost::Name for Nav {
    const NAME: &'static str = "Nav";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Nav".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Nav".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Navigation {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(message, repeated, tag = "2")]
    pub children: ::prost::alloc::vec::Vec<Navigation>,
    ///
    #[prost(message, repeated, tag = "3")]
    pub inline_children: ::prost::alloc::vec::Vec<Navigation>,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub button: ::core::option::Option<NavigationButton>,
}
impl ::prost::Name for Navigation {
    const NAME: &'static str = "Navigation";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Navigation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Navigation".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NavigationButton {
    ///
    #[prost(int64, tag = "1")]
    pub r#type: i64,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for NavigationButton {
    const NAME: &'static str = "NavigationButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.NavigationButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.NavigationButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NftFaceIcon {
    ///
    #[prost(int32, tag = "1")]
    pub region_type: i32,
    ///
    #[prost(string, tag = "2")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub show_status: i32,
}
impl ::prost::Name for NftFaceIcon {
    const NAME: &'static str = "NftFaceIcon";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.NftFaceIcon".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.NftFaceIcon".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Notice {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub notice_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub notice_type: i64,
    ///
    #[prost(string, tag = "6")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub bg_color_night: ::prost::alloc::string::String,
}
impl ::prost::Name for Notice {
    const NAME: &'static str = "Notice";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Notice".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Notice".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfficialVerify {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub desc: ::prost::alloc::string::String,
}
impl ::prost::Name for OfficialVerify {
    const NAME: &'static str = "OfficialVerify";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.OfficialVerify".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.OfficialVerify".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvCardUi {
    ///
    #[prost(string, tag = "1")]
    pub background_image: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub gaussian_blur_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub module_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub mask_opacity: ::prost::alloc::string::String,
}
impl ::prost::Name for OgvCardUi {
    const NAME: &'static str = "OgvCardUI";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.OgvCardUI".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.OgvCardUI".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OgvClipInfo {
    ///
    #[prost(int64, tag = "1")]
    pub play_start_time: i64,
    ///
    #[prost(int64, tag = "2")]
    pub play_end_time: i64,
}
impl ::prost::Name for OgvClipInfo {
    const NAME: &'static str = "OgvClipInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.OgvClipInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.OgvClipInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvClusterCardRelate {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub extra_word_list: ::prost::alloc::vec::Vec<ExtraWord>,
    ///
    #[prost(int32, tag = "3")]
    pub need_order: i32,
    ///
    #[prost(int64, tag = "4")]
    pub show_lines: i64,
    ///
    #[prost(message, repeated, tag = "5")]
    pub items: ::prost::alloc::vec::Vec<DetailsRelationItem>,
    ///
    #[prost(string, tag = "6")]
    pub more_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub more_search_type: i32,
}
impl ::prost::Name for OgvClusterCardRelate {
    const NAME: &'static str = "OgvClusterCardRelate";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.OgvClusterCardRelate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.OgvClusterCardRelate".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OgvRecommendWord {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for OgvRecommendWord {
    const NAME: &'static str = "OgvRecommendWord";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.OgvRecommendWord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.OgvRecommendWord".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PageOffset {
    ///
    #[prost(int64, tag = "1")]
    pub page: i64,
    ///
    #[prost(string, tag = "2")]
    pub qv_id: ::prost::alloc::string::String,
}
impl ::prost::Name for PageOffset {
    const NAME: &'static str = "PageOffset";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PageOffset".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PageOffset".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PediaCardUi {
    ///
    #[prost(string, tag = "1")]
    pub background_image: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover_default_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub gaussian_blur_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub mask_color_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub mask_opacity: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub module_color: ::prost::alloc::string::String,
}
impl ::prost::Name for PediaCardUi {
    const NAME: &'static str = "PediaCardUI";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PediaCardUI".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PediaCardUI".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PediaCover {
    ///
    #[prost(int64, tag = "1")]
    pub cover_type: i64,
    ///
    #[prost(string, tag = "2")]
    pub cover_sun_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover_night_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub cover_width: i32,
    ///
    #[prost(int32, tag = "5")]
    pub cover_height: i32,
}
impl ::prost::Name for PediaCover {
    const NAME: &'static str = "PediaCover";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PediaCover".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PediaCover".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PicNavigation {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover_sun_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub cover_night_url: ::prost::alloc::string::String,
}
impl ::prost::Name for PicNavigation {
    const NAME: &'static str = "PicNavigation";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PicNavigation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PicNavigation".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerArgs {
    ///
    #[prost(int32, tag = "1")]
    pub is_live: i32,
    ///
    #[prost(int64, tag = "2")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub cid: i64,
    ///
    #[prost(int32, tag = "4")]
    pub sub_type: i32,
    ///
    #[prost(int64, tag = "5")]
    pub room_id: i64,
    ///
    #[prost(int64, tag = "7")]
    pub ep_id: i64,
    ///
    #[prost(int32, tag = "8")]
    pub is_preview: i32,
    ///
    #[prost(string, tag = "9")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "10")]
    pub duration: i32,
    ///
    #[prost(int64, tag = "11")]
    pub season_id: i64,
    ///
    #[prost(int32, tag = "12")]
    pub report_required_play_duration: i32,
    ///
    #[prost(int32, tag = "13")]
    pub report_required_time: i32,
    ///
    #[prost(int32, tag = "14")]
    pub manual_play: i32,
    ///
    #[prost(bool, tag = "15")]
    pub hide_play_button: bool,
    ///
    #[prost(int32, tag = "16")]
    pub content_mode: i32,
    ///
    #[prost(int32, tag = "17")]
    pub report_history: i32,
}
impl ::prost::Name for PlayerArgs {
    const NAME: &'static str = "PlayerArgs";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PlayerArgs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PlayerArgs".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGrade {
    ///
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub player_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub portrait: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub hot_remark: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub grade_users_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub avg_grade: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub watch_button: ::core::option::Option<WatchButton>,
}
impl ::prost::Name for PlayerGrade {
    const NAME: &'static str = "PlayerGrade";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PlayerGrade".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PlayerGrade".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerWidget {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub desc: ::prost::alloc::string::String,
}
impl ::prost::Name for PlayerWidget {
    const NAME: &'static str = "PlayerWidget";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PlayerWidget".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PlayerWidget".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurchaseButton {
    ///
    #[prost(string, tag = "1")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for PurchaseButton {
    const NAME: &'static str = "PurchaseButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.PurchaseButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.PurchaseButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankInfo {
    ///
    #[prost(string, tag = "1")]
    pub search_night_icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub search_day_icon_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub search_bkg_night_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub search_bkg_day_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub search_font_night_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub search_font_day_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub rank_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub rank_link: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub game_rank: i64,
    ///
    #[prost(int64, tag = "10")]
    pub rank_type: i64,
}
impl ::prost::Name for RankInfo {
    const NAME: &'static str = "RankInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.RankInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.RankInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RcmdReason {
    ///
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
}
impl ::prost::Name for RcmdReason {
    const NAME: &'static str = "RcmdReason";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.RcmdReason".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.RcmdReason".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReasonStyle {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub bg_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub border_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub border_color_night: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub bg_style: i32,
}
impl ::prost::Name for ReasonStyle {
    const NAME: &'static str = "ReasonStyle";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ReasonStyle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ReasonStyle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecommendWord {
    ///
    #[prost(string, tag = "1")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub from_source: ::prost::alloc::string::String,
}
impl ::prost::Name for RecommendWord {
    const NAME: &'static str = "RecommendWord";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.RecommendWord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.RecommendWord".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelatedQuery {
    ///
    #[prost(string, tag = "1")]
    pub query: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub recommend_reason: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub icon_type: i64,
    ///
    #[prost(string, tag = "5")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub icon_night: ::prost::alloc::string::String,
}
impl ::prost::Name for RelatedQuery {
    const NAME: &'static str = "RelatedQuery";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.RelatedQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.RelatedQuery".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Relation {
    ///
    #[prost(int32, tag = "1")]
    pub status: i32,
}
impl ::prost::Name for Relation {
    const NAME: &'static str = "Relation";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Relation".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Relation".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveInfo {
    ///
    #[prost(int64, tag = "1")]
    pub sid: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub is_follow: i64,
    ///
    #[prost(string, tag = "4")]
    pub oid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub state: i64,
    ///
    #[prost(int64, tag = "8")]
    pub bg_color: i64,
}
impl ::prost::Name for ReserveInfo {
    const NAME: &'static str = "ReserveInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ReserveInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ReserveInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RightTopLiveBadge {
    ///
    #[prost(int32, tag = "1")]
    pub live_status: i32,
    ///
    #[prost(message, optional, tag = "2")]
    pub in_live: ::core::option::Option<LiveBadgeResource>,
    ///
    #[prost(string, tag = "3")]
    pub live_stats_desc: ::prost::alloc::string::String,
}
impl ::prost::Name for RightTopLiveBadge {
    const NAME: &'static str = "RightTopLiveBadge";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.RightTopLiveBadge".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.RightTopLiveBadge".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaleInfo {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub label: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(string, tag = "5")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub button: ::core::option::Option<PurchaseButton>,
    ///
    #[prost(string, tag = "7")]
    pub vip_status: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub vip_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub tips_id: ::prost::alloc::string::String,
}
impl ::prost::Name for SaleInfo {
    const NAME: &'static str = "SaleInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SaleInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SaleInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchAdCard {
    ///
    #[prost(string, tag = "1")]
    pub json_str: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchAdCard {
    const NAME: &'static str = "SearchAdCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchAdCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchAdCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchAllRequest {
    ///
    #[prost(string, tag = "1")]
    pub keyword: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "Sort", tag = "2")]
    pub order: i32,
    ///
    #[prost(string, tag = "3")]
    pub tid_list: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub duration_list: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub extra_word: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub from_source: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub is_org_query: i32,
    ///
    #[prost(int32, tag = "8")]
    pub local_time: i32,
    ///
    #[prost(string, tag = "9")]
    pub ad_extra: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "10")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
    ///
    #[prost(message, optional, tag = "11")]
    pub player_args: ::core::option::Option<
        super::super::super::super::app::archive::middleware::v1::PlayerArgs,
    >,
    ///
    #[prost(map = "string, string", tag = "12")]
    pub from_extra: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(int32, tag = "13")]
    pub forced_display_chat_card: i32,
    ///
    #[prost(int32, tag = "14")]
    pub is_refresh: i32,
    ///
    #[prost(int32, tag = "15")]
    pub refresh_times: i32,
    ///
    #[prost(string, tag = "16")]
    pub since: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "17")]
    pub pub_time_begin_s: i64,
    ///
    #[prost(int64, tag = "18")]
    pub pub_time_end_s: i64,
    ///
    #[prost(int64, tag = "19")]
    pub all_double_column: i64,
    ///
    #[prost(string, tag = "20")]
    pub user_act: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "21")]
    pub need_ogv_extra_word: bool,
}
impl ::prost::Name for SearchAllRequest {
    const NAME: &'static str = "SearchAllRequest";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchAllRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchAllRequest".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchAllResponse {
    ///
    #[prost(string, tag = "1")]
    pub keyword: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub trackid: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub nav: ::prost::alloc::vec::Vec<Nav>,
    ///
    #[prost(message, repeated, tag = "4")]
    pub item: ::prost::alloc::vec::Vec<Item>,
    ///
    #[prost(message, optional, tag = "5")]
    pub easter_egg: ::core::option::Option<EasterEgg>,
    ///
    #[prost(string, tag = "6")]
    pub exp_str: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "7")]
    pub extra_word_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "8")]
    pub org_extra_word: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub select_bar_type: i64,
    ///
    #[prost(int64, tag = "10")]
    pub new_search_exp_num: i64,
    ///
    #[prost(message, optional, tag = "11")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::PaginationReply,
    >,
    ///
    #[prost(message, optional, tag = "12")]
    pub app_display_option: ::core::option::Option<DisplayOption>,
    ///
    #[prost(map = "string, string", tag = "13")]
    pub annotation: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(int64, tag = "14")]
    pub page: i64,
    ///
    #[prost(double, tag = "15")]
    pub real_exposure_ratio: f64,
    ///
    #[prost(int64, tag = "19")]
    pub all_double_column: i64,
    ///
    #[prost(int32, tag = "20")]
    pub is_new_user: i32,
}
impl ::prost::Name for SearchAllResponse {
    const NAME: &'static str = "SearchAllResponse";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchAllResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchAllResponse".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchArticleCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub play: i32,
    ///
    #[prost(int32, tag = "4")]
    pub like: i32,
    ///
    #[prost(int32, tag = "5")]
    pub reply: i32,
    ///
    #[prost(string, repeated, tag = "6")]
    pub image_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "7")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub template_id: i32,
    ///
    #[prost(int64, tag = "9")]
    pub id: i64,
    ///
    #[prost(int64, tag = "10")]
    pub mid: i64,
    ///
    #[prost(string, tag = "11")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "13")]
    pub view: i32,
    ///
    #[prost(string, tag = "14")]
    pub pub_time: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "16")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "17")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchArticleCard {
    const NAME: &'static str = "SearchArticleCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchArticleCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchArticleCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchAuthorNewCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub live_face: i32,
    ///
    #[prost(string, tag = "4")]
    pub live_uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "6")]
    pub fans: i32,
    ///
    #[prost(int32, tag = "7")]
    pub level: i32,
    ///
    #[prost(string, tag = "8")]
    pub sign: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "9")]
    pub is_up: bool,
    ///
    #[prost(int32, tag = "10")]
    pub archives: i32,
    ///
    #[prost(int64, tag = "11")]
    pub mid: i64,
    ///
    #[prost(int64, tag = "12")]
    pub roomid: i64,
    ///
    #[prost(message, optional, tag = "13")]
    pub relation: ::core::option::Option<Relation>,
    ///
    #[prost(message, optional, tag = "14")]
    pub official_verify: ::core::option::Option<OfficialVerify>,
    ///
    #[prost(int32, tag = "15")]
    pub face_nft_new: i32,
    ///
    #[prost(message, optional, tag = "16")]
    pub nft_face_icon: ::core::option::Option<NftFaceIcon>,
    ///
    #[prost(int32, tag = "17")]
    pub is_senior_member: i32,
    ///
    #[prost(message, optional, tag = "18")]
    pub background: ::core::option::Option<Background>,
    ///
    #[prost(int32, tag = "19")]
    pub av_style: i32,
    ///
    #[prost(message, optional, tag = "20")]
    pub space: ::core::option::Option<Space>,
    ///
    #[prost(message, repeated, tag = "21")]
    pub av_items: ::prost::alloc::vec::Vec<AvItem>,
    ///
    #[prost(message, optional, tag = "22")]
    pub notice: ::core::option::Option<Notice>,
    ///
    #[prost(message, optional, tag = "23")]
    pub share_plane: ::core::option::Option<SharePlane>,
    ///
    #[prost(string, tag = "24")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "25")]
    pub inline_live: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(int32, tag = "26")]
    pub is_inline_live: i32,
    ///
    #[prost(message, repeated, tag = "27")]
    pub three_point: ::prost::alloc::vec::Vec<ThreePoint>,
    ///
    #[prost(int32, tag = "28")]
    pub live_status: i32,
    ///
    #[prost(message, optional, tag = "29")]
    pub vip: ::core::option::Option<VipInfo>,
    ///
    #[prost(int32, tag = "30")]
    pub attentions: i32,
    ///
    #[prost(message, optional, tag = "31")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(string, repeated, tag = "32")]
    pub user_card_info: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(message, optional, tag = "33")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "34")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
}
impl ::prost::Name for SearchAuthorNewCard {
    const NAME: &'static str = "SearchAuthorNewCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchAuthorNewCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchAuthorNewCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchBangumiCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub media_type: i32,
    ///
    #[prost(int32, tag = "4")]
    pub play_state: i32,
    ///
    #[prost(string, tag = "5")]
    pub area: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub style: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub styles: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub cv: ::prost::alloc::string::String,
    ///
    #[prost(double, tag = "9")]
    pub rating: f64,
    ///
    #[prost(int32, tag = "10")]
    pub vote: i32,
    ///
    #[prost(string, tag = "11")]
    pub target: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub staff: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub prompt: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "14")]
    pub ptime: i64,
    ///
    #[prost(string, tag = "15")]
    pub season_type_name: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "16")]
    pub episodes: ::prost::alloc::vec::Vec<Episode>,
    ///
    #[prost(int32, tag = "17")]
    pub is_selection: i32,
    ///
    #[prost(int32, tag = "18")]
    pub is_atten: i32,
    ///
    #[prost(string, tag = "19")]
    pub label: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "20")]
    pub season_id: i64,
    ///
    #[prost(string, tag = "21")]
    pub out_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "22")]
    pub out_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "23")]
    pub out_url: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "24")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(int32, tag = "25")]
    pub is_out: i32,
    ///
    #[prost(message, repeated, tag = "26")]
    pub episodes_new: ::prost::alloc::vec::Vec<EpisodeNew>,
    ///
    #[prost(message, optional, tag = "27")]
    pub watch_button: ::core::option::Option<WatchButton>,
    ///
    #[prost(string, tag = "28")]
    pub selection_style: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "29")]
    pub check_more: ::core::option::Option<CheckMore>,
    ///
    #[prost(message, optional, tag = "30")]
    pub follow_button: ::core::option::Option<FollowButton>,
    ///
    #[prost(message, optional, tag = "31")]
    pub style_label: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, repeated, tag = "32")]
    pub badges_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(string, tag = "33")]
    pub styles_v2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "34")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "35")]
    pub sale_info: ::core::option::Option<SaleInfo>,
    ///
    #[prost(string, tag = "36")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "37")]
    pub icon_type: i32,
}
impl ::prost::Name for SearchBangumiCard {
    const NAME: &'static str = "SearchBangumiCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchBangumiCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchBangumiCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchBannerCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchBannerCard {
    const NAME: &'static str = "SearchBannerCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchBannerCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchBannerCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchByTypeRequest {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub keyword: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "CategorySort", tag = "3")]
    pub category_sort: i32,
    ///
    #[prost(int64, tag = "4")]
    pub category_id: i64,
    ///
    #[prost(enumeration = "UserType", tag = "5")]
    pub user_type: i32,
    ///
    #[prost(enumeration = "UserSort", tag = "6")]
    pub user_sort: i32,
    ///
    #[prost(message, optional, tag = "7")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
    ///
    #[prost(message, optional, tag = "8")]
    pub player_args: ::core::option::Option<
        super::super::super::super::app::archive::middleware::v1::PlayerArgs,
    >,
    ///
    #[prost(string, tag = "9")]
    pub from_seid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub from_source: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub user_act: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchByTypeRequest {
    const NAME: &'static str = "SearchByTypeRequest";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchByTypeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchByTypeRequest".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchByTypeResponse {
    ///
    #[prost(string, tag = "1")]
    pub trackid: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "2")]
    pub pages: i32,
    ///
    #[prost(string, tag = "3")]
    pub exp_str: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub keyword: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub result_is_recommend: i32,
    ///
    #[prost(message, repeated, tag = "6")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    ///
    #[prost(message, optional, tag = "7")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::PaginationReply,
    >,
    ///
    #[prost(map = "string, string", tag = "8")]
    pub annotation: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(double, tag = "9")]
    pub real_exposure_ratio: f64,
    ///
    #[prost(int64, tag = "10")]
    pub page: i64,
}
impl ::prost::Name for SearchByTypeResponse {
    const NAME: &'static str = "SearchByTypeResponse";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchByTypeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchByTypeResponse".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchChatGptCard {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "2")]
    pub loading_icon_light: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, repeated, tag = "3")]
    pub loading_icon_night: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "4")]
    pub background_light: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub background_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub beta_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub disclaimer: ::core::option::Option<Disclaimer>,
    ///
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "9")]
    pub auto_expand: bool,
    ///
    #[prost(message, optional, tag = "10")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "11")]
    pub beta_text_color: ::core::option::Option<Colors>,
}
impl ::prost::Name for SearchChatGptCard {
    const NAME: &'static str = "SearchChatGPTCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchChatGPTCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchChatGPTCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCheese {
    ///
    #[prost(int64, tag = "1")]
    pub season_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub icon_type: i32,
    ///
    #[prost(message, repeated, tag = "10")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, repeated, tag = "11")]
    pub three_point: ::prost::alloc::vec::Vec<ThreePoint>,
    ///
    #[prost(message, optional, tag = "12")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(string, tag = "13")]
    pub share_from: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "14")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchCheese {
    const NAME: &'static str = "SearchCheese";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchCheese".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchCheese".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCollectionCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "4")]
    pub av_items: ::prost::alloc::vec::Vec<AvItem>,
    ///
    #[prost(message, optional, tag = "5")]
    pub bottom_button: ::core::option::Option<BottomButton>,
    ///
    #[prost(string, tag = "6")]
    pub collection_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "10")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "11")]
    pub inline_data: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(int32, tag = "12")]
    pub is_hide_title: i32,
}
impl ::prost::Name for SearchCollectionCard {
    const NAME: &'static str = "SearchCollectionCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchCollectionCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchCollectionCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchComicCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub style: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub comic_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, repeated, tag = "8")]
    pub episodes_new: ::prost::alloc::vec::Vec<EpisodeNew>,
    ///
    #[prost(message, optional, tag = "9")]
    pub rec_tag: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "10")]
    pub follow_button: ::core::option::Option<FollowButtonV2>,
    ///
    #[prost(int32, tag = "11")]
    pub is_attend: i32,
    ///
    #[prost(string, tag = "12")]
    pub selection_style: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub rec_text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "14")]
    pub cid: i64,
}
impl ::prost::Name for SearchComicCard {
    const NAME: &'static str = "SearchComicCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchComicCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchComicCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchComicInfo {
    ///
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub comic: ::core::option::Option<SearchComicCard>,
}
impl ::prost::Name for SearchComicInfo {
    const NAME: &'static str = "SearchComicInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchComicInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchComicInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchComicRequest {
    ///
    #[prost(string, tag = "1")]
    pub id_list: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchComicRequest {
    const NAME: &'static str = "SearchComicRequest";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchComicRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchComicRequest".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchComicResponse {
    ///
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<SearchComicInfo>,
}
impl ::prost::Name for SearchComicResponse {
    const NAME: &'static str = "SearchComicResponse";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchComicResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchComicResponse".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCommentCard {
    ///
    #[prost(message, optional, tag = "1")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
    ///
    #[prost(int64, tag = "2")]
    pub mid: i64,
    ///
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub pub_time: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "6")]
    pub like: i64,
    ///
    #[prost(string, tag = "7")]
    pub reply_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub prefix: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub row: i64,
    ///
    #[prost(string, tag = "11")]
    pub up_uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub icon_night: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchCommentCard {
    const NAME: &'static str = "SearchCommentCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchCommentCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchCommentCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchCommentClusterCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub items: ::prost::alloc::vec::Vec<Comment>,
    ///
    #[prost(string, tag = "3")]
    pub more_text: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "4")]
    pub is_more: bool,
}
impl ::prost::Name for SearchCommentClusterCard {
    const NAME: &'static str = "SearchCommentClusterCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchCommentClusterCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchCommentClusterCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDigitalChatCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub watch_button: ::core::option::Option<WatchButton>,
}
impl ::prost::Name for SearchDigitalChatCard {
    const NAME: &'static str = "SearchDigitalChatCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchDigitalChatCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchDigitalChatCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDoubleColumnCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub three_point: ::prost::alloc::vec::Vec<ThreePoint>,
    ///
    #[prost(message, optional, tag = "4")]
    pub share: ::core::option::Option<Share>,
    ///
    #[prost(int32, tag = "5")]
    pub play: i32,
    ///
    #[prost(int32, tag = "6")]
    pub danmaku: i32,
    ///
    #[prost(string, tag = "7")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub duration: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub mid: i64,
    ///
    #[prost(string, tag = "11")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "13")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(string, tag = "14")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "15")]
    pub ptime: i64,
    ///
    #[prost(string, tag = "16")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "17")]
    pub icon_type: i32,
    ///
    #[prost(int32, tag = "18")]
    pub aspect_ratio: i32,
}
impl ::prost::Name for SearchDoubleColumnCard {
    const NAME: &'static str = "SearchDoubleColumnCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchDoubleColumnCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchDoubleColumnCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDoubleOpusCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub item: ::prost::alloc::vec::Vec<DoubleOpusItem>,
    ///
    #[prost(message, optional, tag = "3")]
    pub watch_button: ::core::option::Option<WatchButton>,
}
impl ::prost::Name for SearchDoubleOpusCard {
    const NAME: &'static str = "SearchDoubleOpusCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchDoubleOpusCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchDoubleOpusCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDynamicCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub cover_count: i32,
    ///
    #[prost(string, repeated, tag = "4")]
    pub covers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(message, optional, tag = "5")]
    pub upper: ::core::option::Option<Upper>,
    ///
    #[prost(message, optional, tag = "6")]
    pub stat: ::core::option::Option<Stat>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub dy_topic: ::prost::alloc::vec::Vec<DyTopic>,
    ///
    #[prost(string, tag = "8")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "10")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchDynamicCard {
    const NAME: &'static str = "SearchDynamicCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchDynamicCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchDynamicCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchGameCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub reserve: ::prost::alloc::string::String,
    ///
    #[prost(float, tag = "4")]
    pub rating: f32,
    ///
    #[prost(string, tag = "5")]
    pub tags: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub notice_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub notice_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub gift_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub gift_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "10")]
    pub reserve_status: i32,
    ///
    #[prost(message, optional, tag = "11")]
    pub rank_info: ::core::option::Option<RankInfo>,
    ///
    #[prost(string, tag = "12")]
    pub special_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "13")]
    pub cloud_game_params: ::core::option::Option<CloudGameParams>,
    ///
    #[prost(bool, tag = "14")]
    pub show_cloud_game_entry: bool,
    ///
    #[prost(message, optional, tag = "15")]
    pub new_rec_tag: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(string, tag = "16")]
    pub notice_content_name: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "17")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchGameCard {
    const NAME: &'static str = "SearchGameCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchGameCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchGameCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchHotBannerCard {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub more_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub more_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub description: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchHotBannerCard {
    const NAME: &'static str = "SearchHotBannerCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchHotBannerCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchHotBannerCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchHotRecommend {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchHotRecommend {
    const NAME: &'static str = "SearchHotRecommend";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchHotRecommend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchHotRecommend".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchInlineData {
    ///
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub player_args: ::core::option::Option<PlayerArgs>,
    ///
    #[prost(int32, tag = "4")]
    pub can_play: i32,
    ///
    #[prost(message, optional, tag = "5")]
    pub args: ::core::option::Option<Args>,
    ///
    #[prost(string, tag = "6")]
    pub card_goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub card_type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub cover_left_icon1: i32,
    ///
    #[prost(int32, tag = "10")]
    pub cover_left_icon2: i32,
    ///
    #[prost(string, tag = "11")]
    pub cover_left_text1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub cover_left_text2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "13")]
    pub up_args: ::core::option::Option<UpArgs>,
    ///
    #[prost(string, tag = "14")]
    pub extra_uri: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "15")]
    pub is_fav: bool,
    ///
    #[prost(bool, tag = "16")]
    pub is_coin: bool,
    ///
    #[prost(string, tag = "17")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "18")]
    pub share: ::core::option::Option<Share>,
    ///
    #[prost(message, optional, tag = "19")]
    pub three_point: ::core::option::Option<ThreePoint2>,
    ///
    #[prost(message, repeated, tag = "20")]
    pub three_point_v2: ::prost::alloc::vec::Vec<ThreePointV2>,
    ///
    #[prost(message, optional, tag = "21")]
    pub share_plane: ::core::option::Option<SharePlane>,
    ///
    #[prost(message, optional, tag = "22")]
    pub three_point_meta: ::core::option::Option<InlineThreePointPanel>,
    ///
    #[prost(message, optional, tag = "23")]
    pub avatar: ::core::option::Option<Avatar>,
    ///
    #[prost(string, tag = "24")]
    pub cover_right_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "25")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "26")]
    pub inline_progress_bar: ::core::option::Option<InlineProgressBar>,
    ///
    #[prost(message, optional, tag = "27")]
    pub like_button: ::core::option::Option<SearchLikeButtonItem>,
    ///
    #[prost(int32, tag = "28")]
    pub official_icon: i32,
    ///
    #[prost(int32, tag = "29")]
    pub official_icon_v2: i32,
    ///
    #[prost(string, tag = "30")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "31")]
    pub traffic_config: ::core::option::Option<TrafficConfig>,
    ///
    #[prost(bool, tag = "32")]
    pub is_atten: bool,
    ///
    #[prost(message, optional, tag = "33")]
    pub goto_icon: ::core::option::Option<GotoIcon>,
    ///
    #[prost(bool, tag = "34")]
    pub disable_danmaku: bool,
    ///
    #[prost(bool, tag = "35")]
    pub hide_danmaku_switch: bool,
    ///
    #[prost(message, optional, tag = "36")]
    pub badge_style: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "37")]
    pub player_widget: ::core::option::Option<PlayerWidget>,
    ///
    #[prost(message, optional, tag = "38")]
    pub cover_badge_style: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "39")]
    pub right_top_live_badge: ::core::option::Option<RightTopLiveBadge>,
    ///
    #[prost(string, tag = "40")]
    pub report_flow_data: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchInlineData {
    const NAME: &'static str = "SearchInlineData";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchInlineData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchInlineData".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchLikeButtonItem {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub count: i64,
    ///
    #[prost(int32, tag = "3")]
    pub selected: i32,
    ///
    #[prost(bool, tag = "4")]
    pub show_count: bool,
    ///
    #[prost(message, optional, tag = "5")]
    pub like_resource: ::core::option::Option<LikeResource>,
    ///
    #[prost(message, optional, tag = "6")]
    pub like_night_resource: ::core::option::Option<LikeResource>,
    ///
    #[prost(message, optional, tag = "7")]
    pub dislike_resource: ::core::option::Option<LikeResource>,
    ///
    #[prost(message, optional, tag = "8")]
    pub dislike_night_resource: ::core::option::Option<LikeResource>,
}
impl ::prost::Name for SearchLikeButtonItem {
    const NAME: &'static str = "SearchLikeButtonItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLikeButtonItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLikeButtonItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchLiveCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub rcmd_reason: ::core::option::Option<RcmdReason>,
    ///
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub online: i32,
    ///
    #[prost(string, tag = "6")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub card_left_text: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub card_left_icon: i32,
    ///
    #[prost(string, tag = "10")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub right_top_live_badge: ::core::option::Option<RightTopLiveBadge>,
    ///
    #[prost(message, optional, tag = "12")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "13")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchLiveCard {
    const NAME: &'static str = "SearchLiveCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLiveCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLiveCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchLiveInlineCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub mid: i64,
    ///
    #[prost(message, optional, tag = "4")]
    pub rcmd_reason_style: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(int64, tag = "5")]
    pub roomid: i64,
    ///
    #[prost(string, tag = "6")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub live_room_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(string, tag = "8")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "10")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "11")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
}
impl ::prost::Name for SearchLiveInlineCard {
    const NAME: &'static str = "SearchLiveInlineCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLiveInlineCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLiveInlineCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchLiveMaster {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub watched_show: ::core::option::Option<WatchedShow>,
    ///
    #[prost(string, tag = "6")]
    pub ucover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub attentions: i64,
    ///
    #[prost(int32, tag = "8")]
    pub verify_type: i32,
    ///
    #[prost(bool, tag = "9")]
    pub face_nft_new: bool,
    ///
    #[prost(string, tag = "10")]
    pub nft_damrk: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub verify_desc: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "12")]
    pub level: i32,
    ///
    #[prost(int32, tag = "13")]
    pub level_color: i32,
    ///
    #[prost(int32, tag = "14")]
    pub is_atten: i32,
    ///
    #[prost(message, optional, tag = "15")]
    pub glory_info: ::core::option::Option<GloryInfo>,
    ///
    #[prost(int64, tag = "16")]
    pub roomid: i64,
    ///
    #[prost(int64, tag = "17")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "18")]
    pub online: i32,
    ///
    #[prost(int32, tag = "19")]
    pub live_status: i32,
    ///
    #[prost(string, tag = "20")]
    pub cate_parent_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "21")]
    pub cate_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "22")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "23")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
}
impl ::prost::Name for SearchLiveMaster {
    const NAME: &'static str = "SearchLiveMaster";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLiveMaster".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLiveMaster".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchLiveRoom {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub watched_show: ::core::option::Option<WatchedShow>,
    ///
    #[prost(int64, tag = "7")]
    pub roomid: i64,
    ///
    #[prost(int64, tag = "8")]
    pub short_id: i64,
    ///
    #[prost(string, tag = "9")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub area_v2_name: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub online: i32,
    ///
    #[prost(int64, tag = "12")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "13")]
    pub live_status: i32,
    ///
    #[prost(string, tag = "14")]
    pub live_link: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchLiveRoom {
    const NAME: &'static str = "SearchLiveRoom";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLiveRoom".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLiveRoom".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SearchLiveRoomTitle {
    ///
    #[prost(int32, tag = "1")]
    pub total_count: i32,
}
impl ::prost::Name for SearchLiveRoomTitle {
    const NAME: &'static str = "SearchLiveRoomTitle";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchLiveRoomTitle".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchLiveRoomTitle".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMusicCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub new_rec_tag: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(string, tag = "7")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "9")]
    pub watch_button: ::core::option::Option<WatchButton>,
    ///
    #[prost(message, optional, tag = "10")]
    pub feedback: ::core::option::Option<Feedback>,
}
impl ::prost::Name for SearchMusicCard {
    const NAME: &'static str = "SearchMusicCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchMusicCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchMusicCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchNpsCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub options: ::prost::alloc::vec::Vec<search_nps_card::Option>,
    ///
    #[prost(message, optional, tag = "3")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
/// Nested message and enum types in `SearchNPSCard`.
pub mod search_nps_card {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Option {
        ///
        #[prost(string, tag = "1")]
        pub text: ::prost::alloc::string::String,
    }
    impl ::prost::Name for Option {
        const NAME: &'static str = "Option";
        const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
        fn full_name() -> ::prost::alloc::string::String {
            "bilibili.polymer.app.search.v1.SearchNPSCard.Option".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/bilibili.polymer.app.search.v1.SearchNPSCard.Option".into()
        }
    }
}
impl ::prost::Name for SearchNpsCard {
    const NAME: &'static str = "SearchNPSCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchNPSCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchNPSCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchNewChannelCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub id: i64,
    ///
    #[prost(string, tag = "4")]
    pub type_icon: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "5")]
    pub channel_label1: ::core::option::Option<ChannelLabel>,
    ///
    #[prost(message, optional, tag = "6")]
    pub channel_label2: ::core::option::Option<ChannelLabel>,
    ///
    #[prost(message, optional, tag = "7")]
    pub channel_button: ::core::option::Option<ChannelLabel>,
    ///
    #[prost(string, tag = "8")]
    pub design_type: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "9")]
    pub items: ::prost::alloc::vec::Vec<ChannelMixedItem>,
    ///
    #[prost(message, optional, tag = "10")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchNewChannelCard {
    const NAME: &'static str = "SearchNewChannelCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchNewChannelCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchNewChannelCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchNoResultSuggestWordCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub sug_key_word_type: i32,
    ///
    #[prost(message, optional, tag = "4")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(string, tag = "5")]
    pub prefix: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub suffix: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchNoResultSuggestWordCard {
    const NAME: &'static str = "SearchNoResultSuggestWordCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchNoResultSuggestWordCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchNoResultSuggestWordCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvReply {
    ///
    #[prost(message, repeated, tag = "1")]
    pub extra_word_list: ::prost::alloc::vec::Vec<ExtraWord>,
    ///
    #[prost(int32, tag = "2")]
    pub need_order: i32,
    ///
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    ///
    #[prost(message, repeated, tag = "4")]
    pub relation_items: ::prost::alloc::vec::Vec<DetailsRelationItem>,
    ///
    #[prost(message, optional, tag = "5")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::PaginationReply,
    >,
    ///
    #[prost(int64, tag = "6")]
    pub page: i64,
    ///
    #[prost(map = "string, string", tag = "7")]
    pub annotation: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    ///
    #[prost(string, tag = "8")]
    pub query: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub trackid: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchOgvReply {
    const NAME: &'static str = "SearchOGVReply";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOGVReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOGVReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvReq {
    ///
    #[prost(enumeration = "Sort", tag = "1")]
    pub order: i32,
    ///
    #[prost(string, tag = "2")]
    pub first_extra_word: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub second_extra_word: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub from_source: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub keyword: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub pagination: ::core::option::Option<
        super::super::super::super::pagination::Pagination,
    >,
    ///
    #[prost(message, optional, tag = "7")]
    pub player_args: ::core::option::Option<
        super::super::super::super::app::archive::middleware::v1::PlayerArgs,
    >,
    ///
    #[prost(string, tag = "8")]
    pub user_act: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "9")]
    pub need_ogv_extra_word: bool,
}
impl ::prost::Name for SearchOgvReq {
    const NAME: &'static str = "SearchOGVReq";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOGVReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOGVReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub sub_title1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub sub_title2: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub bg_cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub special_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub cover_uri: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchOgvCard {
    const NAME: &'static str = "SearchOgvCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvChannelCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub media_id: i64,
    ///
    #[prost(string, tag = "4")]
    pub styles: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub area: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub staff: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub watch_button: ::core::option::Option<WatchButton>,
    ///
    #[prost(double, tag = "9")]
    pub rating: f64,
    ///
    #[prost(string, tag = "10")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "11")]
    pub badges_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(string, tag = "12")]
    pub styles_v2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "13")]
    pub purchase_button: ::core::option::Option<PurchaseButton>,
    ///
    #[prost(message, optional, tag = "14")]
    pub style_label: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "15")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchOgvChannelCard {
    const NAME: &'static str = "SearchOgvChannelCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvChannelCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvChannelCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvClusterCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, boxed, tag = "2")]
    pub single_card: ::core::option::Option<::prost::alloc::boxed::Box<Item>>,
    ///
    #[prost(message, optional, tag = "3")]
    pub relate: ::core::option::Option<OgvClusterCardRelate>,
    ///
    #[prost(int32, tag = "4")]
    pub inline_title_style: i32,
}
impl ::prost::Name for SearchOgvClusterCard {
    const NAME: &'static str = "SearchOgvClusterCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvClusterCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvClusterCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvInlineCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub danmaku: i32,
    ///
    #[prost(string, tag = "5")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "8")]
    pub mid: i64,
    ///
    #[prost(int64, tag = "9")]
    pub play: i64,
    ///
    #[prost(message, optional, tag = "10")]
    pub ogv_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "11")]
    pub ogv_clip_info: ::core::option::Option<OgvClipInfo>,
    ///
    #[prost(message, optional, tag = "12")]
    pub watch_button: ::core::option::Option<WatchButton>,
    ///
    #[prost(string, tag = "13")]
    pub score: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "14")]
    pub ogv_inline_exp: i32,
    ///
    #[prost(message, repeated, tag = "15")]
    pub badges_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "16")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "17")]
    pub sale_info: ::core::option::Option<SaleInfo>,
}
impl ::prost::Name for SearchOgvInlineCard {
    const NAME: &'static str = "SearchOgvInlineCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvInlineCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvInlineCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvRecommendCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<OgvRecommendWord>,
    ///
    #[prost(string, tag = "4")]
    pub special_bg_color: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchOgvRecommendCard {
    const NAME: &'static str = "SearchOgvRecommendCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvRecommendCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvRecommendCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOgvRelationCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub special_bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub more_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub more_url: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "6")]
    pub items: ::prost::alloc::vec::Vec<DetailsRelationItem>,
    ///
    #[prost(int32, tag = "7")]
    pub is_new_style: i32,
    ///
    #[prost(message, optional, tag = "8")]
    pub ogv_card_ui: ::core::option::Option<OgvCardUi>,
    ///
    #[prost(int32, tag = "9")]
    pub more_search_type: i32,
    ///
    #[prost(message, optional, tag = "10")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "11")]
    pub sale_info: ::core::option::Option<SaleInfo>,
}
impl ::prost::Name for SearchOgvRelationCard {
    const NAME: &'static str = "SearchOgvRelationCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOgvRelationCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOgvRelationCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOlympicGameCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub sports_match_item: ::core::option::Option<SportsMatchItem>,
    ///
    #[prost(message, optional, tag = "4")]
    pub match_top: ::core::option::Option<MatchItem>,
    ///
    #[prost(string, tag = "5")]
    pub bg_cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "6")]
    pub extra_link: ::prost::alloc::vec::Vec<ExtraLink>,
    ///
    #[prost(string, tag = "7")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "8")]
    pub ugc_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "9")]
    pub live_room_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "10")]
    pub match_bottom: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, optional, tag = "11")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchOlympicGameCard {
    const NAME: &'static str = "SearchOlympicGameCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOlympicGameCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOlympicGameCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchOlympicWikiCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub card_business_badge: ::core::option::Option<CardBusinessBadge>,
    ///
    #[prost(message, optional, tag = "4")]
    pub read_more: ::core::option::Option<NavigationButton>,
    ///
    #[prost(string, tag = "5")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "6")]
    pub ugc_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "7")]
    pub live_room_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "8")]
    pub pedia_cover: ::core::option::Option<PediaCover>,
    ///
    #[prost(message, repeated, tag = "9")]
    pub navigation: ::prost::alloc::vec::Vec<Navigation>,
}
impl ::prost::Name for SearchOlympicWikiCard {
    const NAME: &'static str = "SearchOlympicWikiCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchOlympicWikiCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchOlympicWikiCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPediaCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub navigation: ::prost::alloc::vec::Vec<Navigation>,
    ///
    #[prost(message, optional, tag = "4")]
    pub read_more: ::core::option::Option<NavigationButton>,
    ///
    #[prost(int32, tag = "5")]
    pub navigation_module_count: i32,
    ///
    #[prost(message, optional, tag = "6")]
    pub pedia_cover: ::core::option::Option<PediaCover>,
    ///
    #[prost(message, optional, tag = "7")]
    pub card_business_badge: ::core::option::Option<CardBusinessBadge>,
}
impl ::prost::Name for SearchPediaCard {
    const NAME: &'static str = "SearchPediaCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchPediaCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchPediaCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPediaPicCard {
    ///
    #[prost(string, tag = "1")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub pic_navigation: ::prost::alloc::vec::Vec<PicNavigation>,
    ///
    #[prost(message, optional, tag = "3")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "4")]
    pub pedia_card_ui: ::core::option::Option<PediaCardUi>,
    ///
    #[prost(int32, tag = "5")]
    pub cover_type: i32,
}
impl ::prost::Name for SearchPediaPicCard {
    const NAME: &'static str = "SearchPediaPicCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchPediaPicCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchPediaPicCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPlayListCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub av_items: ::prost::alloc::vec::Vec<AvItem>,
    ///
    #[prost(message, optional, tag = "3")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "4")]
    pub bottom_button: ::core::option::Option<BottomButton>,
    ///
    #[prost(message, optional, tag = "5")]
    pub inline_data: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(string, tag = "6")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub is_hide_title: i32,
}
impl ::prost::Name for SearchPlayListCard {
    const NAME: &'static str = "SearchPlayListCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchPlayListCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchPlayListCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPurchaseCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub venue: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub price: i32,
    ///
    #[prost(string, tag = "6")]
    pub price_complete: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "7")]
    pub price_type: i32,
    ///
    #[prost(int32, tag = "8")]
    pub required_number: i32,
    ///
    #[prost(string, tag = "9")]
    pub city: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub show_time: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "11")]
    pub id: i64,
    ///
    #[prost(string, tag = "12")]
    pub shop_name: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "13")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchPurchaseCard {
    const NAME: &'static str = "SearchPurchaseCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchPurchaseCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchPurchaseCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchQaCard {
    ///
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "2")]
    pub loading_icon_light: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, repeated, tag = "3")]
    pub loading_icon_night: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, tag = "4")]
    pub background_light: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub background_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub beta_text: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub beta_text_color: ::core::option::Option<Colors>,
    ///
    #[prost(message, optional, tag = "8")]
    pub disclaimer: ::core::option::Option<Disclaimer>,
    ///
    #[prost(string, tag = "9")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "10")]
    pub auto_expand: bool,
    ///
    #[prost(message, optional, tag = "11")]
    pub result: ::core::option::Option<
        super::super::super::super::broadcast::message::main::ChatResult,
    >,
    ///
    #[prost(message, optional, tag = "12")]
    pub feedback: ::core::option::Option<Feedback>,
}
impl ::prost::Name for SearchQaCard {
    const NAME: &'static str = "SearchQACard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchQACard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchQACard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRecommendTipCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchRecommendTipCard {
    const NAME: &'static str = "SearchRecommendTipCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchRecommendTipCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchRecommendTipCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRecommendWordCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub list: ::prost::alloc::vec::Vec<RecommendWord>,
}
impl ::prost::Name for SearchRecommendWordCard {
    const NAME: &'static str = "SearchRecommendWordCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchRecommendWordCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchRecommendWordCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchRelatedSearch {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub related_query_list: ::prost::alloc::vec::Vec<RelatedQuery>,
    ///
    #[prost(message, optional, tag = "3")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchRelatedSearch {
    const NAME: &'static str = "SearchRelatedSearch";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchRelatedSearch".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchRelatedSearch".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReserveRequest {
    ///
    #[prost(int64, tag = "1")]
    pub sid: i64,
    ///
    #[prost(string, tag = "2")]
    pub oid: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchReserveRequest {
    const NAME: &'static str = "SearchReserveRequest";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchReserveRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchReserveRequest".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchReserveResponse {
    ///
    #[prost(message, optional, tag = "1")]
    pub reserve_info: ::core::option::Option<ReserveInfo>,
}
impl ::prost::Name for SearchReserveResponse {
    const NAME: &'static str = "SearchReserveResponse";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchReserveResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchReserveResponse".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSeriesCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub av_items: ::prost::alloc::vec::Vec<AvItem>,
    ///
    #[prost(message, optional, tag = "3")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "4")]
    pub bottom_button: ::core::option::Option<BottomButton>,
    ///
    #[prost(message, optional, tag = "5")]
    pub inline_data: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(string, tag = "6")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "8")]
    pub is_hide_title: i32,
}
impl ::prost::Name for SearchSeriesCard {
    const NAME: &'static str = "SearchSeriesCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSeriesCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSeriesCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSpecialCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub new_rec_tags: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "4")]
    pub card_business_badge: ::core::option::Option<CardBusinessBadge>,
    ///
    #[prost(string, tag = "5")]
    pub badge: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "7")]
    pub new_rec_tags_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "8")]
    pub rcmd_reason: ::core::option::Option<RcmdReason>,
    ///
    #[prost(message, optional, tag = "9")]
    pub reserve_info: ::core::option::Option<ReserveInfo>,
    ///
    #[prost(message, optional, tag = "10")]
    pub card_layout: ::core::option::Option<CardLayout>,
}
impl ::prost::Name for SearchSpecialCard {
    const NAME: &'static str = "SearchSpecialCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSpecialCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSpecialCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSpecialGuideCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub phone: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub desc: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchSpecialGuideCard {
    const NAME: &'static str = "SearchSpecialGuideCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSpecialGuideCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSpecialGuideCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSportCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub bg_cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub match_top: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, optional, tag = "5")]
    pub match_bottom: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, repeated, tag = "6")]
    pub extra_link: ::prost::alloc::vec::Vec<ExtraLink>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub items: ::prost::alloc::vec::Vec<MatchInfoObj>,
    ///
    #[prost(int64, tag = "8")]
    pub id: i64,
    ///
    #[prost(message, optional, tag = "9")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "10")]
    pub player_grade: ::core::option::Option<PlayerGrade>,
}
impl ::prost::Name for SearchSportCard {
    const NAME: &'static str = "SearchSportCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSportCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSportCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSportInlineCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub bg_cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "4")]
    pub match_top: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, optional, tag = "5")]
    pub match_bottom: ::core::option::Option<MatchItem>,
    ///
    #[prost(message, repeated, tag = "6")]
    pub extra_link: ::prost::alloc::vec::Vec<ExtraLink>,
    ///
    #[prost(message, repeated, tag = "7")]
    pub items: ::prost::alloc::vec::Vec<MatchInfoObj>,
    ///
    #[prost(int64, tag = "8")]
    pub id: i64,
    ///
    #[prost(message, optional, tag = "9")]
    pub esports_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(string, tag = "10")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "11")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "12")]
    pub player_grade: ::core::option::Option<PlayerGrade>,
}
impl ::prost::Name for SearchSportInlineCard {
    const NAME: &'static str = "SearchSportInlineCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSportInlineCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSportInlineCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchSubjectCard {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub hot_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub more_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub more_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub topic_type: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "9")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, repeated, tag = "10")]
    pub items: ::prost::alloc::vec::Vec<TopicItem>,
    ///
    #[prost(message, optional, tag = "11")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "12")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "13")]
    pub button: ::core::option::Option<WatchButton>,
}
impl ::prost::Name for SearchSubjectCard {
    const NAME: &'static str = "SearchSubjectCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchSubjectCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchSubjectCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTimeLineCard {
    ///
    #[prost(int64, tag = "1")]
    pub time_line_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub time_line_title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub time_line_events: ::prost::alloc::vec::Vec<TimeLineEvents>,
    ///
    #[prost(bool, tag = "4")]
    pub has_more: bool,
    ///
    #[prost(int64, tag = "5")]
    pub start_time: i64,
    ///
    #[prost(int64, tag = "6")]
    pub end_time: i64,
    ///
    #[prost(message, optional, tag = "7")]
    pub watch_button: ::core::option::Option<WatchButton>,
}
impl ::prost::Name for SearchTimeLineCard {
    const NAME: &'static str = "SearchTimeLineCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchTimeLineCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchTimeLineCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTipsCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub sub_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "134")]
    pub cover_night: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchTipsCard {
    const NAME: &'static str = "SearchTipsCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchTipsCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchTipsCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchTopGameCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub array: i32,
    ///
    #[prost(string, tag = "4")]
    pub background_image: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub button_type: i32,
    ///
    #[prost(string, tag = "6")]
    pub game_icon: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub game_base_id: i64,
    ///
    #[prost(int32, tag = "8")]
    pub game_status: i32,
    ///
    #[prost(string, tag = "9")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "10")]
    pub top_game_ui: ::core::option::Option<TopGameUi>,
    ///
    #[prost(string, tag = "11")]
    pub notice_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub notice_name: ::prost::alloc::string::String,
    ///
    #[prost(float, tag = "13")]
    pub rating: f32,
    ///
    #[prost(string, tag = "14")]
    pub score: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "15")]
    pub tab_info: ::prost::alloc::vec::Vec<TabInfo>,
    ///
    #[prost(string, tag = "16")]
    pub tags: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "17")]
    pub ugc_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(string, tag = "18")]
    pub video_cover_image: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "19")]
    pub inline_live: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "20")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "21")]
    pub rec_tag: ::core::option::Option<ReasonStyle>,
}
impl ::prost::Name for SearchTopGameCard {
    const NAME: &'static str = "SearchTopGameCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchTopGameCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchTopGameCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchUpRecommend {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(int32, tag = "2")]
    pub card_style: i32,
    ///
    #[prost(string, tag = "3")]
    pub more_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub more_text: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub show_follow_button: i32,
    ///
    #[prost(message, repeated, tag = "6")]
    pub items: ::prost::alloc::vec::Vec<UpRecommendItem>,
    ///
    #[prost(string, tag = "7")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchUpRecommend {
    const NAME: &'static str = "SearchUPRecommend";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchUPRecommend".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchUPRecommend".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchUgcInlineCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub danmaku: i32,
    ///
    #[prost(string, tag = "5")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub inline_type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub mid: i64,
    ///
    #[prost(int64, tag = "8")]
    pub play: i64,
    ///
    #[prost(message, optional, tag = "9")]
    pub ugc_inline: ::core::option::Option<SearchInlineData>,
    ///
    #[prost(message, optional, tag = "10")]
    pub full_text: ::core::option::Option<FullTextResult>,
    ///
    #[prost(message, optional, tag = "11")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "12")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(message, optional, tag = "13")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
}
impl ::prost::Name for SearchUgcInlineCard {
    const NAME: &'static str = "SearchUgcInlineCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchUgcInlineCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchUgcInlineCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchUpperCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub sign: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub fans: i32,
    ///
    #[prost(int32, tag = "5")]
    pub archives: i32,
    ///
    #[prost(int32, tag = "6")]
    pub live_status: i32,
    ///
    #[prost(int32, tag = "7")]
    pub roomid: i32,
    ///
    #[prost(message, optional, tag = "8")]
    pub official_verify: ::core::option::Option<OfficialVerify>,
    ///
    #[prost(int32, tag = "9")]
    pub face_nft_new: i32,
    ///
    #[prost(message, optional, tag = "10")]
    pub nft_face_icon: ::core::option::Option<NftFaceIcon>,
    ///
    #[prost(message, repeated, tag = "11")]
    pub av_items: ::prost::alloc::vec::Vec<AvItem>,
    ///
    #[prost(bool, tag = "12")]
    pub is_up: bool,
    ///
    #[prost(int32, tag = "13")]
    pub attentions: i32,
    ///
    #[prost(int32, tag = "14")]
    pub level: i32,
    ///
    #[prost(int32, tag = "15")]
    pub is_senior_member: i32,
    ///
    #[prost(message, optional, tag = "16")]
    pub vip: ::core::option::Option<VipInfo>,
    ///
    #[prost(message, optional, tag = "17")]
    pub relation: ::core::option::Option<Relation>,
    ///
    #[prost(string, tag = "18")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "19")]
    pub notice: ::core::option::Option<Notice>,
    ///
    #[prost(message, optional, tag = "20")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
    ///
    #[prost(string, tag = "21")]
    pub user_card_desc: ::prost::alloc::string::String,
}
impl ::prost::Name for SearchUpperCard {
    const NAME: &'static str = "SearchUpperCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchUpperCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchUpperCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchVideoCard {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "3")]
    pub rcmd_reason: ::core::option::Option<RcmdReason>,
    ///
    #[prost(message, repeated, tag = "4")]
    pub new_rec_tags: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, repeated, tag = "5")]
    pub three_point: ::prost::alloc::vec::Vec<ThreePoint>,
    ///
    #[prost(message, optional, tag = "6")]
    pub share: ::core::option::Option<Share>,
    ///
    #[prost(message, optional, tag = "7")]
    pub card_business_badge: ::core::option::Option<CardBusinessBadge>,
    ///
    #[prost(int32, tag = "8")]
    pub play: i32,
    ///
    #[prost(int32, tag = "9")]
    pub danmaku: i32,
    ///
    #[prost(string, tag = "10")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub duration: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "13")]
    pub badges: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(int64, tag = "14")]
    pub mid: i64,
    ///
    #[prost(string, tag = "15")]
    pub show_card_desc1: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "16")]
    pub show_card_desc2: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "17")]
    pub full_text: ::core::option::Option<FullTextResult>,
    ///
    #[prost(message, repeated, tag = "18")]
    pub new_rec_tags_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, repeated, tag = "19")]
    pub badges_v2: ::prost::alloc::vec::Vec<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "20")]
    pub feedback: ::core::option::Option<Feedback>,
    ///
    #[prost(message, optional, tag = "21")]
    pub time_line: ::core::option::Option<TimeLine>,
    ///
    #[prost(string, tag = "22")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "23")]
    pub ptime: i64,
    ///
    #[prost(string, tag = "24")]
    pub view_content: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "25")]
    pub icon_type: i32,
    ///
    #[prost(message, optional, tag = "26")]
    pub folding_time_line: ::core::option::Option<FoldingTimeLine>,
    ///
    #[prost(message, optional, tag = "27")]
    pub charging_label: ::core::option::Option<LabelStyle>,
    ///
    #[prost(message, optional, tag = "28")]
    pub card_layout: ::core::option::Option<CardLayout>,
    ///
    #[prost(string, tag = "29")]
    pub author_prefix: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "30")]
    pub highlight_tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(message, optional, tag = "31")]
    pub cover_badge: ::core::option::Option<ReasonStyle>,
    ///
    #[prost(message, optional, tag = "32")]
    pub short_ogv_info: ::core::option::Option<ShortOgvInfo>,
}
impl ::prost::Name for SearchVideoCard {
    const NAME: &'static str = "SearchVideoCard";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SearchVideoCard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SearchVideoCard".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Share {
    ///
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "2")]
    pub video: ::core::option::Option<Video>,
}
impl ::prost::Name for Share {
    const NAME: &'static str = "Share";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Share".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Share".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShareButtonItem {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "2")]
    pub button_metas: ::prost::alloc::vec::Vec<ButtonMeta>,
}
impl ::prost::Name for ShareButtonItem {
    const NAME: &'static str = "ShareButtonItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ShareButtonItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ShareButtonItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SharePlane {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub share_subtitle: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub aid: i64,
    ///
    #[prost(string, tag = "6")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "7")]
    pub share_to: ::core::option::Option<ShareTo>,
    ///
    #[prost(string, tag = "8")]
    pub author: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub author_id: i64,
    ///
    #[prost(string, tag = "10")]
    pub short_link: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub play_number: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "12")]
    pub room_id: i64,
    ///
    #[prost(int32, tag = "13")]
    pub ep_id: i32,
    ///
    #[prost(string, tag = "14")]
    pub area_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub author_face: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "16")]
    pub season_id: i32,
    ///
    #[prost(string, tag = "17")]
    pub share_from: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "18")]
    pub season_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "19")]
    pub from: ::prost::alloc::string::String,
}
impl ::prost::Name for SharePlane {
    const NAME: &'static str = "SharePlane";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SharePlane".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SharePlane".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ShareTo {
    ///
    #[prost(bool, tag = "1")]
    pub dynamic: bool,
    ///
    #[prost(bool, tag = "2")]
    pub im: bool,
    ///
    #[prost(bool, tag = "3")]
    pub copy: bool,
    ///
    #[prost(bool, tag = "4")]
    pub more: bool,
    ///
    #[prost(bool, tag = "5")]
    pub wechat: bool,
    ///
    #[prost(bool, tag = "6")]
    pub weibo: bool,
    ///
    #[prost(bool, tag = "7")]
    pub wechat_monment: bool,
    ///
    #[prost(bool, tag = "8")]
    pub qq: bool,
    ///
    #[prost(bool, tag = "9")]
    pub qzone: bool,
    ///
    #[prost(bool, tag = "10")]
    pub facebook: bool,
    ///
    #[prost(bool, tag = "11")]
    pub line: bool,
    ///
    #[prost(bool, tag = "12")]
    pub messenger: bool,
    ///
    #[prost(bool, tag = "13")]
    pub whats_app: bool,
    ///
    #[prost(bool, tag = "14")]
    pub twitter: bool,
}
impl ::prost::Name for ShareTo {
    const NAME: &'static str = "ShareTo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ShareTo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ShareTo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShortOgvInfo {
    ///
    #[prost(string, tag = "1")]
    pub app_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub season_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub episode_id: i64,
}
impl ::prost::Name for ShortOgvInfo {
    const NAME: &'static str = "ShortOGVInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ShortOGVInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ShortOGVInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Space {
    ///
    #[prost(int32, tag = "1")]
    pub show: i32,
    ///
    #[prost(string, tag = "2")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub text_color_night: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub space_url: ::prost::alloc::string::String,
}
impl ::prost::Name for Space {
    const NAME: &'static str = "Space";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Space".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Space".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SportsMatchItem {
    ///
    #[prost(int64, tag = "1")]
    pub match_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub season_id: i64,
    ///
    #[prost(string, tag = "3")]
    pub match_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub img: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub begin_time_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub match_status_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub sub_content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub sub_extra_icon: ::prost::alloc::string::String,
}
impl ::prost::Name for SportsMatchItem {
    const NAME: &'static str = "SportsMatchItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.SportsMatchItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.SportsMatchItem".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Stat {
    ///
    #[prost(int32, tag = "1")]
    pub play: i32,
    ///
    #[prost(int32, tag = "2")]
    pub like: i32,
    ///
    #[prost(int32, tag = "3")]
    pub reply: i32,
}
impl ::prost::Name for Stat {
    const NAME: &'static str = "Stat";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Stat".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Stat".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TabInfo {
    ///
    #[prost(string, tag = "1")]
    pub tab_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub tab_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub sort: i32,
}
impl ::prost::Name for TabInfo {
    const NAME: &'static str = "TabInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TabInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TabInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextButton {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for TextButton {
    const NAME: &'static str = "TextButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TextButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TextButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextLabel {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub uri: ::prost::alloc::string::String,
}
impl ::prost::Name for TextLabel {
    const NAME: &'static str = "TextLabel";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TextLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TextLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Texts {
    ///
    #[prost(string, tag = "1")]
    pub booking_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub unbooking_text: ::prost::alloc::string::String,
}
impl ::prost::Name for Texts {
    const NAME: &'static str = "Texts";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Texts".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Texts".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreePoint {
    ///
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
}
impl ::prost::Name for ThreePoint {
    const NAME: &'static str = "ThreePoint";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ThreePoint".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ThreePoint".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreePoint2 {
    ///
    #[prost(message, repeated, tag = "1")]
    pub dislike_reasons: ::prost::alloc::vec::Vec<DislikeReason>,
    ///
    #[prost(message, repeated, tag = "2")]
    pub feedbacks: ::prost::alloc::vec::Vec<DislikeReason>,
    ///
    #[prost(int32, tag = "3")]
    pub watch_later: i32,
}
impl ::prost::Name for ThreePoint2 {
    const NAME: &'static str = "ThreePoint2";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ThreePoint2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ThreePoint2".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreePointV2 {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub reasons: ::prost::alloc::vec::Vec<DislikeReason>,
    ///
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub id: i64,
}
impl ::prost::Name for ThreePointV2 {
    const NAME: &'static str = "ThreePointV2";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ThreePointV2".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ThreePointV2".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreePointV3 {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub selected_title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub subtitle: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "4")]
    pub reasons: ::prost::alloc::vec::Vec<DislikeReason>,
    ///
    #[prost(string, tag = "5")]
    pub r#type: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "6")]
    pub id: i64,
    ///
    #[prost(int32, tag = "7")]
    pub selected: i32,
    ///
    #[prost(string, tag = "8")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub selected_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub default_id: i32,
}
impl ::prost::Name for ThreePointV3 {
    const NAME: &'static str = "ThreePointV3";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ThreePointV3".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ThreePointV3".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ThreePointV4 {
    ///
    #[prost(message, optional, tag = "1")]
    pub share_plane: ::core::option::Option<SharePlane>,
    ///
    #[prost(message, optional, tag = "2")]
    pub watch_later: ::core::option::Option<WatchLater>,
}
impl ::prost::Name for ThreePointV4 {
    const NAME: &'static str = "ThreePointV4";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.ThreePointV4".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.ThreePointV4".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeLine {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub color: i32,
    ///
    #[prost(int32, tag = "4")]
    pub segment: i32,
    ///
    #[prost(int64, tag = "5")]
    pub start_second: i64,
    ///
    #[prost(int64, tag = "6")]
    pub end_second: i64,
    ///
    #[prost(int32, tag = "7")]
    pub init_position: i32,
    ///
    #[prost(int32, tag = "8")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "9")]
    pub items: ::prost::alloc::vec::Vec<VideoTextItem>,
}
impl ::prost::Name for TimeLine {
    const NAME: &'static str = "TimeLine";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TimeLine".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TimeLine".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeLineEvents {
    ///
    #[prost(int64, tag = "1")]
    pub event_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub time_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub jump_link: ::prost::alloc::string::String,
}
impl ::prost::Name for TimeLineEvents {
    const NAME: &'static str = "TimeLineEvents";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TimeLineEvents".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TimeLineEvents".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopGameUi {
    ///
    #[prost(string, tag = "1")]
    pub background_image: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub cover_default_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub gaussian_blur_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub mask_color_value: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub mask_opacity: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub module_color: ::prost::alloc::string::String,
}
impl ::prost::Name for TopGameUi {
    const NAME: &'static str = "TopGameUI";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TopGameUI".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TopGameUI".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TopicItem {
    ///
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub param: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub goto: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub linktype: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub position: i32,
    ///
    #[prost(string, tag = "6")]
    pub trackid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub id: i64,
    ///
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "9")]
    pub content_type: i32,
    ///
    #[prost(string, tag = "10")]
    pub up_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub publish_text: ::prost::alloc::string::String,
}
impl ::prost::Name for TopicItem {
    const NAME: &'static str = "TopicItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TopicItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TopicItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrafficConfig {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "2")]
    pub options: ::prost::alloc::vec::Vec<TrafficConfigOption>,
    ///
    #[prost(int64, tag = "3")]
    pub default_option_id: i64,
}
impl ::prost::Name for TrafficConfig {
    const NAME: &'static str = "TrafficConfig";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TrafficConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TrafficConfig".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrafficConfigOption {
    ///
    #[prost(int32, tag = "1")]
    pub id: i32,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
}
impl ::prost::Name for TrafficConfigOption {
    const NAME: &'static str = "TrafficConfigOption";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.TrafficConfigOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.TrafficConfigOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpRecommendItem {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(int32, tag = "2")]
    pub level: i32,
    ///
    #[prost(int32, tag = "3")]
    pub is_senior_member: i32,
    ///
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub uri: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "7")]
    pub user_card_info: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(message, repeated, tag = "8")]
    pub three_point: ::prost::alloc::vec::Vec<ThreePoint>,
    ///
    #[prost(message, optional, tag = "9")]
    pub relation: ::core::option::Option<Relation>,
    ///
    #[prost(message, optional, tag = "10")]
    pub avatar_info: ::core::option::Option<
        super::super::super::super::dagw::component::avatar::v1::AvatarItem,
    >,
    ///
    #[prost(message, optional, tag = "11")]
    pub share_plane: ::core::option::Option<SharePlane>,
    ///
    #[prost(string, tag = "12")]
    pub live_link: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "13")]
    pub is_live: i32,
}
impl ::prost::Name for UpRecommendItem {
    const NAME: &'static str = "UPRecommendItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.UPRecommendItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.UPRecommendItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpArgs {
    ///
    #[prost(int64, tag = "1")]
    pub up_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub up_name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub up_face: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "4")]
    pub selected: i32,
}
impl ::prost::Name for UpArgs {
    const NAME: &'static str = "UpArgs";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.UpArgs".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.UpArgs".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Upper {
    ///
    #[prost(int64, tag = "1")]
    pub mid: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub cover: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub ptime_text: ::prost::alloc::string::String,
}
impl ::prost::Name for Upper {
    const NAME: &'static str = "Upper";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Upper".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Upper".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Video {
    ///
    #[prost(string, tag = "1")]
    pub bvid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(string, tag = "3")]
    pub share_subtitle: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "4")]
    pub is_hot_label: bool,
    ///
    #[prost(int32, tag = "5")]
    pub page: i32,
    ///
    #[prost(int32, tag = "6")]
    pub page_count: i32,
    ///
    #[prost(string, tag = "7")]
    pub short_link: ::prost::alloc::string::String,
}
impl ::prost::Name for Video {
    const NAME: &'static str = "Video";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.Video".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.Video".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoTextItem {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub start_second: i64,
    ///
    #[prost(string, tag = "4")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub img_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub video_time: ::prost::alloc::string::String,
}
impl ::prost::Name for VideoTextItem {
    const NAME: &'static str = "VideoTextItem";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.VideoTextItem".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.VideoTextItem".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VipInfo {
    ///
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int32, tag = "2")]
    pub status: i32,
    ///
    #[prost(int64, tag = "3")]
    pub due_date: i64,
    ///
    #[prost(int32, tag = "4")]
    pub vip_pay_type: i32,
    ///
    #[prost(int32, tag = "5")]
    pub theme_type: i32,
    ///
    #[prost(message, optional, tag = "6")]
    pub label: ::core::option::Option<VipLabel>,
    ///
    #[prost(int32, tag = "7")]
    pub avatar_subscript: i32,
    ///
    #[prost(string, tag = "8")]
    pub nickname_color: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "9")]
    pub role: i64,
    ///
    #[prost(string, tag = "10")]
    pub avatar_subscript_url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub tv_vip_status: i32,
    ///
    #[prost(int32, tag = "12")]
    pub tv_vip_pay_type: i32,
}
impl ::prost::Name for VipInfo {
    const NAME: &'static str = "VipInfo";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.VipInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.VipInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VipLabel {
    ///
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub label_theme: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text_color: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "5")]
    pub bg_style: i32,
    ///
    #[prost(string, tag = "6")]
    pub bg_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub border_color: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "8")]
    pub use_img_label: bool,
    ///
    #[prost(string, tag = "9")]
    pub img_label_uri_hans: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub img_label_uri_hant: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub img_label_uri_hans_static: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub img_label_uri_hant_static: ::prost::alloc::string::String,
}
impl ::prost::Name for VipLabel {
    const NAME: &'static str = "VipLabel";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.VipLabel".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.VipLabel".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchButton {
    ///
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub link: ::prost::alloc::string::String,
}
impl ::prost::Name for WatchButton {
    const NAME: &'static str = "WatchButton";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.WatchButton".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.WatchButton".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchLater {
    ///
    #[prost(int64, tag = "1")]
    pub aid: i64,
    ///
    #[prost(string, tag = "2")]
    pub bvid: ::prost::alloc::string::String,
}
impl ::prost::Name for WatchLater {
    const NAME: &'static str = "WatchLater";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.WatchLater".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.WatchLater".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchedShow {
    ///
    #[prost(bool, tag = "1")]
    pub switch: bool,
    ///
    #[prost(int64, tag = "2")]
    pub num: i64,
    ///
    #[prost(string, tag = "3")]
    pub text_small: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub text_large: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub icon_location: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub icon_web: ::prost::alloc::string::String,
}
impl ::prost::Name for WatchedShow {
    const NAME: &'static str = "WatchedShow";
    const PACKAGE: &'static str = "bilibili.polymer.app.search.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.polymer.app.search.v1.WatchedShow".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.polymer.app.search.v1.WatchedShow".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CategorySort {
    ///
    Default = 0,
    ///
    PublishTime = 1,
    ///
    ClickCount = 2,
    ///
    CommentCount = 3,
    ///
    LikeCount = 4,
}
impl CategorySort {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "CATEGORY_SORT_DEFAULT",
            Self::PublishTime => "CATEGORY_SORT_PUBLISH_TIME",
            Self::ClickCount => "CATEGORY_SORT_CLICK_COUNT",
            Self::CommentCount => "CATEGORY_SORT_COMMENT_COUNT",
            Self::LikeCount => "CATEGORY_SORT_LIKE_COUNT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CATEGORY_SORT_DEFAULT" => Some(Self::Default),
            "CATEGORY_SORT_PUBLISH_TIME" => Some(Self::PublishTime),
            "CATEGORY_SORT_CLICK_COUNT" => Some(Self::ClickCount),
            "CATEGORY_SORT_COMMENT_COUNT" => Some(Self::CommentCount),
            "CATEGORY_SORT_LIKE_COUNT" => Some(Self::LikeCount),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OpusType {
    ///
    Unknown = 0,
    ///
    Article = 1,
    ///
    Twitter = 2,
}
impl OpusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "OPUS_TYPE_UNKNOWN",
            Self::Article => "OPUS_TYPE_ARTICLE",
            Self::Twitter => "OPUS_TYPE_TWITTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OPUS_TYPE_UNKNOWN" => Some(Self::Unknown),
            "OPUS_TYPE_ARTICLE" => Some(Self::Article),
            "OPUS_TYPE_TWITTER" => Some(Self::Twitter),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Sort {
    ///
    Default = 0,
    ///
    ViewCount = 1,
    ///
    PublishTime = 2,
    ///
    DanmakuCount = 3,
}
impl Sort {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "SORT_DEFAULT",
            Self::ViewCount => "SORT_VIEW_COUNT",
            Self::PublishTime => "SORT_PUBLISH_TIME",
            Self::DanmakuCount => "SORT_DANMAKU_COUNT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SORT_DEFAULT" => Some(Self::Default),
            "SORT_VIEW_COUNT" => Some(Self::ViewCount),
            "SORT_PUBLISH_TIME" => Some(Self::PublishTime),
            "SORT_DANMAKU_COUNT" => Some(Self::DanmakuCount),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserSort {
    ///
    Default = 0,
    ///
    FansDescend = 1,
    ///
    FansAscend = 2,
    ///
    LevelDescend = 3,
    ///
    LevelAscend = 4,
}
impl UserSort {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "USER_SORT_DEFAULT",
            Self::FansDescend => "USER_SORT_FANS_DESCEND",
            Self::FansAscend => "USER_SORT_FANS_ASCEND",
            Self::LevelDescend => "USER_SORT_LEVEL_DESCEND",
            Self::LevelAscend => "USER_SORT_LEVEL_ASCEND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "USER_SORT_DEFAULT" => Some(Self::Default),
            "USER_SORT_FANS_DESCEND" => Some(Self::FansDescend),
            "USER_SORT_FANS_ASCEND" => Some(Self::FansAscend),
            "USER_SORT_LEVEL_DESCEND" => Some(Self::LevelDescend),
            "USER_SORT_LEVEL_ASCEND" => Some(Self::LevelAscend),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UserType {
    ///
    All = 0,
    ///
    Up = 1,
    ///
    NormalUser = 2,
    ///
    AuthenticatedUser = 3,
}
impl UserType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::All => "ALL",
            Self::Up => "UP",
            Self::NormalUser => "NORMAL_USER",
            Self::AuthenticatedUser => "AUTHENTICATED_USER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALL" => Some(Self::All),
            "UP" => Some(Self::Up),
            "NORMAL_USER" => Some(Self::NormalUser),
            "AUTHENTICATED_USER" => Some(Self::AuthenticatedUser),
            _ => None,
        }
    }
}
/// Generated client implementations.
#[cfg(feature = "feat-enable-generated-client")]
pub mod search_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    #[derive(Debug, Clone)]
    pub struct SearchClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> SearchClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SearchClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            SearchClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        pub async fn search_all(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchAllRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchAllResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.polymer.app.search.v1.Search", "SearchAll"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_by_type(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchByTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchByTypeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchByType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.polymer.app.search.v1.Search",
                        "SearchByType",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_comic(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchComicRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchComicResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchComic",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.polymer.app.search.v1.Search",
                        "SearchComic",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_ogv(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchOgvReq>,
        ) -> std::result::Result<tonic::Response<super::SearchOgvReply>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchOGV",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bilibili.polymer.app.search.v1.Search", "SearchOGV"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_reserve(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchReserveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchReserveResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchReserve",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.polymer.app.search.v1.Search",
                        "SearchReserve",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn search_reserve_cancel(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchReserveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchReserveResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.polymer.app.search.v1.Search/SearchReserveCancel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "bilibili.polymer.app.search.v1.Search",
                        "SearchReserveCancel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "feat-enable-generated-server")]
pub mod search_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SearchServer.
    #[async_trait]
    pub trait Search: std::marker::Send + std::marker::Sync + 'static {
        ///
        async fn search_all(
            &self,
            request: tonic::Request<super::SearchAllRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchAllResponse>,
            tonic::Status,
        >;
        ///
        async fn search_by_type(
            &self,
            request: tonic::Request<super::SearchByTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchByTypeResponse>,
            tonic::Status,
        >;
        ///
        async fn search_comic(
            &self,
            request: tonic::Request<super::SearchComicRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchComicResponse>,
            tonic::Status,
        >;
        ///
        async fn search_ogv(
            &self,
            request: tonic::Request<super::SearchOgvReq>,
        ) -> std::result::Result<tonic::Response<super::SearchOgvReply>, tonic::Status>;
        ///
        async fn search_reserve(
            &self,
            request: tonic::Request<super::SearchReserveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchReserveResponse>,
            tonic::Status,
        >;
        ///
        async fn search_reserve_cancel(
            &self,
            request: tonic::Request<super::SearchReserveRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchReserveResponse>,
            tonic::Status,
        >;
    }
    ///
    #[derive(Debug)]
    pub struct SearchServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> SearchServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SearchServer<T>
    where
        T: Search,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/bilibili.polymer.app.search.v1.Search/SearchAll" => {
                    #[allow(non_camel_case_types)]
                    struct SearchAllSvc<T: Search>(pub Arc<T>);
                    impl<T: Search> tonic::server::UnaryService<super::SearchAllRequest>
                    for SearchAllSvc<T> {
                        type Response = super::SearchAllResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchAllRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_all(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchAllSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.polymer.app.search.v1.Search/SearchByType" => {
                    #[allow(non_camel_case_types)]
                    struct SearchByTypeSvc<T: Search>(pub Arc<T>);
                    impl<
                        T: Search,
                    > tonic::server::UnaryService<super::SearchByTypeRequest>
                    for SearchByTypeSvc<T> {
                        type Response = super::SearchByTypeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchByTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_by_type(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchByTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.polymer.app.search.v1.Search/SearchComic" => {
                    #[allow(non_camel_case_types)]
                    struct SearchComicSvc<T: Search>(pub Arc<T>);
                    impl<
                        T: Search,
                    > tonic::server::UnaryService<super::SearchComicRequest>
                    for SearchComicSvc<T> {
                        type Response = super::SearchComicResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchComicRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_comic(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchComicSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.polymer.app.search.v1.Search/SearchOGV" => {
                    #[allow(non_camel_case_types)]
                    struct SearchOGVSvc<T: Search>(pub Arc<T>);
                    impl<T: Search> tonic::server::UnaryService<super::SearchOgvReq>
                    for SearchOGVSvc<T> {
                        type Response = super::SearchOgvReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchOgvReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_ogv(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchOGVSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.polymer.app.search.v1.Search/SearchReserve" => {
                    #[allow(non_camel_case_types)]
                    struct SearchReserveSvc<T: Search>(pub Arc<T>);
                    impl<
                        T: Search,
                    > tonic::server::UnaryService<super::SearchReserveRequest>
                    for SearchReserveSvc<T> {
                        type Response = super::SearchReserveResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchReserveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_reserve(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchReserveSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.polymer.app.search.v1.Search/SearchReserveCancel" => {
                    #[allow(non_camel_case_types)]
                    struct SearchReserveCancelSvc<T: Search>(pub Arc<T>);
                    impl<
                        T: Search,
                    > tonic::server::UnaryService<super::SearchReserveRequest>
                    for SearchReserveCancelSvc<T> {
                        type Response = super::SearchReserveResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchReserveRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Search>::search_reserve_cancel(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchReserveCancelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for SearchServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "bilibili.polymer.app.search.v1.Search";
    impl<T> tonic::server::NamedService for SearchServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
