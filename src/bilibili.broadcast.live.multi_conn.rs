// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScoreEvent {
    ///
    #[prost(message, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<score_event::Info>,
    ///
    #[prost(int64, tag = "2")]
    pub invoking_time: i64,
    ///
    #[prost(int64, tag = "3")]
    pub version: i64,
    ///
    #[prost(string, tag = "4")]
    pub layout: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub room_status: i64,
    ///
    #[prost(string, tag = "6")]
    pub biz_session_id: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ScoreEvent`.
pub mod score_event {
    ///
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Info {
        ///
        #[prost(int64, tag = "1")]
        pub uid: i64,
        ///
        #[prost(int64, tag = "2")]
        pub room_id: i64,
        ///
        #[prost(string, tag = "3")]
        pub avatar: ::prost::alloc::string::String,
        ///
        #[prost(string, tag = "4")]
        pub nickname: ::prost::alloc::string::String,
        ///
        #[prost(int64, tag = "5")]
        pub price: i64,
        ///
        #[prost(string, tag = "6")]
        pub price_text: ::prost::alloc::string::String,
        ///
        #[prost(int64, tag = "7")]
        pub gender: i64,
    }
    impl ::prost::Name for Info {
        const NAME: &'static str = "info";
        const PACKAGE: &'static str = "bilibili.broadcast.live.multi_conn";
        fn full_name() -> ::prost::alloc::string::String {
            "bilibili.broadcast.live.multi_conn.ScoreEvent.info".into()
        }
        fn type_url() -> ::prost::alloc::string::String {
            "/bilibili.broadcast.live.multi_conn.ScoreEvent.info".into()
        }
    }
}
impl ::prost::Name for ScoreEvent {
    const NAME: &'static str = "ScoreEvent";
    const PACKAGE: &'static str = "bilibili.broadcast.live.multi_conn";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.broadcast.live.multi_conn.ScoreEvent".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.broadcast.live.multi_conn.ScoreEvent".into()
    }
}
