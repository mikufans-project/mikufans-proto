// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluationShowInfo {
    ///
    #[prost(bool, tag = "1")]
    pub show: bool,
    ///
    #[prost(enumeration = "EvaluateType", tag = "2")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "3")]
    pub step_select: ::prost::alloc::vec::Vec<EvaluationStepSelect>,
    ///
    #[prost(int64, tag = "4")]
    pub msg_key: i64,
    ///
    #[prost(bool, tag = "5")]
    pub up: bool,
    ///
    #[prost(string, tag = "6")]
    pub feedback: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub customer_sess_id: i64,
    ///
    #[prost(bool, tag = "8")]
    pub done: bool,
    ///
    #[prost(string, tag = "9")]
    pub editor_input: ::prost::alloc::string::String,
}
impl ::prost::Name for EvaluationShowInfo {
    const NAME: &'static str = "EvaluationShowInfo";
    const PACKAGE: &'static str = "bilibili.im.customer.independent";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.im.customer.independent.EvaluationShowInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.im.customer.independent.EvaluationShowInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluationStepSelect {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "Select", tag = "2")]
    pub select: i32,
}
impl ::prost::Name for EvaluationStepSelect {
    const NAME: &'static str = "EvaluationStepSelect";
    const PACKAGE: &'static str = "bilibili.im.customer.independent";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.im.customer.independent.EvaluationStepSelect".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.im.customer.independent.EvaluationStepSelect".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishParagraphsRenderStopPos {
    ///
    #[prost(int64, tag = "1")]
    pub para: i64,
    ///
    #[prost(int64, tag = "2")]
    pub node: i64,
}
impl ::prost::Name for FinishParagraphsRenderStopPos {
    const NAME: &'static str = "FinishParagraphsRenderStopPos";
    const PACKAGE: &'static str = "bilibili.im.customer.independent";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.im.customer.independent.FinishParagraphsRenderStopPos".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.im.customer.independent.FinishParagraphsRenderStopPos".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgParagraphText {
    ///
    #[prost(message, repeated, tag = "1")]
    pub paragraphs: ::prost::alloc::vec::Vec<
        super::super::super::app::dynamic::v2::Paragraph,
    >,
    ///
    #[prost(message, optional, tag = "2")]
    pub evaluation: ::core::option::Option<EvaluationShowInfo>,
    ///
    #[prost(message, optional, tag = "3")]
    pub stop_pos: ::core::option::Option<FinishParagraphsRenderStopPos>,
}
impl ::prost::Name for MsgParagraphText {
    const NAME: &'static str = "MsgParagraphText";
    const PACKAGE: &'static str = "bilibili.im.customer.independent";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.im.customer.independent.MsgParagraphText".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.im.customer.independent.MsgParagraphText".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EvaluateType {
    ///
    EvaluateMachineMsg = 0,
    ///
    EvaluateCustomer = 1,
    ///
    EvaluateCustomerInvited = 2,
}
impl EvaluateType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvaluateMachineMsg => "EvaluateMachineMsg",
            Self::EvaluateCustomer => "EvaluateCustomer",
            Self::EvaluateCustomerInvited => "EvaluateCustomerInvited",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EvaluateMachineMsg" => Some(Self::EvaluateMachineMsg),
            "EvaluateCustomer" => Some(Self::EvaluateCustomer),
            "EvaluateCustomerInvited" => Some(Self::EvaluateCustomerInvited),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Select {
    ///
    Able = 0,
    ///
    Selected = 1,
    ///
    Unable = 2,
}
impl Select {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Able => "ABLE",
            Self::Selected => "SELECTED",
            Self::Unable => "UNABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ABLE" => Some(Self::Able),
            "SELECTED" => Some(Self::Selected),
            "UNABLE" => Some(Self::Unable),
            _ => None,
        }
    }
}
