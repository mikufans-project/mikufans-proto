// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountInfo {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub face: ::prost::alloc::string::String,
}
impl ::prost::Name for AccountInfo {
    const NAME: &'static str = "AccountInfo";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.AccountInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.AccountInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Base {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub face: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub name_color: i32,
    ///
    #[prost(bool, tag = "4")]
    pub is_mystery: bool,
    ///
    #[prost(message, optional, tag = "5")]
    pub risk_ctrl_info: ::core::option::Option<RiskCtrlInfo>,
    ///
    #[prost(message, optional, tag = "6")]
    pub origin_info: ::core::option::Option<AccountInfo>,
    ///
    #[prost(message, optional, tag = "7")]
    pub official_info: ::core::option::Option<OfficialInfo>,
    ///
    #[prost(string, tag = "8")]
    pub name_color_str: ::prost::alloc::string::String,
}
impl ::prost::Name for Base {
    const NAME: &'static str = "Base";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.Base".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.Base".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseOption {
    ///
    #[prost(bool, tag = "1")]
    pub need_mystery: bool,
    ///
    #[prost(message, optional, tag = "2")]
    pub risk_ctrl: ::core::option::Option<RiskCtrl>,
    ///
    #[prost(message, optional, tag = "3")]
    pub room_anon_ctrl: ::core::option::Option<RoomAnonCtrl>,
    ///
    #[prost(int32, repeated, tag = "4")]
    pub risk_ctrl_handles: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for BaseOption {
    const NAME: &'static str = "BaseOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.BaseOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.BaseOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Guard {
    ///
    #[prost(int64, tag = "1")]
    pub level: i64,
    ///
    #[prost(string, tag = "2")]
    pub expired_str: ::prost::alloc::string::String,
}
impl ::prost::Name for Guard {
    const NAME: &'static str = "Guard";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.Guard".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.Guard".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GuardLeader {
    ///
    #[prost(bool, tag = "1")]
    pub is_guard_leader: bool,
}
impl ::prost::Name for GuardLeader {
    const NAME: &'static str = "GuardLeader";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.GuardLeader".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.GuardLeader".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GuardLeaderOption {
    ///
    #[prost(int64, tag = "1")]
    pub ruid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub room_id: i64,
}
impl ::prost::Name for GuardLeaderOption {
    const NAME: &'static str = "GuardLeaderOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.GuardLeaderOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.GuardLeaderOption".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GuardOption {
    ///
    #[prost(int64, tag = "1")]
    pub ruid: i64,
    ///
    #[prost(bool, tag = "2")]
    pub use_local_cache: bool,
    ///
    #[prost(bool, tag = "3")]
    pub strong_depend: bool,
}
impl ::prost::Name for GuardOption {
    const NAME: &'static str = "GuardOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.GuardOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.GuardOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Medal {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "2")]
    pub level: i64,
    ///
    #[prost(int64, tag = "3")]
    pub color_start: i64,
    ///
    #[prost(int64, tag = "4")]
    pub color_end: i64,
    ///
    #[prost(int64, tag = "5")]
    pub color_border: i64,
    ///
    #[prost(int64, tag = "6")]
    pub color: i64,
    ///
    #[prost(int64, tag = "7")]
    pub id: i64,
    ///
    #[prost(enumeration = "HaveMedalType", tag = "8")]
    pub typ: i32,
    ///
    #[prost(int64, tag = "9")]
    pub is_light: i64,
    ///
    #[prost(int64, tag = "10")]
    pub ruid: i64,
    ///
    #[prost(int64, tag = "11")]
    pub guard_level: i64,
    ///
    #[prost(int64, tag = "12")]
    pub score: i64,
    ///
    #[prost(string, tag = "13")]
    pub guard_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub honor_icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub v2_medal_color_start: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "16")]
    pub v2_medal_color_end: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "17")]
    pub v2_medal_color_border: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "18")]
    pub v2_medal_color_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "19")]
    pub v2_medal_color_level: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "20")]
    pub user_receive_count: i64,
}
impl ::prost::Name for Medal {
    const NAME: &'static str = "Medal";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.Medal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.Medal".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MedalOption {
    ///
    #[prost(enumeration = "MedalType", tag = "1")]
    pub typ: i32,
    ///
    #[prost(int64, tag = "2")]
    pub ruid: i64,
    ///
    #[prost(bool, tag = "3")]
    pub need_guard: bool,
    ///
    #[prost(bool, tag = "4")]
    pub strong_depend: bool,
    ///
    #[prost(bool, tag = "5")]
    pub need_group: bool,
}
impl ::prost::Name for MedalOption {
    const NAME: &'static str = "MedalOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.MedalOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.MedalOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OfficialInfo {
    ///
    #[prost(int64, tag = "1")]
    pub role: i64,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub desc: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "4")]
    pub r#type: i64,
}
impl ::prost::Name for OfficialInfo {
    const NAME: &'static str = "OfficialInfo";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.OfficialInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.OfficialInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RiskCtrl {
    ///
    #[prost(int64, tag = "1")]
    pub room_id: i64,
    ///
    #[prost(enumeration = "RiskPolicyEnum", tag = "2")]
    pub policy: i32,
}
impl ::prost::Name for RiskCtrl {
    const NAME: &'static str = "RiskCtrl";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.RiskCtrl".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.RiskCtrl".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RiskCtrlInfo {
    ///
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub face: ::prost::alloc::string::String,
}
impl ::prost::Name for RiskCtrlInfo {
    const NAME: &'static str = "RiskCtrlInfo";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.RiskCtrlInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.RiskCtrlInfo".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoomAnonCtrl {
    ///
    #[prost(enumeration = "RoomAnonTypeEnum", tag = "1")]
    pub r#type: i32,
}
impl ::prost::Name for RoomAnonCtrl {
    const NAME: &'static str = "RoomAnonCtrl";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.RoomAnonCtrl".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.RoomAnonCtrl".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Title {
    ///
    #[prost(string, tag = "1")]
    pub old_title_css_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub title_css_id: ::prost::alloc::string::String,
}
impl ::prost::Name for Title {
    const NAME: &'static str = "Title";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.Title".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.Title".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TitleOption {
    ///
    #[prost(int64, tag = "1")]
    pub room_id: i64,
    ///
    #[prost(bool, tag = "2")]
    pub strong_depend: bool,
}
impl ::prost::Name for TitleOption {
    const NAME: &'static str = "TitleOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.TitleOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.TitleOption".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserHeadFrame {
    ///
    #[prost(int64, tag = "1")]
    pub id: i64,
    ///
    #[prost(string, tag = "2")]
    pub frame_img: ::prost::alloc::string::String,
}
impl ::prost::Name for UserHeadFrame {
    const NAME: &'static str = "UserHeadFrame";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.UserHeadFrame".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.UserHeadFrame".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserInfo {
    ///
    #[prost(int64, tag = "1")]
    pub uid: i64,
    ///
    #[prost(message, optional, tag = "2")]
    pub base: ::core::option::Option<Base>,
    ///
    #[prost(message, optional, tag = "3")]
    pub medal: ::core::option::Option<Medal>,
    ///
    #[prost(message, optional, tag = "4")]
    pub wealth: ::core::option::Option<Wealth>,
    ///
    #[prost(message, optional, tag = "5")]
    pub title: ::core::option::Option<Title>,
    ///
    #[prost(message, optional, tag = "6")]
    pub guard: ::core::option::Option<Guard>,
    ///
    #[prost(message, optional, tag = "7")]
    pub uhead_frame: ::core::option::Option<UserHeadFrame>,
    ///
    #[prost(message, optional, tag = "8")]
    pub guard_leader: ::core::option::Option<GuardLeader>,
}
impl ::prost::Name for UserInfo {
    const NAME: &'static str = "UserInfo";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.UserInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.UserInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Wealth {
    ///
    #[prost(int64, tag = "1")]
    pub level: i64,
    ///
    #[prost(string, tag = "2")]
    pub dm_icon_key: ::prost::alloc::string::String,
}
impl ::prost::Name for Wealth {
    const NAME: &'static str = "Wealth";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.Wealth".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.Wealth".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WealthOption {
    ///
    #[prost(int64, tag = "1")]
    pub roomid: i64,
    ///
    #[prost(int64, tag = "2")]
    pub view_uid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub ruid: i64,
    ///
    #[prost(bool, tag = "4")]
    pub strong_depend: bool,
}
impl ::prost::Name for WealthOption {
    const NAME: &'static str = "WealthOption";
    const PACKAGE: &'static str = "bilibili.live.component.common_model.user_dagw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.live.component.common_model.user_dagw.WealthOption".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.live.component.common_model.user_dagw.WealthOption".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HaveMedalType {
    ///
    MedalCommon = 0,
    ///
    MedalGroup = 1,
}
impl HaveMedalType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MedalCommon => "Medal_Common",
            Self::MedalGroup => "Medal_Group",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Medal_Common" => Some(Self::MedalCommon),
            "Medal_Group" => Some(Self::MedalGroup),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MedalType {
    ///
    MedalWear = 0,
    ///
    MedalSpec = 1,
}
impl MedalType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MedalWear => "Medal_Wear",
            Self::MedalSpec => "Medal_Spec",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Medal_Wear" => Some(Self::MedalWear),
            "Medal_Spec" => Some(Self::MedalSpec),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RiskPolicyEnum {
    ///
    RpNormal = 0,
    ///
    RpPolicy = 1,
    ///
    RpSilence = 2,
    ///
    RpCny = 3,
    ///
    RpBigev = 4,
}
impl RiskPolicyEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RpNormal => "RP_NORMAL",
            Self::RpPolicy => "RP_POLICY",
            Self::RpSilence => "RP_SILENCE",
            Self::RpCny => "RP_CNY",
            Self::RpBigev => "RP_BIGEV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RP_NORMAL" => Some(Self::RpNormal),
            "RP_POLICY" => Some(Self::RpPolicy),
            "RP_SILENCE" => Some(Self::RpSilence),
            "RP_CNY" => Some(Self::RpCny),
            "RP_BIGEV" => Some(Self::RpBigev),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RoomAnonTypeEnum {
    ///
    RaAll = 0,
    ///
    RaWithSubject = 1,
}
impl RoomAnonTypeEnum {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaAll => "RA_ALL",
            Self::RaWithSubject => "RA_With_Subject",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RA_ALL" => Some(Self::RaAll),
            "RA_With_Subject" => Some(Self::RaWithSubject),
            _ => None,
        }
    }
}
