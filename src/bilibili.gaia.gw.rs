// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceAppList {
    ///
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "2")]
    pub system_app_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    ///
    #[prost(string, repeated, tag = "3")]
    pub user_app_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for DeviceAppList {
    const NAME: &'static str = "DeviceAppList";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.DeviceAppList".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.DeviceAppList".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPublicKeyReply {
    ///
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub public_key: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "3")]
    pub deadline: i64,
}
impl ::prost::Name for FetchPublicKeyReply {
    const NAME: &'static str = "FetchPublicKeyReply";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.FetchPublicKeyReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.FetchPublicKeyReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GaiaDeviceBasicInfo {
    ///
    #[prost(string, tag = "1")]
    pub platform: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub device: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub mobi_app: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub origin: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub app_id: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub sdkver: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "7")]
    pub app_version: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "8")]
    pub app_version_code: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub build: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub channel: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "11")]
    pub brand: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "12")]
    pub model: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "13")]
    pub osver: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub user_agent: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub buvid_local: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "16")]
    pub buvid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "17")]
    pub mid: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "18")]
    pub fts: i64,
    ///
    #[prost(int32, tag = "19")]
    pub first: i32,
    ///
    #[prost(string, tag = "20")]
    pub network: ::prost::alloc::string::String,
}
impl ::prost::Name for GaiaDeviceBasicInfo {
    const NAME: &'static str = "GaiaDeviceBasicInfo";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.GaiaDeviceBasicInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.GaiaDeviceBasicInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GaiaEncryptMsgReq {
    ///
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<GaiaMsgHeader>,
    ///
    #[prost(bytes = "vec", tag = "2")]
    pub encrypt_payload: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for GaiaEncryptMsgReq {
    const NAME: &'static str = "GaiaEncryptMsgReq";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.GaiaEncryptMsgReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.GaiaEncryptMsgReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GaiaMsgHeader {
    ///
    #[prost(enumeration = "EncryptType", tag = "1")]
    pub encode_type: i32,
    ///
    #[prost(enumeration = "PayloadType", tag = "2")]
    pub payload_type: i32,
    ///
    #[prost(bytes = "vec", tag = "3")]
    pub encoded_aes_key: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(int64, tag = "4")]
    pub ts: i64,
}
impl ::prost::Name for GaiaMsgHeader {
    const NAME: &'static str = "GaiaMsgHeader";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.GaiaMsgHeader".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.GaiaMsgHeader".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadAppListReply {
    ///
    #[prost(string, tag = "1")]
    pub trace_id: ::prost::alloc::string::String,
}
impl ::prost::Name for UploadAppListReply {
    const NAME: &'static str = "UploadAppListReply";
    const PACKAGE: &'static str = "bilibili.gaia.gw";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.gaia.gw.UploadAppListReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.gaia.gw.UploadAppListReply".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EncryptType {
    ///
    InvalidEncryptType = 0,
    ///
    ClientAes = 1,
    ///
    ServerRsaAes = 2,
}
impl EncryptType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::InvalidEncryptType => "INVALID_ENCRYPT_TYPE",
            Self::ClientAes => "CLIENT_AES",
            Self::ServerRsaAes => "SERVER_RSA_AES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVALID_ENCRYPT_TYPE" => Some(Self::InvalidEncryptType),
            "CLIENT_AES" => Some(Self::ClientAes),
            "SERVER_RSA_AES" => Some(Self::ServerRsaAes),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PayloadType {
    ///
    InvalidPayload = 0,
    ///
    DeviceAppList = 1,
}
impl PayloadType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::InvalidPayload => "INVALID_PAYLOAD",
            Self::DeviceAppList => "DEVICE_APP_LIST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVALID_PAYLOAD" => Some(Self::InvalidPayload),
            "DEVICE_APP_LIST" => Some(Self::DeviceAppList),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod gaia_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    #[derive(Debug, Clone)]
    pub struct GaiaClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> GaiaClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GaiaClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GaiaClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        pub async fn ex_climb_apple_trees(
            &mut self,
            request: impl tonic::IntoRequest<super::GaiaEncryptMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAppListReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.gaia.gw.Gaia/ExClimbAppleTrees",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bilibili.gaia.gw.Gaia", "ExClimbAppleTrees"));
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn ex_fetch_public_key(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::FetchPublicKeyReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.gaia.gw.Gaia/ExFetchPublicKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bilibili.gaia.gw.Gaia", "ExFetchPublicKey"));
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn ex_get_axe(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<
            tonic::Response<super::FetchPublicKeyReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.gaia.gw.Gaia/ExGetAxe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bilibili.gaia.gw.Gaia", "ExGetAxe"));
            self.inner.unary(req, path, codec).await
        }
        ///
        pub async fn ex_upload_app_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GaiaEncryptMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAppListReply>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bilibili.gaia.gw.Gaia/ExUploadAppList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bilibili.gaia.gw.Gaia", "ExUploadAppList"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod gaia_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GaiaServer.
    #[async_trait]
    pub trait Gaia: std::marker::Send + std::marker::Sync + 'static {
        ///
        async fn ex_climb_apple_trees(
            &self,
            request: tonic::Request<super::GaiaEncryptMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAppListReply>,
            tonic::Status,
        >;
        ///
        async fn ex_fetch_public_key(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::FetchPublicKeyReply>,
            tonic::Status,
        >;
        ///
        async fn ex_get_axe(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<
            tonic::Response<super::FetchPublicKeyReply>,
            tonic::Status,
        >;
        ///
        async fn ex_upload_app_list(
            &self,
            request: tonic::Request<super::GaiaEncryptMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAppListReply>,
            tonic::Status,
        >;
    }
    ///
    #[derive(Debug)]
    pub struct GaiaServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GaiaServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GaiaServer<T>
    where
        T: Gaia,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/bilibili.gaia.gw.Gaia/ExClimbAppleTrees" => {
                    #[allow(non_camel_case_types)]
                    struct ExClimbAppleTreesSvc<T: Gaia>(pub Arc<T>);
                    impl<T: Gaia> tonic::server::UnaryService<super::GaiaEncryptMsgReq>
                    for ExClimbAppleTreesSvc<T> {
                        type Response = super::UploadAppListReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GaiaEncryptMsgReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Gaia>::ex_climb_apple_trees(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExClimbAppleTreesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.gaia.gw.Gaia/ExFetchPublicKey" => {
                    #[allow(non_camel_case_types)]
                    struct ExFetchPublicKeySvc<T: Gaia>(pub Arc<T>);
                    impl<T: Gaia> tonic::server::UnaryService<()>
                    for ExFetchPublicKeySvc<T> {
                        type Response = super::FetchPublicKeyReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Gaia>::ex_fetch_public_key(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExFetchPublicKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.gaia.gw.Gaia/ExGetAxe" => {
                    #[allow(non_camel_case_types)]
                    struct ExGetAxeSvc<T: Gaia>(pub Arc<T>);
                    impl<T: Gaia> tonic::server::UnaryService<()> for ExGetAxeSvc<T> {
                        type Response = super::FetchPublicKeyReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Gaia>::ex_get_axe(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExGetAxeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bilibili.gaia.gw.Gaia/ExUploadAppList" => {
                    #[allow(non_camel_case_types)]
                    struct ExUploadAppListSvc<T: Gaia>(pub Arc<T>);
                    impl<T: Gaia> tonic::server::UnaryService<super::GaiaEncryptMsgReq>
                    for ExUploadAppListSvc<T> {
                        type Response = super::UploadAppListReply;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GaiaEncryptMsgReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Gaia>::ex_upload_app_list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ExUploadAppListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for GaiaServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "bilibili.gaia.gw.Gaia";
    impl<T> tonic::server::NamedService for GaiaServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
