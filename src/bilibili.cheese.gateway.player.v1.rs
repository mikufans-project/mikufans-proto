// This file is @generated by prost-build.
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayAbilityConf {
    ///
    #[prost(bool, tag = "1")]
    pub background_play_disable: bool,
    ///
    #[prost(bool, tag = "2")]
    pub flip_disable: bool,
    ///
    #[prost(bool, tag = "3")]
    pub cast_disable: bool,
    ///
    #[prost(bool, tag = "4")]
    pub feedback_disable: bool,
    ///
    #[prost(bool, tag = "5")]
    pub subtitle_disable: bool,
    ///
    #[prost(bool, tag = "6")]
    pub playback_rate_disable: bool,
    ///
    #[prost(bool, tag = "7")]
    pub time_up_disable: bool,
    ///
    #[prost(bool, tag = "8")]
    pub playback_mode_disable: bool,
    ///
    #[prost(bool, tag = "9")]
    pub scale_mode_disable: bool,
    ///
    #[prost(bool, tag = "10")]
    pub like_disable: bool,
    ///
    #[prost(bool, tag = "11")]
    pub dislike_disable: bool,
    ///
    #[prost(bool, tag = "12")]
    pub coin_disable: bool,
    ///
    #[prost(bool, tag = "13")]
    pub elec_disable: bool,
    ///
    #[prost(bool, tag = "14")]
    pub share_disable: bool,
    ///
    #[prost(bool, tag = "15")]
    pub screen_shot_disable: bool,
    ///
    #[prost(bool, tag = "16")]
    pub lock_screen_disable: bool,
    ///
    #[prost(bool, tag = "17")]
    pub recommend_disable: bool,
    ///
    #[prost(bool, tag = "18")]
    pub playback_speed_disable: bool,
    ///
    #[prost(bool, tag = "19")]
    pub definition_disable: bool,
    ///
    #[prost(bool, tag = "20")]
    pub selections_disable: bool,
    ///
    #[prost(bool, tag = "21")]
    pub next_disable: bool,
    ///
    #[prost(bool, tag = "22")]
    pub edit_dm_disable: bool,
    ///
    #[prost(bool, tag = "25")]
    pub outer_dm_disable: bool,
    ///
    #[prost(bool, tag = "26")]
    pub inner_dm_disable: bool,
    ///
    #[prost(bool, tag = "27")]
    pub small_window_disable: bool,
    ///
    #[prost(string, tag = "28")]
    pub cast_disable_reason_code: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "29")]
    pub cast_disable_reason_text: ::prost::alloc::string::String,
}
impl ::prost::Name for PlayAbilityConf {
    const NAME: &'static str = "PlayAbilityConf";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.PlayAbilityConf".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.PlayAbilityConf".into()
    }
}
///
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayViewBusinessInfo {
    ///
    #[prost(enumeration = "DrmTechType", tag = "1")]
    pub drm_tech_type: i32,
}
impl ::prost::Name for PlayViewBusinessInfo {
    const NAME: &'static str = "PlayViewBusinessInfo";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.PlayViewBusinessInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.PlayViewBusinessInfo".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayViewReply {
    ///
    #[prost(message, optional, tag = "1")]
    pub video_info: ::core::option::Option<
        super::super::super::super::app::playurl::v1::VideoInfo,
    >,
    ///
    #[prost(message, optional, tag = "2")]
    pub play_conf: ::core::option::Option<PlayAbilityConf>,
    ///
    #[prost(message, optional, tag = "3")]
    pub business: ::core::option::Option<PlayViewBusinessInfo>,
    ///
    #[prost(message, optional, tag = "4")]
    pub risk_control: ::core::option::Option<RiskControl>,
}
impl ::prost::Name for PlayViewReply {
    const NAME: &'static str = "PlayViewReply";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.PlayViewReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.PlayViewReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayViewReq {
    ///
    #[prost(int64, tag = "1")]
    pub ep_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub qn: i64,
    ///
    #[prost(int32, tag = "4")]
    pub fnver: i32,
    ///
    #[prost(int32, tag = "5")]
    pub fnval: i32,
    ///
    #[prost(int32, tag = "6")]
    pub download: i32,
    ///
    #[prost(int32, tag = "7")]
    pub force_host: i32,
    ///
    #[prost(bool, tag = "8")]
    pub fourk: bool,
    ///
    #[prost(string, tag = "9")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub from_spmid: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub teenagers_mode: i32,
    ///
    #[prost(
        enumeration = "super::super::super::super::app::playurl::v1::CodeType",
        tag = "12"
    )]
    pub prefer_codec_type: i32,
    ///
    #[prost(bool, tag = "13")]
    pub is_preview: bool,
    ///
    #[prost(bool, tag = "14")]
    pub is_raw_stream: bool,
    ///
    #[prost(enumeration = "SecurityLevel", tag = "15")]
    pub security_level: i32,
}
impl ::prost::Name for PlayViewReq {
    const NAME: &'static str = "PlayViewReq";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.PlayViewReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.PlayViewReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectReply {
    ///
    #[prost(message, optional, tag = "1")]
    pub project: ::core::option::Option<
        super::super::super::super::app::playurl::v1::PlayUrlReply,
    >,
}
impl ::prost::Name for ProjectReply {
    const NAME: &'static str = "ProjectReply";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.ProjectReply".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.ProjectReply".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProjectReq {
    ///
    #[prost(int64, tag = "1")]
    pub ep_id: i64,
    ///
    #[prost(int64, tag = "2")]
    pub cid: i64,
    ///
    #[prost(int64, tag = "3")]
    pub qn: i64,
    ///
    #[prost(int32, tag = "4")]
    pub fnver: i32,
    ///
    #[prost(int32, tag = "5")]
    pub fnval: i32,
    ///
    #[prost(int32, tag = "6")]
    pub download: i32,
    ///
    #[prost(int32, tag = "7")]
    pub force_host: i32,
    ///
    #[prost(bool, tag = "8")]
    pub fourk: bool,
    ///
    #[prost(string, tag = "9")]
    pub spmid: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "10")]
    pub from_spmid: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "11")]
    pub protocol: i32,
    ///
    #[prost(int32, tag = "12")]
    pub device_type: i32,
    ///
    #[prost(bool, tag = "13")]
    pub flv_proj: bool,
    ///
    #[prost(int64, tag = "14")]
    pub aid: i64,
}
impl ::prost::Name for ProjectReq {
    const NAME: &'static str = "ProjectReq";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.ProjectReq".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.ProjectReq".into()
    }
}
///
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RiskControl {
    ///
    #[prost(bool, tag = "1")]
    pub need_send_sms: bool,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub risk_message: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub action_desc: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub send_sms_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "6")]
    pub buvid: ::prost::alloc::string::String,
}
impl ::prost::Name for RiskControl {
    const NAME: &'static str = "RiskControl";
    const PACKAGE: &'static str = "bilibili.cheese.gateway.player.v1";
    fn full_name() -> ::prost::alloc::string::String {
        "bilibili.cheese.gateway.player.v1.RiskControl".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/bilibili.cheese.gateway.player.v1.RiskControl".into()
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DrmTechType {
    ///
    Non = 0,
    ///
    FairPlay = 1,
    ///
    WideVine = 2,
    ///
    BiliDrm = 3,
}
impl DrmTechType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Non => "NON",
            Self::FairPlay => "FAIR_PLAY",
            Self::WideVine => "WIDE_VINE",
            Self::BiliDrm => "BILI_DRM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NON" => Some(Self::Non),
            "FAIR_PLAY" => Some(Self::FairPlay),
            "WIDE_VINE" => Some(Self::WideVine),
            "BILI_DRM" => Some(Self::BiliDrm),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecurityLevel {
    ///
    LevelUnknown = 0,
    ///
    LevelL1 = 1,
    ///
    LevelL2 = 2,
    ///
    LevelL3 = 3,
}
impl SecurityLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LevelUnknown => "LEVEL_UNKNOWN",
            Self::LevelL1 => "LEVEL_L1",
            Self::LevelL2 => "LEVEL_L2",
            Self::LevelL3 => "LEVEL_L3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEVEL_UNKNOWN" => Some(Self::LevelUnknown),
            "LEVEL_L1" => Some(Self::LevelL1),
            "LEVEL_L2" => Some(Self::LevelL2),
            "LEVEL_L3" => Some(Self::LevelL3),
            _ => None,
        }
    }
}
